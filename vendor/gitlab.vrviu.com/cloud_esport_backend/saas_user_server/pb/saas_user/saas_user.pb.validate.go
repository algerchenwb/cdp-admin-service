// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saas_user.proto

package saas_user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ping

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pong

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AuthoritySet

	// no validation rules for Type

	// no validation rules for AreaType

	// no validation rules for SetId

	// no validation rules for PrimaryId

	// no validation rules for AgentId

	// no validation rules for BizId

	// no validation rules for UserName

	// no validation rules for WallpaperId

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for EffectiveDate

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for Email

	// no validation rules for AccessKey

	// no validation rules for AccessSecret

	// no validation rules for EnableQualityReport

	// no validation rules for UpgradeGreyType

	// no validation rules for Domain

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ModifyTime

	// no validation rules for VlanId

	// no validation rules for ShopMode

	// no validation rules for AgentSharePercent

	// no validation rules for Tag

	// no validation rules for ProvinceRegionCode

	// no validation rules for CityRegionCode

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on GetUserInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoListReqMultiError, or nil if none found.
func (m *GetUserInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Conditions

	// no validation rules for Sorts

	// no validation rules for Orders

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetUserInfoListReqMultiError(errors)
	}

	return nil
}

// GetUserInfoListReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoListReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoListReqMultiError) AllErrors() []error { return m }

// GetUserInfoListReqValidationError is the validation error returned by
// GetUserInfoListReq.Validate if the designated constraints aren't met.
type GetUserInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoListReqValidationError) ErrorName() string {
	return "GetUserInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoListReqValidationError{}

// Validate checks the field values on GetUserInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoListRespMultiError, or nil if none found.
func (m *GetUserInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInfoListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetUserInfoListRespMultiError(errors)
	}

	return nil
}

// GetUserInfoListRespMultiError is an error wrapping multiple validation
// errors returned by GetUserInfoListResp.ValidateAll() if the designated
// constraints aren't met.
type GetUserInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoListRespMultiError) AllErrors() []error { return m }

// GetUserInfoListRespValidationError is the validation error returned by
// GetUserInfoListResp.Validate if the designated constraints aren't met.
type GetUserInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoListRespValidationError) ErrorName() string {
	return "GetUserInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoListRespValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoRespMultiError, or nil if none found.
func (m *GetUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetUserInfoRespMultiError(errors)
	}

	return nil
}

// GetUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRespMultiError) AllErrors() []error { return m }

// GetUserInfoRespValidationError is the validation error returned by
// GetUserInfoResp.Validate if the designated constraints aren't met.
type GetUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRespValidationError) ErrorName() string { return "GetUserInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRespValidationError{}

// Validate checks the field values on UpdateUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoReqMultiError, or nil if none found.
func (m *UpdateUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UserId

	// no validation rules for AuthoritySet

	// no validation rules for Type

	// no validation rules for AreaType

	// no validation rules for SetId

	// no validation rules for PrimaryId

	// no validation rules for AgentId

	// no validation rules for BizId

	// no validation rules for UserName

	// no validation rules for WallpaperId

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for EffectiveDate

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for Email

	// no validation rules for AccessKey

	// no validation rules for AccessSecret

	// no validation rules for EnableQualityReport

	// no validation rules for UpgradeGreyType

	// no validation rules for Domain

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ModifyTime

	// no validation rules for VlanId

	// no validation rules for ShopMode

	// no validation rules for AgentSharePercent

	// no validation rules for Tag

	// no validation rules for ProvinceRegionCode

	// no validation rules for CityRegionCode

	if len(errors) > 0 {
		return UpdateUserInfoReqMultiError(errors)
	}

	return nil
}

// UpdateUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoReqMultiError) AllErrors() []error { return m }

// UpdateUserInfoReqValidationError is the validation error returned by
// UpdateUserInfoReq.Validate if the designated constraints aren't met.
type UpdateUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoReqValidationError) ErrorName() string {
	return "UpdateUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoReqValidationError{}

// Validate checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoRespMultiError, or nil if none found.
func (m *UpdateUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return UpdateUserInfoRespMultiError(errors)
	}

	return nil
}

// UpdateUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoRespMultiError) AllErrors() []error { return m }

// UpdateUserInfoRespValidationError is the validation error returned by
// UpdateUserInfoResp.Validate if the designated constraints aren't met.
type UpdateUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoRespValidationError) ErrorName() string {
	return "UpdateUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoRespValidationError{}

// Validate checks the field values on CreateUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserInfoReqMultiError, or nil if none found.
func (m *CreateUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UserId

	// no validation rules for AuthoritySet

	// no validation rules for Type

	// no validation rules for AreaType

	// no validation rules for SetId

	// no validation rules for PrimaryId

	// no validation rules for AgentId

	// no validation rules for BizId

	// no validation rules for UserName

	// no validation rules for WallpaperId

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for EffectiveDate

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for Email

	// no validation rules for AccessKey

	// no validation rules for AccessSecret

	// no validation rules for EnableQualityReport

	// no validation rules for UpgradeGreyType

	// no validation rules for Domain

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ModifyTime

	// no validation rules for VlanId

	// no validation rules for ShopMode

	// no validation rules for AgentSharePercent

	// no validation rules for Tag

	// no validation rules for ProvinceRegionCode

	// no validation rules for CityRegionCode

	if len(errors) > 0 {
		return CreateUserInfoReqMultiError(errors)
	}

	return nil
}

// CreateUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserInfoReqMultiError) AllErrors() []error { return m }

// CreateUserInfoReqValidationError is the validation error returned by
// CreateUserInfoReq.Validate if the designated constraints aren't met.
type CreateUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserInfoReqValidationError) ErrorName() string {
	return "CreateUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserInfoReqValidationError{}

// Validate checks the field values on CreateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserInfoRespMultiError, or nil if none found.
func (m *CreateUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserInfoRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return CreateUserInfoRespMultiError(errors)
	}

	return nil
}

// CreateUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by CreateUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type CreateUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserInfoRespMultiError) AllErrors() []error { return m }

// CreateUserInfoRespValidationError is the validation error returned by
// CreateUserInfoResp.Validate if the designated constraints aren't met.
type CreateUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserInfoRespValidationError) ErrorName() string {
	return "CreateUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserInfoRespValidationError{}

// Validate checks the field values on DeleteUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserInfoReqMultiError, or nil if none found.
func (m *DeleteUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteUserInfoReqMultiError(errors)
	}

	return nil
}

// DeleteUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by DeleteUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserInfoReqMultiError) AllErrors() []error { return m }

// DeleteUserInfoReqValidationError is the validation error returned by
// DeleteUserInfoReq.Validate if the designated constraints aren't met.
type DeleteUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserInfoReqValidationError) ErrorName() string {
	return "DeleteUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserInfoReqValidationError{}

// Validate checks the field values on DeleteUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserInfoRespMultiError, or nil if none found.
func (m *DeleteUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserInfoRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserInfoRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return DeleteUserInfoRespMultiError(errors)
	}

	return nil
}

// DeleteUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by DeleteUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserInfoRespMultiError) AllErrors() []error { return m }

// DeleteUserInfoRespValidationError is the validation error returned by
// DeleteUserInfoResp.Validate if the designated constraints aren't met.
type DeleteUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserInfoRespValidationError) ErrorName() string {
	return "DeleteUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserInfoRespValidationError{}

// Validate checks the field values on AgentInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentInfoMultiError, or nil
// if none found.
func (m *AgentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for AuthoritySet

	// no validation rules for AreaType

	// no validation rules for PrimaryId

	// no validation rules for Name

	// no validation rules for WallpaperId

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for EffectiveDate

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for Email

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ModifyTime

	// no validation rules for PrimarySharePercent

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	// no validation rules for RegionCode

	if len(errors) > 0 {
		return AgentInfoMultiError(errors)
	}

	return nil
}

// AgentInfoMultiError is an error wrapping multiple validation errors returned
// by AgentInfo.ValidateAll() if the designated constraints aren't met.
type AgentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentInfoMultiError) AllErrors() []error { return m }

// AgentInfoValidationError is the validation error returned by
// AgentInfo.Validate if the designated constraints aren't met.
type AgentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentInfoValidationError) ErrorName() string { return "AgentInfoValidationError" }

// Error satisfies the builtin error interface
func (e AgentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentInfoValidationError{}

// Validate checks the field values on GetAgentInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentInfoReqMultiError, or nil if none found.
func (m *GetAgentInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for AgentId

	if len(errors) > 0 {
		return GetAgentInfoReqMultiError(errors)
	}

	return nil
}

// GetAgentInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetAgentInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetAgentInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentInfoReqMultiError) AllErrors() []error { return m }

// GetAgentInfoReqValidationError is the validation error returned by
// GetAgentInfoReq.Validate if the designated constraints aren't met.
type GetAgentInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentInfoReqValidationError) ErrorName() string { return "GetAgentInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentInfoReqValidationError{}

// Validate checks the field values on GetAgentInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentInfoRespMultiError, or nil if none found.
func (m *GetAgentInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgentInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAgentInfoRespValidationError{
				field:  "AgentInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetAgentInfoRespMultiError(errors)
	}

	return nil
}

// GetAgentInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetAgentInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetAgentInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentInfoRespMultiError) AllErrors() []error { return m }

// GetAgentInfoRespValidationError is the validation error returned by
// GetAgentInfoResp.Validate if the designated constraints aren't met.
type GetAgentInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentInfoRespValidationError) ErrorName() string { return "GetAgentInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentInfoRespValidationError{}

// Validate checks the field values on GetAgentInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentInfoListReqMultiError, or nil if none found.
func (m *GetAgentInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Conditions

	// no validation rules for Sorts

	// no validation rules for Orders

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAgentInfoListReqMultiError(errors)
	}

	return nil
}

// GetAgentInfoListReqMultiError is an error wrapping multiple validation
// errors returned by GetAgentInfoListReq.ValidateAll() if the designated
// constraints aren't met.
type GetAgentInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentInfoListReqMultiError) AllErrors() []error { return m }

// GetAgentInfoListReqValidationError is the validation error returned by
// GetAgentInfoListReq.Validate if the designated constraints aren't met.
type GetAgentInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentInfoListReqValidationError) ErrorName() string {
	return "GetAgentInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentInfoListReqValidationError{}

// Validate checks the field values on GetAgentInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentInfoListRespMultiError, or nil if none found.
func (m *GetAgentInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAgentInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAgentInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAgentInfoListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetAgentInfoListRespMultiError(errors)
	}

	return nil
}

// GetAgentInfoListRespMultiError is an error wrapping multiple validation
// errors returned by GetAgentInfoListResp.ValidateAll() if the designated
// constraints aren't met.
type GetAgentInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentInfoListRespMultiError) AllErrors() []error { return m }

// GetAgentInfoListRespValidationError is the validation error returned by
// GetAgentInfoListResp.Validate if the designated constraints aren't met.
type GetAgentInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentInfoListRespValidationError) ErrorName() string {
	return "GetAgentInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentInfoListRespValidationError{}

// Validate checks the field values on CreateAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentInfoReqMultiError, or nil if none found.
func (m *CreateAgentInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for AgentId

	// no validation rules for AuthoritySet

	// no validation rules for AreaType

	// no validation rules for PrimaryId

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for CreateBy

	// no validation rules for Remark

	// no validation rules for Email

	// no validation rules for PrimarySharePercent

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	// no validation rules for RegionCode

	if len(errors) > 0 {
		return CreateAgentInfoReqMultiError(errors)
	}

	return nil
}

// CreateAgentInfoReqMultiError is an error wrapping multiple validation errors
// returned by CreateAgentInfoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAgentInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentInfoReqMultiError) AllErrors() []error { return m }

// CreateAgentInfoReqValidationError is the validation error returned by
// CreateAgentInfoReq.Validate if the designated constraints aren't met.
type CreateAgentInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentInfoReqValidationError) ErrorName() string {
	return "CreateAgentInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentInfoReqValidationError{}

// Validate checks the field values on CreateAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentInfoRespMultiError, or nil if none found.
func (m *CreateAgentInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgentInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAgentInfoRespValidationError{
				field:  "AgentInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return CreateAgentInfoRespMultiError(errors)
	}

	return nil
}

// CreateAgentInfoRespMultiError is an error wrapping multiple validation
// errors returned by CreateAgentInfoResp.ValidateAll() if the designated
// constraints aren't met.
type CreateAgentInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentInfoRespMultiError) AllErrors() []error { return m }

// CreateAgentInfoRespValidationError is the validation error returned by
// CreateAgentInfoResp.Validate if the designated constraints aren't met.
type CreateAgentInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentInfoRespValidationError) ErrorName() string {
	return "CreateAgentInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentInfoRespValidationError{}

// Validate checks the field values on UpdateAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentInfoReqMultiError, or nil if none found.
func (m *UpdateAgentInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for AgentId

	// no validation rules for AuthoritySet

	// no validation rules for AreaType

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for Email

	// no validation rules for PrimarySharePercent

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	if len(errors) > 0 {
		return UpdateAgentInfoReqMultiError(errors)
	}

	return nil
}

// UpdateAgentInfoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAgentInfoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAgentInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentInfoReqMultiError) AllErrors() []error { return m }

// UpdateAgentInfoReqValidationError is the validation error returned by
// UpdateAgentInfoReq.Validate if the designated constraints aren't met.
type UpdateAgentInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentInfoReqValidationError) ErrorName() string {
	return "UpdateAgentInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentInfoReqValidationError{}

// Validate checks the field values on UpdateAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentInfoRespMultiError, or nil if none found.
func (m *UpdateAgentInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgentInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAgentInfoRespValidationError{
				field:  "AgentInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return UpdateAgentInfoRespMultiError(errors)
	}

	return nil
}

// UpdateAgentInfoRespMultiError is an error wrapping multiple validation
// errors returned by UpdateAgentInfoResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateAgentInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentInfoRespMultiError) AllErrors() []error { return m }

// UpdateAgentInfoRespValidationError is the validation error returned by
// UpdateAgentInfoResp.Validate if the designated constraints aren't met.
type UpdateAgentInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentInfoRespValidationError) ErrorName() string {
	return "UpdateAgentInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentInfoRespValidationError{}

// Validate checks the field values on DeleteAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentInfoReqMultiError, or nil if none found.
func (m *DeleteAgentInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for AgentId

	if len(errors) > 0 {
		return DeleteAgentInfoReqMultiError(errors)
	}

	return nil
}

// DeleteAgentInfoReqMultiError is an error wrapping multiple validation errors
// returned by DeleteAgentInfoReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteAgentInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentInfoReqMultiError) AllErrors() []error { return m }

// DeleteAgentInfoReqValidationError is the validation error returned by
// DeleteAgentInfoReq.Validate if the designated constraints aren't met.
type DeleteAgentInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentInfoReqValidationError) ErrorName() string {
	return "DeleteAgentInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentInfoReqValidationError{}

// Validate checks the field values on DeleteAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentInfoRespMultiError, or nil if none found.
func (m *DeleteAgentInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgentInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAgentInfoRespValidationError{
					field:  "AgentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAgentInfoRespValidationError{
				field:  "AgentInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return DeleteAgentInfoRespMultiError(errors)
	}

	return nil
}

// DeleteAgentInfoRespMultiError is an error wrapping multiple validation
// errors returned by DeleteAgentInfoResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteAgentInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentInfoRespMultiError) AllErrors() []error { return m }

// DeleteAgentInfoRespValidationError is the validation error returned by
// DeleteAgentInfoResp.Validate if the designated constraints aren't met.
type DeleteAgentInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentInfoRespValidationError) ErrorName() string {
	return "DeleteAgentInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentInfoRespValidationError{}

// Validate checks the field values on PrimaryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrimaryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrimaryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrimaryInfoMultiError, or
// nil if none found.
func (m *PrimaryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PrimaryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrimaryId

	// no validation rules for AuthoritySet

	// no validation rules for Name

	// no validation rules for WallpaperId

	// no validation rules for TemplateId

	// no validation rules for TemplatePriority

	// no validation rules for TotalInstances

	// no validation rules for EffectiveDate

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for BelongId

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for State

	// no validation rules for Email

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ModifyTime

	// no validation rules for PlatformShareNum

	// no validation rules for PlatformShardModel

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	// no validation rules for RegionCode

	if len(errors) > 0 {
		return PrimaryInfoMultiError(errors)
	}

	return nil
}

// PrimaryInfoMultiError is an error wrapping multiple validation errors
// returned by PrimaryInfo.ValidateAll() if the designated constraints aren't met.
type PrimaryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrimaryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrimaryInfoMultiError) AllErrors() []error { return m }

// PrimaryInfoValidationError is the validation error returned by
// PrimaryInfo.Validate if the designated constraints aren't met.
type PrimaryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrimaryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrimaryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrimaryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrimaryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrimaryInfoValidationError) ErrorName() string { return "PrimaryInfoValidationError" }

// Error satisfies the builtin error interface
func (e PrimaryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrimaryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrimaryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrimaryInfoValidationError{}

// Validate checks the field values on GetPrimaryInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrimaryInfoListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrimaryInfoListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrimaryInfoListReqMultiError, or nil if none found.
func (m *GetPrimaryInfoListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrimaryInfoListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Conditions

	// no validation rules for Sorts

	// no validation rules for Orders

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetPrimaryInfoListReqMultiError(errors)
	}

	return nil
}

// GetPrimaryInfoListReqMultiError is an error wrapping multiple validation
// errors returned by GetPrimaryInfoListReq.ValidateAll() if the designated
// constraints aren't met.
type GetPrimaryInfoListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrimaryInfoListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrimaryInfoListReqMultiError) AllErrors() []error { return m }

// GetPrimaryInfoListReqValidationError is the validation error returned by
// GetPrimaryInfoListReq.Validate if the designated constraints aren't met.
type GetPrimaryInfoListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrimaryInfoListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrimaryInfoListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrimaryInfoListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrimaryInfoListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrimaryInfoListReqValidationError) ErrorName() string {
	return "GetPrimaryInfoListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrimaryInfoListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrimaryInfoListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrimaryInfoListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrimaryInfoListReqValidationError{}

// Validate checks the field values on GetPrimaryInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrimaryInfoListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrimaryInfoListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrimaryInfoListRespMultiError, or nil if none found.
func (m *GetPrimaryInfoListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrimaryInfoListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPrimaryInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPrimaryInfoListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPrimaryInfoListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPrimaryInfoListRespMultiError(errors)
	}

	return nil
}

// GetPrimaryInfoListRespMultiError is an error wrapping multiple validation
// errors returned by GetPrimaryInfoListResp.ValidateAll() if the designated
// constraints aren't met.
type GetPrimaryInfoListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrimaryInfoListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrimaryInfoListRespMultiError) AllErrors() []error { return m }

// GetPrimaryInfoListRespValidationError is the validation error returned by
// GetPrimaryInfoListResp.Validate if the designated constraints aren't met.
type GetPrimaryInfoListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrimaryInfoListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrimaryInfoListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrimaryInfoListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrimaryInfoListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrimaryInfoListRespValidationError) ErrorName() string {
	return "GetPrimaryInfoListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrimaryInfoListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrimaryInfoListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrimaryInfoListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrimaryInfoListRespValidationError{}

// Validate checks the field values on GetPrimaryInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPrimaryInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrimaryInfoReqMultiError, or nil if none found.
func (m *GetPrimaryInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrimaryInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for PrimaryId

	if len(errors) > 0 {
		return GetPrimaryInfoReqMultiError(errors)
	}

	return nil
}

// GetPrimaryInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetPrimaryInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetPrimaryInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrimaryInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrimaryInfoReqMultiError) AllErrors() []error { return m }

// GetPrimaryInfoReqValidationError is the validation error returned by
// GetPrimaryInfoReq.Validate if the designated constraints aren't met.
type GetPrimaryInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrimaryInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrimaryInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrimaryInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrimaryInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrimaryInfoReqValidationError) ErrorName() string {
	return "GetPrimaryInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrimaryInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrimaryInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrimaryInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrimaryInfoReqValidationError{}

// Validate checks the field values on GetPrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrimaryInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrimaryInfoRespMultiError, or nil if none found.
func (m *GetPrimaryInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrimaryInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrimaryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimaryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrimaryInfoRespValidationError{
				field:  "PrimaryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetPrimaryInfoRespMultiError(errors)
	}

	return nil
}

// GetPrimaryInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetPrimaryInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetPrimaryInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrimaryInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrimaryInfoRespMultiError) AllErrors() []error { return m }

// GetPrimaryInfoRespValidationError is the validation error returned by
// GetPrimaryInfoResp.Validate if the designated constraints aren't met.
type GetPrimaryInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrimaryInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrimaryInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrimaryInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrimaryInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrimaryInfoRespValidationError) ErrorName() string {
	return "GetPrimaryInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrimaryInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrimaryInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrimaryInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrimaryInfoRespValidationError{}

// Validate checks the field values on EditSpecInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditSpecInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditSpecInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditSpecInstanceMultiError, or nil if none found.
func (m *EditSpecInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *EditSpecInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OuterSpecId

	// no validation rules for TotalInstances

	if len(errors) > 0 {
		return EditSpecInstanceMultiError(errors)
	}

	return nil
}

// EditSpecInstanceMultiError is an error wrapping multiple validation errors
// returned by EditSpecInstance.ValidateAll() if the designated constraints
// aren't met.
type EditSpecInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditSpecInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditSpecInstanceMultiError) AllErrors() []error { return m }

// EditSpecInstanceValidationError is the validation error returned by
// EditSpecInstance.Validate if the designated constraints aren't met.
type EditSpecInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditSpecInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditSpecInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditSpecInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditSpecInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditSpecInstanceValidationError) ErrorName() string { return "EditSpecInstanceValidationError" }

// Error satisfies the builtin error interface
func (e EditSpecInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditSpecInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditSpecInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditSpecInstanceValidationError{}

// Validate checks the field values on UpdatePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePrimaryInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePrimaryInfoReqMultiError, or nil if none found.
func (m *UpdatePrimaryInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePrimaryInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for PrimaryId

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for TotalInstances

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for Remark

	// no validation rules for AuthoritySet

	// no validation rules for Email

	// no validation rules for BelongId

	// no validation rules for TemplatePriority

	for idx, item := range m.GetSpecInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePrimaryInfoReqValidationError{
						field:  fmt.Sprintf("SpecInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePrimaryInfoReqValidationError{
						field:  fmt.Sprintf("SpecInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePrimaryInfoReqValidationError{
					field:  fmt.Sprintf("SpecInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateBy

	// no validation rules for State

	// no validation rules for PlatformShareNum

	// no validation rules for PlatformShardModel

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	if len(errors) > 0 {
		return UpdatePrimaryInfoReqMultiError(errors)
	}

	return nil
}

// UpdatePrimaryInfoReqMultiError is an error wrapping multiple validation
// errors returned by UpdatePrimaryInfoReq.ValidateAll() if the designated
// constraints aren't met.
type UpdatePrimaryInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePrimaryInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePrimaryInfoReqMultiError) AllErrors() []error { return m }

// UpdatePrimaryInfoReqValidationError is the validation error returned by
// UpdatePrimaryInfoReq.Validate if the designated constraints aren't met.
type UpdatePrimaryInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrimaryInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrimaryInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrimaryInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrimaryInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrimaryInfoReqValidationError) ErrorName() string {
	return "UpdatePrimaryInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrimaryInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrimaryInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrimaryInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrimaryInfoReqValidationError{}

// Validate checks the field values on UpdatePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePrimaryInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePrimaryInfoRespMultiError, or nil if none found.
func (m *UpdatePrimaryInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePrimaryInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrimaryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimaryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePrimaryInfoRespValidationError{
				field:  "PrimaryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return UpdatePrimaryInfoRespMultiError(errors)
	}

	return nil
}

// UpdatePrimaryInfoRespMultiError is an error wrapping multiple validation
// errors returned by UpdatePrimaryInfoResp.ValidateAll() if the designated
// constraints aren't met.
type UpdatePrimaryInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePrimaryInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePrimaryInfoRespMultiError) AllErrors() []error { return m }

// UpdatePrimaryInfoRespValidationError is the validation error returned by
// UpdatePrimaryInfoResp.Validate if the designated constraints aren't met.
type UpdatePrimaryInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrimaryInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrimaryInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrimaryInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrimaryInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrimaryInfoRespValidationError) ErrorName() string {
	return "UpdatePrimaryInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrimaryInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrimaryInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrimaryInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrimaryInfoRespValidationError{}

// Validate checks the field values on CreatePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePrimaryInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePrimaryInfoReqMultiError, or nil if none found.
func (m *CreatePrimaryInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePrimaryInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for TotalInstances

	// no validation rules for ExpectedEffectiveDate

	// no validation rules for Remark

	// no validation rules for AuthoritySet

	// no validation rules for Email

	// no validation rules for BelongId

	// no validation rules for TemplatePriority

	for idx, item := range m.GetSpecInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePrimaryInfoReqValidationError{
						field:  fmt.Sprintf("SpecInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePrimaryInfoReqValidationError{
						field:  fmt.Sprintf("SpecInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePrimaryInfoReqValidationError{
					field:  fmt.Sprintf("SpecInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateBy

	// no validation rules for PlatformShareNum

	// no validation rules for PlatformShardModel

	// no validation rules for BulletinBoardAuthorities

	// no validation rules for Tag

	// no validation rules for RegionCode

	if len(errors) > 0 {
		return CreatePrimaryInfoReqMultiError(errors)
	}

	return nil
}

// CreatePrimaryInfoReqMultiError is an error wrapping multiple validation
// errors returned by CreatePrimaryInfoReq.ValidateAll() if the designated
// constraints aren't met.
type CreatePrimaryInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePrimaryInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePrimaryInfoReqMultiError) AllErrors() []error { return m }

// CreatePrimaryInfoReqValidationError is the validation error returned by
// CreatePrimaryInfoReq.Validate if the designated constraints aren't met.
type CreatePrimaryInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePrimaryInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePrimaryInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePrimaryInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePrimaryInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePrimaryInfoReqValidationError) ErrorName() string {
	return "CreatePrimaryInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePrimaryInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePrimaryInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePrimaryInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePrimaryInfoReqValidationError{}

// Validate checks the field values on CreatePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePrimaryInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePrimaryInfoRespMultiError, or nil if none found.
func (m *CreatePrimaryInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePrimaryInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrimaryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimaryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePrimaryInfoRespValidationError{
				field:  "PrimaryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return CreatePrimaryInfoRespMultiError(errors)
	}

	return nil
}

// CreatePrimaryInfoRespMultiError is an error wrapping multiple validation
// errors returned by CreatePrimaryInfoResp.ValidateAll() if the designated
// constraints aren't met.
type CreatePrimaryInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePrimaryInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePrimaryInfoRespMultiError) AllErrors() []error { return m }

// CreatePrimaryInfoRespValidationError is the validation error returned by
// CreatePrimaryInfoResp.Validate if the designated constraints aren't met.
type CreatePrimaryInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePrimaryInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePrimaryInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePrimaryInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePrimaryInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePrimaryInfoRespValidationError) ErrorName() string {
	return "CreatePrimaryInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePrimaryInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePrimaryInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePrimaryInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePrimaryInfoRespValidationError{}

// Validate checks the field values on DeletePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePrimaryInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePrimaryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePrimaryInfoReqMultiError, or nil if none found.
func (m *DeletePrimaryInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePrimaryInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for PrimaryId

	if len(errors) > 0 {
		return DeletePrimaryInfoReqMultiError(errors)
	}

	return nil
}

// DeletePrimaryInfoReqMultiError is an error wrapping multiple validation
// errors returned by DeletePrimaryInfoReq.ValidateAll() if the designated
// constraints aren't met.
type DeletePrimaryInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePrimaryInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePrimaryInfoReqMultiError) AllErrors() []error { return m }

// DeletePrimaryInfoReqValidationError is the validation error returned by
// DeletePrimaryInfoReq.Validate if the designated constraints aren't met.
type DeletePrimaryInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePrimaryInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePrimaryInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePrimaryInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePrimaryInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePrimaryInfoReqValidationError) ErrorName() string {
	return "DeletePrimaryInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePrimaryInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePrimaryInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePrimaryInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePrimaryInfoReqValidationError{}

// Validate checks the field values on DeletePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePrimaryInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePrimaryInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePrimaryInfoRespMultiError, or nil if none found.
func (m *DeletePrimaryInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePrimaryInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrimaryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePrimaryInfoRespValidationError{
					field:  "PrimaryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimaryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePrimaryInfoRespValidationError{
				field:  "PrimaryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return DeletePrimaryInfoRespMultiError(errors)
	}

	return nil
}

// DeletePrimaryInfoRespMultiError is an error wrapping multiple validation
// errors returned by DeletePrimaryInfoResp.ValidateAll() if the designated
// constraints aren't met.
type DeletePrimaryInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePrimaryInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePrimaryInfoRespMultiError) AllErrors() []error { return m }

// DeletePrimaryInfoRespValidationError is the validation error returned by
// DeletePrimaryInfoResp.Validate if the designated constraints aren't met.
type DeletePrimaryInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePrimaryInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePrimaryInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePrimaryInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePrimaryInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePrimaryInfoRespValidationError) ErrorName() string {
	return "DeletePrimaryInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePrimaryInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePrimaryInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePrimaryInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePrimaryInfoRespValidationError{}
