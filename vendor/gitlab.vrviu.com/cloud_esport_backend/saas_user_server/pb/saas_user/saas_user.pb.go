// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: saas_user.proto

package saas_user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthoritySet          string `protobuf:"bytes,2,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Type                  int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	AreaType              int64  `protobuf:"varint,4,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	SetId                 int64  `protobuf:"varint,5,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	PrimaryId             int64  `protobuf:"varint,6,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	AgentId               int64  `protobuf:"varint,7,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BizId                 int64  `protobuf:"varint,8,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	UserName              string `protobuf:"bytes,9,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	WallpaperId           int64  `protobuf:"varint,10,opt,name=wallpaper_id,json=wallpaperId,proto3" json:"wallpaper_id,omitempty"`
	TemplateId            int64  `protobuf:"varint,11,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority      int64  `protobuf:"varint,12,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances        int64  `protobuf:"varint,13,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	EffectiveDate         string `protobuf:"bytes,14,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpectedEffectiveDate string `protobuf:"bytes,15,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	Email                 string `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	AccessKey             string `protobuf:"bytes,17,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret          string `protobuf:"bytes,18,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	EnableQualityReport   int32  `protobuf:"varint,19,opt,name=enable_quality_report,json=enableQualityReport,proto3" json:"enable_quality_report,omitempty"`
	UpgradeGreyType       int32  `protobuf:"varint,20,opt,name=upgrade_grey_type,json=upgradeGreyType,proto3" json:"upgrade_grey_type,omitempty"`
	Domain                string `protobuf:"bytes,21,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateBy              string `protobuf:"bytes,22,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy              string `protobuf:"bytes,23,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                string `protobuf:"bytes,24,opt,name=remark,proto3" json:"remark,omitempty"`
	State                 int32  `protobuf:"varint,25,opt,name=state,proto3" json:"state,omitempty"`
	CreateTime            string `protobuf:"bytes,26,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime            string `protobuf:"bytes,27,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime            string `protobuf:"bytes,28,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	VlanId                int64  `protobuf:"varint,29,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ShopMode              int32  `protobuf:"varint,30,opt,name=shop_mode,json=shopMode,proto3" json:"shop_mode,omitempty"`
	AgentSharePercent     int32  `protobuf:"varint,31,opt,name=agent_share_percent,json=agentSharePercent,proto3" json:"agent_share_percent,omitempty"`
	Tag                   int32  `protobuf:"varint,32,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *UserInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserInfo) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *UserInfo) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *UserInfo) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *UserInfo) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *UserInfo) GetBizId() int64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetWallpaperId() int64 {
	if x != nil {
		return x.WallpaperId
	}
	return 0
}

func (x *UserInfo) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *UserInfo) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *UserInfo) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *UserInfo) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UserInfo) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *UserInfo) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *UserInfo) GetEnableQualityReport() int32 {
	if x != nil {
		return x.EnableQualityReport
	}
	return 0
}

func (x *UserInfo) GetUpgradeGreyType() int32 {
	if x != nil {
		return x.UpgradeGreyType
	}
	return 0
}

func (x *UserInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UserInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UserInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UserInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UserInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *UserInfo) GetVlanId() int64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *UserInfo) GetShopMode() int32 {
	if x != nil {
		return x.ShopMode
	}
	return 0
}

func (x *UserInfo) GetAgentSharePercent() int32 {
	if x != nil {
		return x.AgentSharePercent
	}
	return 0
}

func (x *UserInfo) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type GetUserInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Conditions string `protobuf:"bytes,2,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Sorts      string `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders     string `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Offset     int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetUserInfoListReq) Reset() {
	*x = GetUserInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoListReq) ProtoMessage() {}

func (x *GetUserInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoListReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoListReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserInfoListReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetUserInfoListReq) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *GetUserInfoListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *GetUserInfoListReq) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

func (x *GetUserInfoListReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserInfoListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetUserInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List      []*UserInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	ErrorCode int64       `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string      `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *GetUserInfoListResp) Reset() {
	*x = GetUserInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoListResp) ProtoMessage() {}

func (x *GetUserInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoListResp.ProtoReflect.Descriptor instead.
func (*GetUserInfoListResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserInfoListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUserInfoListResp) GetList() []*UserInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserInfoListResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetUserInfoListResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type GetUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserInfoReq) Reset() {
	*x = GetUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReq) ProtoMessage() {}

func (x *GetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ErrorCode int64     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *GetUserInfoResp) Reset() {
	*x = GetUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResp) ProtoMessage() {}

func (x *GetUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResp.ProtoReflect.Descriptor instead.
func (*GetUserInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserInfoResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetUserInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetUserInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId             string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId                int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthoritySet          string `protobuf:"bytes,3,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Type                  int64  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AreaType              int64  `protobuf:"varint,5,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	SetId                 int64  `protobuf:"varint,6,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	PrimaryId             int64  `protobuf:"varint,7,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	AgentId               int64  `protobuf:"varint,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BizId                 int64  `protobuf:"varint,9,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	UserName              string `protobuf:"bytes,10,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	WallpaperId           int64  `protobuf:"varint,11,opt,name=wallpaper_id,json=wallpaperId,proto3" json:"wallpaper_id,omitempty"`
	TemplateId            int64  `protobuf:"varint,12,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority      int64  `protobuf:"varint,13,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances        int64  `protobuf:"varint,14,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	EffectiveDate         string `protobuf:"bytes,15,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpectedEffectiveDate string `protobuf:"bytes,16,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	Email                 string `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	AccessKey             string `protobuf:"bytes,18,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret          string `protobuf:"bytes,19,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	EnableQualityReport   int32  `protobuf:"varint,20,opt,name=enable_quality_report,json=enableQualityReport,proto3" json:"enable_quality_report,omitempty"`
	UpgradeGreyType       int32  `protobuf:"varint,21,opt,name=upgrade_grey_type,json=upgradeGreyType,proto3" json:"upgrade_grey_type,omitempty"`
	Domain                string `protobuf:"bytes,22,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateBy              string `protobuf:"bytes,23,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy              string `protobuf:"bytes,24,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                string `protobuf:"bytes,25,opt,name=remark,proto3" json:"remark,omitempty"`
	State                 int32  `protobuf:"varint,26,opt,name=state,proto3" json:"state,omitempty"`
	CreateTime            string `protobuf:"bytes,27,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime            string `protobuf:"bytes,28,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime            string `protobuf:"bytes,29,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	VlanId                int64  `protobuf:"varint,30,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ShopMode              int32  `protobuf:"varint,31,opt,name=shop_mode,json=shopMode,proto3" json:"shop_mode,omitempty"`
	AgentSharePercent     uint64 `protobuf:"varint,32,opt,name=agent_share_percent,json=agentSharePercent,proto3" json:"agent_share_percent,omitempty"`
	Tag                   int32  `protobuf:"varint,33,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *UpdateUserInfoReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateUserInfoReq) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *UpdateUserInfoReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetBizId() int64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateUserInfoReq) GetWallpaperId() int64 {
	if x != nil {
		return x.WallpaperId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *UpdateUserInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *UpdateUserInfoReq) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *UpdateUserInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *UpdateUserInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *UpdateUserInfoReq) GetEnableQualityReport() int32 {
	if x != nil {
		return x.EnableQualityReport
	}
	return 0
}

func (x *UpdateUserInfoReq) GetUpgradeGreyType() int32 {
	if x != nil {
		return x.UpgradeGreyType
	}
	return 0
}

func (x *UpdateUserInfoReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateUserInfoReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UpdateUserInfoReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdateUserInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateUserInfoReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateUserInfoReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UpdateUserInfoReq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UpdateUserInfoReq) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *UpdateUserInfoReq) GetVlanId() int64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetShopMode() int32 {
	if x != nil {
		return x.ShopMode
	}
	return 0
}

func (x *UpdateUserInfoReq) GetAgentSharePercent() uint64 {
	if x != nil {
		return x.AgentSharePercent
	}
	return 0
}

func (x *UpdateUserInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type UpdateUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ErrorCode int64     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserInfoResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UpdateUserInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateUserInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type CreateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId             string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId                int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthoritySet          string `protobuf:"bytes,3,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Type                  int64  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AreaType              int64  `protobuf:"varint,5,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	SetId                 int64  `protobuf:"varint,6,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	PrimaryId             int64  `protobuf:"varint,7,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	AgentId               int64  `protobuf:"varint,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BizId                 int64  `protobuf:"varint,9,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	UserName              string `protobuf:"bytes,10,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	WallpaperId           int64  `protobuf:"varint,11,opt,name=wallpaper_id,json=wallpaperId,proto3" json:"wallpaper_id,omitempty"`
	TemplateId            int64  `protobuf:"varint,12,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority      int64  `protobuf:"varint,13,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances        int64  `protobuf:"varint,14,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	EffectiveDate         string `protobuf:"bytes,15,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpectedEffectiveDate string `protobuf:"bytes,16,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	Email                 string `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	AccessKey             string `protobuf:"bytes,18,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret          string `protobuf:"bytes,19,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	EnableQualityReport   int32  `protobuf:"varint,20,opt,name=enable_quality_report,json=enableQualityReport,proto3" json:"enable_quality_report,omitempty"`
	UpgradeGreyType       int32  `protobuf:"varint,21,opt,name=upgrade_grey_type,json=upgradeGreyType,proto3" json:"upgrade_grey_type,omitempty"`
	Domain                string `protobuf:"bytes,22,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateBy              string `protobuf:"bytes,23,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy              string `protobuf:"bytes,24,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                string `protobuf:"bytes,25,opt,name=remark,proto3" json:"remark,omitempty"`
	State                 int32  `protobuf:"varint,26,opt,name=state,proto3" json:"state,omitempty"`
	CreateTime            string `protobuf:"bytes,27,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime            string `protobuf:"bytes,28,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime            string `protobuf:"bytes,29,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	VlanId                int64  `protobuf:"varint,30,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ShopMode              int32  `protobuf:"varint,31,opt,name=shop_mode,json=shopMode,proto3" json:"shop_mode,omitempty"`
	AgentSharePercent     uint64 `protobuf:"varint,32,opt,name=agent_share_percent,json=agentSharePercent,proto3" json:"agent_share_percent,omitempty"`
	Tag                   int32  `protobuf:"varint,33,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *CreateUserInfoReq) Reset() {
	*x = CreateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInfoReq) ProtoMessage() {}

func (x *CreateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInfoReq.ProtoReflect.Descriptor instead.
func (*CreateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{9}
}

func (x *CreateUserInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateUserInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *CreateUserInfoReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateUserInfoReq) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *CreateUserInfoReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *CreateUserInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *CreateUserInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *CreateUserInfoReq) GetBizId() int64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *CreateUserInfoReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateUserInfoReq) GetWallpaperId() int64 {
	if x != nil {
		return x.WallpaperId
	}
	return 0
}

func (x *CreateUserInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CreateUserInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *CreateUserInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *CreateUserInfoReq) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *CreateUserInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *CreateUserInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserInfoReq) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CreateUserInfoReq) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *CreateUserInfoReq) GetEnableQualityReport() int32 {
	if x != nil {
		return x.EnableQualityReport
	}
	return 0
}

func (x *CreateUserInfoReq) GetUpgradeGreyType() int32 {
	if x != nil {
		return x.UpgradeGreyType
	}
	return 0
}

func (x *CreateUserInfoReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateUserInfoReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreateUserInfoReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *CreateUserInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateUserInfoReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CreateUserInfoReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CreateUserInfoReq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CreateUserInfoReq) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *CreateUserInfoReq) GetVlanId() int64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *CreateUserInfoReq) GetShopMode() int32 {
	if x != nil {
		return x.ShopMode
	}
	return 0
}

func (x *CreateUserInfoReq) GetAgentSharePercent() uint64 {
	if x != nil {
		return x.AgentSharePercent
	}
	return 0
}

func (x *CreateUserInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type CreateUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ErrorCode int64     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *CreateUserInfoResp) Reset() {
	*x = CreateUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInfoResp) ProtoMessage() {}

func (x *CreateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInfoResp.ProtoReflect.Descriptor instead.
func (*CreateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{10}
}

func (x *CreateUserInfoResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CreateUserInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateUserInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DeleteUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteUserInfoReq) Reset() {
	*x = DeleteUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInfoReq) ProtoMessage() {}

func (x *DeleteUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInfoReq.ProtoReflect.Descriptor instead.
func (*DeleteUserInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteUserInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeleteUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ErrorCode int64     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *DeleteUserInfoResp) Reset() {
	*x = DeleteUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserInfoResp) ProtoMessage() {}

func (x *DeleteUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserInfoResp.ProtoReflect.Descriptor instead.
func (*DeleteUserInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteUserInfoResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DeleteUserInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DeleteUserInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId                  int64  `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AuthoritySet             string `protobuf:"bytes,2,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	AreaType                 int64  `protobuf:"varint,3,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	PrimaryId                int64  `protobuf:"varint,4,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	Name                     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	WallpaperId              int64  `protobuf:"varint,6,opt,name=wallpaper_id,json=wallpaperId,proto3" json:"wallpaper_id,omitempty"`
	TemplateId               int64  `protobuf:"varint,7,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority         int64  `protobuf:"varint,8,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances           int64  `protobuf:"varint,9,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	EffectiveDate            string `protobuf:"bytes,10,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpectedEffectiveDate    string `protobuf:"bytes,11,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	CreateBy                 string `protobuf:"bytes,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy                 string `protobuf:"bytes,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                   string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	State                    int32  `protobuf:"varint,15,opt,name=state,proto3" json:"state,omitempty"`
	Email                    string `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime               string `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime               string `protobuf:"bytes,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime               string `protobuf:"bytes,19,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	PrimarySharePercent      uint64 `protobuf:"varint,20,opt,name=primary_share_percent,json=primarySharePercent,proto3" json:"primary_share_percent,omitempty"`
	BulletinBoardAuthorities int64  `protobuf:"varint,21,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32  `protobuf:"varint,22,opt,name=tag,proto3" json:"tag,omitempty"`
	RegionCode               string `protobuf:"bytes,23,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{13}
}

func (x *AgentInfo) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AgentInfo) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *AgentInfo) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *AgentInfo) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *AgentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentInfo) GetWallpaperId() int64 {
	if x != nil {
		return x.WallpaperId
	}
	return 0
}

func (x *AgentInfo) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *AgentInfo) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *AgentInfo) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *AgentInfo) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *AgentInfo) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *AgentInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AgentInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *AgentInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AgentInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *AgentInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AgentInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AgentInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AgentInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *AgentInfo) GetPrimarySharePercent() uint64 {
	if x != nil {
		return x.PrimarySharePercent
	}
	return 0
}

func (x *AgentInfo) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *AgentInfo) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *AgentInfo) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

type GetAgentInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId   int64  `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetAgentInfoReq) Reset() {
	*x = GetAgentInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentInfoReq) ProtoMessage() {}

func (x *GetAgentInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentInfoReq.ProtoReflect.Descriptor instead.
func (*GetAgentInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{14}
}

func (x *GetAgentInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetAgentInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetAgentInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo *AgentInfo `protobuf:"bytes,1,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
	ErrorCode int64      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *GetAgentInfoResp) Reset() {
	*x = GetAgentInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentInfoResp) ProtoMessage() {}

func (x *GetAgentInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentInfoResp.ProtoReflect.Descriptor instead.
func (*GetAgentInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{15}
}

func (x *GetAgentInfoResp) GetAgentInfo() *AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *GetAgentInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAgentInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type GetAgentInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Conditions string `protobuf:"bytes,2,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Sorts      string `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders     string `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Offset     int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAgentInfoListReq) Reset() {
	*x = GetAgentInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentInfoListReq) ProtoMessage() {}

func (x *GetAgentInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentInfoListReq.ProtoReflect.Descriptor instead.
func (*GetAgentInfoListReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetAgentInfoListReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetAgentInfoListReq) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *GetAgentInfoListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *GetAgentInfoListReq) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

func (x *GetAgentInfoListReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAgentInfoListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAgentInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List      []*AgentInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	ErrorCode int64        `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string       `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *GetAgentInfoListResp) Reset() {
	*x = GetAgentInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentInfoListResp) ProtoMessage() {}

func (x *GetAgentInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentInfoListResp.ProtoReflect.Descriptor instead.
func (*GetAgentInfoListResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{17}
}

func (x *GetAgentInfoListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAgentInfoListResp) GetList() []*AgentInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetAgentInfoListResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAgentInfoListResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type CreateAgentInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId                  int64  `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AuthoritySet             string `protobuf:"bytes,3,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	AreaType                 int64  `protobuf:"varint,4,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	PrimaryId                int64  `protobuf:"varint,5,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	Name                     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId               int64  `protobuf:"varint,7,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority         int64  `protobuf:"varint,8,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances           int64  `protobuf:"varint,9,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	ExpectedEffectiveDate    string `protobuf:"bytes,10,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	CreateBy                 string `protobuf:"bytes,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	Remark                   string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	Email                    string `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	PrimarySharePercent      uint64 `protobuf:"varint,14,opt,name=primary_share_percent,json=primarySharePercent,proto3" json:"primary_share_percent,omitempty"`
	BulletinBoardAuthorities int64  `protobuf:"varint,15,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32  `protobuf:"varint,16,opt,name=tag,proto3" json:"tag,omitempty"`
	RegionCode               string `protobuf:"bytes,17,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
}

func (x *CreateAgentInfoReq) Reset() {
	*x = CreateAgentInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentInfoReq) ProtoMessage() {}

func (x *CreateAgentInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentInfoReq.ProtoReflect.Descriptor instead.
func (*CreateAgentInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{18}
}

func (x *CreateAgentInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateAgentInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *CreateAgentInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *CreateAgentInfoReq) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *CreateAgentInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *CreateAgentInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAgentInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CreateAgentInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *CreateAgentInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *CreateAgentInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *CreateAgentInfoReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreateAgentInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateAgentInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateAgentInfoReq) GetPrimarySharePercent() uint64 {
	if x != nil {
		return x.PrimarySharePercent
	}
	return 0
}

func (x *CreateAgentInfoReq) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *CreateAgentInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *CreateAgentInfoReq) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

type CreateAgentInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo *AgentInfo `protobuf:"bytes,1,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
	ErrorCode int64      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *CreateAgentInfoResp) Reset() {
	*x = CreateAgentInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentInfoResp) ProtoMessage() {}

func (x *CreateAgentInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentInfoResp.ProtoReflect.Descriptor instead.
func (*CreateAgentInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{19}
}

func (x *CreateAgentInfoResp) GetAgentInfo() *AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *CreateAgentInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateAgentInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type UpdateAgentInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId                  int64  `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AuthoritySet             string `protobuf:"bytes,3,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	AreaType                 int64  `protobuf:"varint,4,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Name                     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId               int64  `protobuf:"varint,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority         int64  `protobuf:"varint,9,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances           int64  `protobuf:"varint,10,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	ExpectedEffectiveDate    string `protobuf:"bytes,12,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	UpdateBy                 string `protobuf:"bytes,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                   string `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
	State                    int32  `protobuf:"varint,16,opt,name=state,proto3" json:"state,omitempty"`
	Email                    string `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	PrimarySharePercent      uint64 `protobuf:"varint,18,opt,name=primary_share_percent,json=primarySharePercent,proto3" json:"primary_share_percent,omitempty"`
	BulletinBoardAuthorities int64  `protobuf:"varint,19,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32  `protobuf:"varint,20,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *UpdateAgentInfoReq) Reset() {
	*x = UpdateAgentInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentInfoReq) ProtoMessage() {}

func (x *UpdateAgentInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateAgentInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetAreaType() int64 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateAgentInfoReq) GetPrimarySharePercent() uint64 {
	if x != nil {
		return x.PrimarySharePercent
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *UpdateAgentInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type UpdateAgentInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo *AgentInfo `protobuf:"bytes,1,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
	ErrorCode int64      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *UpdateAgentInfoResp) Reset() {
	*x = UpdateAgentInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentInfoResp) ProtoMessage() {}

func (x *UpdateAgentInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateAgentInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateAgentInfoResp) GetAgentInfo() *AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *UpdateAgentInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateAgentInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DeleteAgentInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId   int64  `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *DeleteAgentInfoReq) Reset() {
	*x = DeleteAgentInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentInfoReq) ProtoMessage() {}

func (x *DeleteAgentInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentInfoReq.ProtoReflect.Descriptor instead.
func (*DeleteAgentInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAgentInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeleteAgentInfoReq) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type DeleteAgentInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentInfo *AgentInfo `protobuf:"bytes,1,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
	ErrorCode int64      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *DeleteAgentInfoResp) Reset() {
	*x = DeleteAgentInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentInfoResp) ProtoMessage() {}

func (x *DeleteAgentInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentInfoResp.ProtoReflect.Descriptor instead.
func (*DeleteAgentInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteAgentInfoResp) GetAgentInfo() *AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

func (x *DeleteAgentInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DeleteAgentInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type PrimaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryId                int64  `protobuf:"varint,1,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	AuthoritySet             string `protobuf:"bytes,2,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Name                     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	WallpaperId              int64  `protobuf:"varint,4,opt,name=wallpaper_id,json=wallpaperId,proto3" json:"wallpaper_id,omitempty"`
	TemplateId               int64  `protobuf:"varint,5,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplatePriority         int64  `protobuf:"varint,6,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	TotalInstances           int64  `protobuf:"varint,7,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	EffectiveDate            string `protobuf:"bytes,8,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpectedEffectiveDate    string `protobuf:"bytes,9,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	BelongId                 int64  `protobuf:"varint,10,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	CreateBy                 string `protobuf:"bytes,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy                 string `protobuf:"bytes,12,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark                   string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	State                    int32  `protobuf:"varint,14,opt,name=state,proto3" json:"state,omitempty"`
	Email                    string `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime               string `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime               string `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime               string `protobuf:"bytes,18,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	PlatformShareNum         uint64 `protobuf:"varint,19,opt,name=platform_share_num,json=platformShareNum,proto3" json:"platform_share_num,omitempty"`
	PlatformShardModel       int32  `protobuf:"varint,20,opt,name=platform_shard_model,json=platformShardModel,proto3" json:"platform_shard_model,omitempty"`
	BulletinBoardAuthorities int64  `protobuf:"varint,21,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32  `protobuf:"varint,22,opt,name=tag,proto3" json:"tag,omitempty"`
	RegionCode               string `protobuf:"bytes,23,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	AreaTypes                string `protobuf:"bytes,24,opt,name=area_types,json=areaTypes,proto3" json:"area_types,omitempty"`
}

func (x *PrimaryInfo) Reset() {
	*x = PrimaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryInfo) ProtoMessage() {}

func (x *PrimaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryInfo.ProtoReflect.Descriptor instead.
func (*PrimaryInfo) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{24}
}

func (x *PrimaryInfo) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *PrimaryInfo) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *PrimaryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrimaryInfo) GetWallpaperId() int64 {
	if x != nil {
		return x.WallpaperId
	}
	return 0
}

func (x *PrimaryInfo) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *PrimaryInfo) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *PrimaryInfo) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *PrimaryInfo) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *PrimaryInfo) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *PrimaryInfo) GetBelongId() int64 {
	if x != nil {
		return x.BelongId
	}
	return 0
}

func (x *PrimaryInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *PrimaryInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *PrimaryInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PrimaryInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PrimaryInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PrimaryInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PrimaryInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PrimaryInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *PrimaryInfo) GetPlatformShareNum() uint64 {
	if x != nil {
		return x.PlatformShareNum
	}
	return 0
}

func (x *PrimaryInfo) GetPlatformShardModel() int32 {
	if x != nil {
		return x.PlatformShardModel
	}
	return 0
}

func (x *PrimaryInfo) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *PrimaryInfo) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *PrimaryInfo) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *PrimaryInfo) GetAreaTypes() string {
	if x != nil {
		return x.AreaTypes
	}
	return ""
}

type GetPrimaryInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Conditions string `protobuf:"bytes,2,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Sorts      string `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders     string `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Offset     int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetPrimaryInfoListReq) Reset() {
	*x = GetPrimaryInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrimaryInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrimaryInfoListReq) ProtoMessage() {}

func (x *GetPrimaryInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrimaryInfoListReq.ProtoReflect.Descriptor instead.
func (*GetPrimaryInfoListReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{25}
}

func (x *GetPrimaryInfoListReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetPrimaryInfoListReq) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *GetPrimaryInfoListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *GetPrimaryInfoListReq) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

func (x *GetPrimaryInfoListReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPrimaryInfoListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPrimaryInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*PrimaryInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetPrimaryInfoListResp) Reset() {
	*x = GetPrimaryInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrimaryInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrimaryInfoListResp) ProtoMessage() {}

func (x *GetPrimaryInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrimaryInfoListResp.ProtoReflect.Descriptor instead.
func (*GetPrimaryInfoListResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{26}
}

func (x *GetPrimaryInfoListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPrimaryInfoListResp) GetList() []*PrimaryInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type GetPrimaryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PrimaryId int64  `protobuf:"varint,2,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
}

func (x *GetPrimaryInfoReq) Reset() {
	*x = GetPrimaryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrimaryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrimaryInfoReq) ProtoMessage() {}

func (x *GetPrimaryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrimaryInfoReq.ProtoReflect.Descriptor instead.
func (*GetPrimaryInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{27}
}

func (x *GetPrimaryInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetPrimaryInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

type GetPrimaryInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryInfo *PrimaryInfo `protobuf:"bytes,1,opt,name=primary_info,json=primaryInfo,proto3" json:"primary_info,omitempty"`
	ErrorCode   int64        `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg    string       `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *GetPrimaryInfoResp) Reset() {
	*x = GetPrimaryInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrimaryInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrimaryInfoResp) ProtoMessage() {}

func (x *GetPrimaryInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrimaryInfoResp.ProtoReflect.Descriptor instead.
func (*GetPrimaryInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{28}
}

func (x *GetPrimaryInfoResp) GetPrimaryInfo() *PrimaryInfo {
	if x != nil {
		return x.PrimaryInfo
	}
	return nil
}

func (x *GetPrimaryInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetPrimaryInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type EditSpecInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuterSpecId    int64 `protobuf:"varint,1,opt,name=outer_spec_id,json=outerSpecId,proto3" json:"outer_spec_id,omitempty"`
	TotalInstances int64 `protobuf:"varint,2,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
}

func (x *EditSpecInstance) Reset() {
	*x = EditSpecInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditSpecInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditSpecInstance) ProtoMessage() {}

func (x *EditSpecInstance) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditSpecInstance.ProtoReflect.Descriptor instead.
func (*EditSpecInstance) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{29}
}

func (x *EditSpecInstance) GetOuterSpecId() int64 {
	if x != nil {
		return x.OuterSpecId
	}
	return 0
}

func (x *EditSpecInstance) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

type UpdatePrimaryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PrimaryId                int64               `protobuf:"varint,2,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	Name                     string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId               int64               `protobuf:"varint,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TotalInstances           int64               `protobuf:"varint,5,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	ExpectedEffectiveDate    string              `protobuf:"bytes,6,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	Remark                   string              `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	AuthoritySet             string              `protobuf:"bytes,8,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Email                    string              `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	BelongId                 int64               `protobuf:"varint,10,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	TemplatePriority         int64               `protobuf:"varint,11,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	SpecInstances            []*EditSpecInstance `protobuf:"bytes,12,rep,name=spec_instances,json=specInstances,proto3" json:"spec_instances,omitempty"`
	UpdateBy                 string              `protobuf:"bytes,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	State                    int32               `protobuf:"varint,14,opt,name=state,proto3" json:"state,omitempty"`
	PlatformShareNum         uint64              `protobuf:"varint,15,opt,name=platform_share_num,json=platformShareNum,proto3" json:"platform_share_num,omitempty"`
	PlatformShardModel       int32               `protobuf:"varint,16,opt,name=platform_shard_model,json=platformShardModel,proto3" json:"platform_shard_model,omitempty"`
	BulletinBoardAuthorities int64               `protobuf:"varint,17,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32               `protobuf:"varint,18,opt,name=tag,proto3" json:"tag,omitempty"`
	AreaTypes                *string             `protobuf:"bytes,19,opt,name=area_types,json=areaTypes,proto3,oneof" json:"area_types,omitempty"`
}

func (x *UpdatePrimaryInfoReq) Reset() {
	*x = UpdatePrimaryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrimaryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrimaryInfoReq) ProtoMessage() {}

func (x *UpdatePrimaryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrimaryInfoReq.ProtoReflect.Descriptor instead.
func (*UpdatePrimaryInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{30}
}

func (x *UpdatePrimaryInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetBelongId() int64 {
	if x != nil {
		return x.BelongId
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetSpecInstances() []*EditSpecInstance {
	if x != nil {
		return x.SpecInstances
	}
	return nil
}

func (x *UpdatePrimaryInfoReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdatePrimaryInfoReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetPlatformShareNum() uint64 {
	if x != nil {
		return x.PlatformShareNum
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetPlatformShardModel() int32 {
	if x != nil {
		return x.PlatformShardModel
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *UpdatePrimaryInfoReq) GetAreaTypes() string {
	if x != nil && x.AreaTypes != nil {
		return *x.AreaTypes
	}
	return ""
}

type UpdatePrimaryInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryInfo *PrimaryInfo `protobuf:"bytes,1,opt,name=primary_info,json=primaryInfo,proto3" json:"primary_info,omitempty"`
	ErrorCode   int64        `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg    string       `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *UpdatePrimaryInfoResp) Reset() {
	*x = UpdatePrimaryInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrimaryInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrimaryInfoResp) ProtoMessage() {}

func (x *UpdatePrimaryInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrimaryInfoResp.ProtoReflect.Descriptor instead.
func (*UpdatePrimaryInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{31}
}

func (x *UpdatePrimaryInfoResp) GetPrimaryInfo() *PrimaryInfo {
	if x != nil {
		return x.PrimaryInfo
	}
	return nil
}

func (x *UpdatePrimaryInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdatePrimaryInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type CreatePrimaryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name                     string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId               int64               `protobuf:"varint,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TotalInstances           int64               `protobuf:"varint,4,opt,name=total_instances,json=totalInstances,proto3" json:"total_instances,omitempty"`
	ExpectedEffectiveDate    string              `protobuf:"bytes,5,opt,name=expected_effective_date,json=expectedEffectiveDate,proto3" json:"expected_effective_date,omitempty"`
	Remark                   string              `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	AuthoritySet             string              `protobuf:"bytes,7,opt,name=authority_set,json=authoritySet,proto3" json:"authority_set,omitempty"`
	Email                    string              `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	BelongId                 int64               `protobuf:"varint,9,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	TemplatePriority         int64               `protobuf:"varint,10,opt,name=template_priority,json=templatePriority,proto3" json:"template_priority,omitempty"`
	SpecInstances            []*EditSpecInstance `protobuf:"bytes,11,rep,name=spec_instances,json=specInstances,proto3" json:"spec_instances,omitempty"`
	CreateBy                 string              `protobuf:"bytes,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	PlatformShareNum         uint64              `protobuf:"varint,13,opt,name=platform_share_num,json=platformShareNum,proto3" json:"platform_share_num,omitempty"`
	PlatformShardModel       int32               `protobuf:"varint,14,opt,name=platform_shard_model,json=platformShardModel,proto3" json:"platform_shard_model,omitempty"`
	BulletinBoardAuthorities int64               `protobuf:"varint,15,opt,name=bulletin_board_authorities,json=bulletinBoardAuthorities,proto3" json:"bulletin_board_authorities,omitempty"`
	Tag                      int32               `protobuf:"varint,16,opt,name=tag,proto3" json:"tag,omitempty"`
	RegionCode               string              `protobuf:"bytes,17,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	AreaTypes                string              `protobuf:"bytes,18,opt,name=area_types,json=areaTypes,proto3" json:"area_types,omitempty"`
}

func (x *CreatePrimaryInfoReq) Reset() {
	*x = CreatePrimaryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrimaryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrimaryInfoReq) ProtoMessage() {}

func (x *CreatePrimaryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrimaryInfoReq.ProtoReflect.Descriptor instead.
func (*CreatePrimaryInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{32}
}

func (x *CreatePrimaryInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetTotalInstances() int64 {
	if x != nil {
		return x.TotalInstances
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetExpectedEffectiveDate() string {
	if x != nil {
		return x.ExpectedEffectiveDate
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetAuthoritySet() string {
	if x != nil {
		return x.AuthoritySet
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetBelongId() int64 {
	if x != nil {
		return x.BelongId
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetTemplatePriority() int64 {
	if x != nil {
		return x.TemplatePriority
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetSpecInstances() []*EditSpecInstance {
	if x != nil {
		return x.SpecInstances
	}
	return nil
}

func (x *CreatePrimaryInfoReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetPlatformShareNum() uint64 {
	if x != nil {
		return x.PlatformShareNum
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetPlatformShardModel() int32 {
	if x != nil {
		return x.PlatformShardModel
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetBulletinBoardAuthorities() int64 {
	if x != nil {
		return x.BulletinBoardAuthorities
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *CreatePrimaryInfoReq) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *CreatePrimaryInfoReq) GetAreaTypes() string {
	if x != nil {
		return x.AreaTypes
	}
	return ""
}

type CreatePrimaryInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryInfo *PrimaryInfo `protobuf:"bytes,1,opt,name=primary_info,json=primaryInfo,proto3" json:"primary_info,omitempty"`
	ErrorCode   int64        `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg    string       `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *CreatePrimaryInfoResp) Reset() {
	*x = CreatePrimaryInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrimaryInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrimaryInfoResp) ProtoMessage() {}

func (x *CreatePrimaryInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrimaryInfoResp.ProtoReflect.Descriptor instead.
func (*CreatePrimaryInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{33}
}

func (x *CreatePrimaryInfoResp) GetPrimaryInfo() *PrimaryInfo {
	if x != nil {
		return x.PrimaryInfo
	}
	return nil
}

func (x *CreatePrimaryInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreatePrimaryInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DeletePrimaryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PrimaryId int64  `protobuf:"varint,2,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
}

func (x *DeletePrimaryInfoReq) Reset() {
	*x = DeletePrimaryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrimaryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrimaryInfoReq) ProtoMessage() {}

func (x *DeletePrimaryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrimaryInfoReq.ProtoReflect.Descriptor instead.
func (*DeletePrimaryInfoReq) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{34}
}

func (x *DeletePrimaryInfoReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeletePrimaryInfoReq) GetPrimaryId() int64 {
	if x != nil {
		return x.PrimaryId
	}
	return 0
}

type DeletePrimaryInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryInfo *PrimaryInfo `protobuf:"bytes,1,opt,name=primary_info,json=primaryInfo,proto3" json:"primary_info,omitempty"`
	ErrorCode   int64        `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg    string       `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *DeletePrimaryInfoResp) Reset() {
	*x = DeletePrimaryInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrimaryInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrimaryInfoResp) ProtoMessage() {}

func (x *DeletePrimaryInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_saas_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrimaryInfoResp.ProtoReflect.Descriptor instead.
func (*DeletePrimaryInfoResp) Descriptor() ([]byte, []int) {
	return file_saas_user_proto_rawDescGZIP(), []int{35}
}

func (x *DeletePrimaryInfoResp) GetPrimaryInfo() *PrimaryInfo {
	if x != nil {
		return x.PrimaryInfo
	}
	return nil
}

func (x *DeletePrimaryInfoResp) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DeletePrimaryInfoResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

var File_saas_user_proto protoreflect.FileDescriptor

var file_saas_user_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x8c, 0x08, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67,
	0x72, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb4, 0x08, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb4, 0x08, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x67, 0x72, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x82, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x9a, 0x06, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xe2, 0x04, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb8, 0x04, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x4e,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xcc, 0x06, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x5f, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xe1, 0x05, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb9,
	0x05, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x54, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x32, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x92, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa2, 0x03, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc2, 0x03, 0x0a,
	0x0e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x73, 0x61, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_saas_user_proto_rawDescOnce sync.Once
	file_saas_user_proto_rawDescData = file_saas_user_proto_rawDesc
)

func file_saas_user_proto_rawDescGZIP() []byte {
	file_saas_user_proto_rawDescOnce.Do(func() {
		file_saas_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_saas_user_proto_rawDescData)
	})
	return file_saas_user_proto_rawDescData
}

var file_saas_user_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_saas_user_proto_goTypes = []any{
	(*Request)(nil),                // 0: saas_user.Request
	(*Response)(nil),               // 1: saas_user.Response
	(*UserInfo)(nil),               // 2: saas_user.UserInfo
	(*GetUserInfoListReq)(nil),     // 3: saas_user.GetUserInfoListReq
	(*GetUserInfoListResp)(nil),    // 4: saas_user.GetUserInfoListResp
	(*GetUserInfoReq)(nil),         // 5: saas_user.GetUserInfoReq
	(*GetUserInfoResp)(nil),        // 6: saas_user.GetUserInfoResp
	(*UpdateUserInfoReq)(nil),      // 7: saas_user.UpdateUserInfoReq
	(*UpdateUserInfoResp)(nil),     // 8: saas_user.UpdateUserInfoResp
	(*CreateUserInfoReq)(nil),      // 9: saas_user.CreateUserInfoReq
	(*CreateUserInfoResp)(nil),     // 10: saas_user.CreateUserInfoResp
	(*DeleteUserInfoReq)(nil),      // 11: saas_user.DeleteUserInfoReq
	(*DeleteUserInfoResp)(nil),     // 12: saas_user.DeleteUserInfoResp
	(*AgentInfo)(nil),              // 13: saas_user.AgentInfo
	(*GetAgentInfoReq)(nil),        // 14: saas_user.GetAgentInfoReq
	(*GetAgentInfoResp)(nil),       // 15: saas_user.GetAgentInfoResp
	(*GetAgentInfoListReq)(nil),    // 16: saas_user.GetAgentInfoListReq
	(*GetAgentInfoListResp)(nil),   // 17: saas_user.GetAgentInfoListResp
	(*CreateAgentInfoReq)(nil),     // 18: saas_user.CreateAgentInfoReq
	(*CreateAgentInfoResp)(nil),    // 19: saas_user.CreateAgentInfoResp
	(*UpdateAgentInfoReq)(nil),     // 20: saas_user.UpdateAgentInfoReq
	(*UpdateAgentInfoResp)(nil),    // 21: saas_user.UpdateAgentInfoResp
	(*DeleteAgentInfoReq)(nil),     // 22: saas_user.DeleteAgentInfoReq
	(*DeleteAgentInfoResp)(nil),    // 23: saas_user.DeleteAgentInfoResp
	(*PrimaryInfo)(nil),            // 24: saas_user.PrimaryInfo
	(*GetPrimaryInfoListReq)(nil),  // 25: saas_user.GetPrimaryInfoListReq
	(*GetPrimaryInfoListResp)(nil), // 26: saas_user.GetPrimaryInfoListResp
	(*GetPrimaryInfoReq)(nil),      // 27: saas_user.GetPrimaryInfoReq
	(*GetPrimaryInfoResp)(nil),     // 28: saas_user.GetPrimaryInfoResp
	(*EditSpecInstance)(nil),       // 29: saas_user.EditSpecInstance
	(*UpdatePrimaryInfoReq)(nil),   // 30: saas_user.UpdatePrimaryInfoReq
	(*UpdatePrimaryInfoResp)(nil),  // 31: saas_user.UpdatePrimaryInfoResp
	(*CreatePrimaryInfoReq)(nil),   // 32: saas_user.CreatePrimaryInfoReq
	(*CreatePrimaryInfoResp)(nil),  // 33: saas_user.CreatePrimaryInfoResp
	(*DeletePrimaryInfoReq)(nil),   // 34: saas_user.DeletePrimaryInfoReq
	(*DeletePrimaryInfoResp)(nil),  // 35: saas_user.DeletePrimaryInfoResp
}
var file_saas_user_proto_depIdxs = []int32{
	2,  // 0: saas_user.GetUserInfoListResp.list:type_name -> saas_user.UserInfo
	2,  // 1: saas_user.GetUserInfoResp.user_info:type_name -> saas_user.UserInfo
	2,  // 2: saas_user.UpdateUserInfoResp.user_info:type_name -> saas_user.UserInfo
	2,  // 3: saas_user.CreateUserInfoResp.user_info:type_name -> saas_user.UserInfo
	2,  // 4: saas_user.DeleteUserInfoResp.user_info:type_name -> saas_user.UserInfo
	13, // 5: saas_user.GetAgentInfoResp.agent_info:type_name -> saas_user.AgentInfo
	13, // 6: saas_user.GetAgentInfoListResp.list:type_name -> saas_user.AgentInfo
	13, // 7: saas_user.CreateAgentInfoResp.agent_info:type_name -> saas_user.AgentInfo
	13, // 8: saas_user.UpdateAgentInfoResp.agent_info:type_name -> saas_user.AgentInfo
	13, // 9: saas_user.DeleteAgentInfoResp.agent_info:type_name -> saas_user.AgentInfo
	24, // 10: saas_user.GetPrimaryInfoListResp.list:type_name -> saas_user.PrimaryInfo
	24, // 11: saas_user.GetPrimaryInfoResp.primary_info:type_name -> saas_user.PrimaryInfo
	29, // 12: saas_user.UpdatePrimaryInfoReq.spec_instances:type_name -> saas_user.EditSpecInstance
	24, // 13: saas_user.UpdatePrimaryInfoResp.primary_info:type_name -> saas_user.PrimaryInfo
	29, // 14: saas_user.CreatePrimaryInfoReq.spec_instances:type_name -> saas_user.EditSpecInstance
	24, // 15: saas_user.CreatePrimaryInfoResp.primary_info:type_name -> saas_user.PrimaryInfo
	24, // 16: saas_user.DeletePrimaryInfoResp.primary_info:type_name -> saas_user.PrimaryInfo
	0,  // 17: saas_user.DemoService.Ping:input_type -> saas_user.Request
	3,  // 18: saas_user.UserService.GetUserInfoList:input_type -> saas_user.GetUserInfoListReq
	7,  // 19: saas_user.UserService.UpdateUserInfo:input_type -> saas_user.UpdateUserInfoReq
	5,  // 20: saas_user.UserService.GetUserInfo:input_type -> saas_user.GetUserInfoReq
	9,  // 21: saas_user.UserService.CreateUserInfo:input_type -> saas_user.CreateUserInfoReq
	11, // 22: saas_user.UserService.DeleteUserInfo:input_type -> saas_user.DeleteUserInfoReq
	14, // 23: saas_user.AgentService.GetAgentInfo:input_type -> saas_user.GetAgentInfoReq
	16, // 24: saas_user.AgentService.GetAgentInfoList:input_type -> saas_user.GetAgentInfoListReq
	18, // 25: saas_user.AgentService.CreateAgentInfo:input_type -> saas_user.CreateAgentInfoReq
	20, // 26: saas_user.AgentService.UpdateAgentInfo:input_type -> saas_user.UpdateAgentInfoReq
	22, // 27: saas_user.AgentService.DeleteAgentInfo:input_type -> saas_user.DeleteAgentInfoReq
	27, // 28: saas_user.PrimaryService.GetPrimaryInfo:input_type -> saas_user.GetPrimaryInfoReq
	25, // 29: saas_user.PrimaryService.GetPrimaryInfoList:input_type -> saas_user.GetPrimaryInfoListReq
	30, // 30: saas_user.PrimaryService.UpdatePrimaryInfo:input_type -> saas_user.UpdatePrimaryInfoReq
	32, // 31: saas_user.PrimaryService.CreatePrimaryInfo:input_type -> saas_user.CreatePrimaryInfoReq
	34, // 32: saas_user.PrimaryService.DeletePrimaryInfo:input_type -> saas_user.DeletePrimaryInfoReq
	1,  // 33: saas_user.DemoService.Ping:output_type -> saas_user.Response
	4,  // 34: saas_user.UserService.GetUserInfoList:output_type -> saas_user.GetUserInfoListResp
	8,  // 35: saas_user.UserService.UpdateUserInfo:output_type -> saas_user.UpdateUserInfoResp
	6,  // 36: saas_user.UserService.GetUserInfo:output_type -> saas_user.GetUserInfoResp
	10, // 37: saas_user.UserService.CreateUserInfo:output_type -> saas_user.CreateUserInfoResp
	12, // 38: saas_user.UserService.DeleteUserInfo:output_type -> saas_user.DeleteUserInfoResp
	15, // 39: saas_user.AgentService.GetAgentInfo:output_type -> saas_user.GetAgentInfoResp
	17, // 40: saas_user.AgentService.GetAgentInfoList:output_type -> saas_user.GetAgentInfoListResp
	19, // 41: saas_user.AgentService.CreateAgentInfo:output_type -> saas_user.CreateAgentInfoResp
	21, // 42: saas_user.AgentService.UpdateAgentInfo:output_type -> saas_user.UpdateAgentInfoResp
	23, // 43: saas_user.AgentService.DeleteAgentInfo:output_type -> saas_user.DeleteAgentInfoResp
	28, // 44: saas_user.PrimaryService.GetPrimaryInfo:output_type -> saas_user.GetPrimaryInfoResp
	26, // 45: saas_user.PrimaryService.GetPrimaryInfoList:output_type -> saas_user.GetPrimaryInfoListResp
	31, // 46: saas_user.PrimaryService.UpdatePrimaryInfo:output_type -> saas_user.UpdatePrimaryInfoResp
	33, // 47: saas_user.PrimaryService.CreatePrimaryInfo:output_type -> saas_user.CreatePrimaryInfoResp
	35, // 48: saas_user.PrimaryService.DeletePrimaryInfo:output_type -> saas_user.DeletePrimaryInfoResp
	33, // [33:49] is the sub-list for method output_type
	17, // [17:33] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_saas_user_proto_init() }
func file_saas_user_proto_init() {
	if File_saas_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_saas_user_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgentInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgentInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgentInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgentInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAgentInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAgentInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAgentInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAgentInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAgentInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAgentInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PrimaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrimaryInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrimaryInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrimaryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrimaryInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*EditSpecInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePrimaryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePrimaryInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrimaryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrimaryInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePrimaryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saas_user_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePrimaryInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_saas_user_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_saas_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_saas_user_proto_goTypes,
		DependencyIndexes: file_saas_user_proto_depIdxs,
		MessageInfos:      file_saas_user_proto_msgTypes,
	}.Build()
	File_saas_user_proto = out.File
	file_saas_user_proto_rawDesc = nil
	file_saas_user_proto_goTypes = nil
	file_saas_user_proto_depIdxs = nil
}
