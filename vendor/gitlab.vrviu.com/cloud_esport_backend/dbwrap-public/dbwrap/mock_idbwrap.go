// Code generated by MockGen. DO NOT EDIT.
// Source: idbwrap.go

// Package dbwrap is a generated GoMock package.
package dbwrap

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDBWrap is a mock of IDBWrap interface.
type MockIDBWrap struct {
	ctrl     *gomock.Controller
	recorder *MockIDBWrapMockRecorder
}

// MockIDBWrapMockRecorder is the mock recorder for MockIDBWrap.
type MockIDBWrapMockRecorder struct {
	mock *MockIDBWrap
}

// NewMockIDBWrap creates a new mock instance.
func NewMockIDBWrap(ctrl *gomock.Controller) *MockIDBWrap {
	mock := &MockIDBWrap{ctrl: ctrl}
	mock.recorder = &MockIDBWrapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBWrap) EXPECT() *MockIDBWrapMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDBWrap) Delete(key interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIDBWrapMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDBWrap)(nil).Delete), key)
}

// Insert mocks base method.
func (m *MockIDBWrap) Insert(info interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", info)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Insert indicates an expected call of Insert.
func (mr *MockIDBWrapMockRecorder) Insert(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIDBWrap)(nil).Insert), info)
}

// Query mocks base method.
func (m *MockIDBWrap) Query(query string, sortby, ascending interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, sortby, ascending)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockIDBWrapMockRecorder) Query(query, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDBWrap)(nil).Query), query, sortby, ascending)
}

// QueryAll mocks base method.
func (m *MockIDBWrap) QueryAll(query string, sortby, ascending interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAll", query, sortby, ascending)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryAll indicates an expected call of QueryAll.
func (mr *MockIDBWrapMockRecorder) QueryAll(query, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAll", reflect.TypeOf((*MockIDBWrap)(nil).QueryAll), query, sortby, ascending)
}

// QueryPage mocks base method.
func (m *MockIDBWrap) QueryPage(query string, offset, limit int, sortby, ascending interface{}) (int, interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPage", query, offset, limit, sortby, ascending)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// QueryPage indicates an expected call of QueryPage.
func (mr *MockIDBWrapMockRecorder) QueryPage(query, offset, limit, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPage", reflect.TypeOf((*MockIDBWrap)(nil).QueryPage), query, offset, limit, sortby, ascending)
}

// Update mocks base method.
func (m *MockIDBWrap) Update(key, info interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, info)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockIDBWrapMockRecorder) Update(key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDBWrap)(nil).Update), key, info)
}

// MockIAreaDBWrap is a mock of IAreaDBWrap interface.
type MockIAreaDBWrap struct {
	ctrl     *gomock.Controller
	recorder *MockIAreaDBWrapMockRecorder
}

// MockIAreaDBWrapMockRecorder is the mock recorder for MockIAreaDBWrap.
type MockIAreaDBWrapMockRecorder struct {
	mock *MockIAreaDBWrap
}

// NewMockIAreaDBWrap creates a new mock instance.
func NewMockIAreaDBWrap(ctrl *gomock.Controller) *MockIAreaDBWrap {
	mock := &MockIAreaDBWrap{ctrl: ctrl}
	mock.recorder = &MockIAreaDBWrapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAreaDBWrap) EXPECT() *MockIAreaDBWrapMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIAreaDBWrap) Delete(area int, key interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", area, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIAreaDBWrapMockRecorder) Delete(area, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAreaDBWrap)(nil).Delete), area, key)
}

// Insert mocks base method.
func (m *MockIAreaDBWrap) Insert(area int, info interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", area, info)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Insert indicates an expected call of Insert.
func (mr *MockIAreaDBWrapMockRecorder) Insert(area, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIAreaDBWrap)(nil).Insert), area, info)
}

// Query mocks base method.
func (m *MockIAreaDBWrap) Query(area int, query string, sortby, ascending interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", area, query, sortby, ascending)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockIAreaDBWrapMockRecorder) Query(area, query, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIAreaDBWrap)(nil).Query), area, query, sortby, ascending)
}

// QueryAll mocks base method.
func (m *MockIAreaDBWrap) QueryAll(area int, query string, sortby, ascending interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAll", area, query, sortby, ascending)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryAll indicates an expected call of QueryAll.
func (mr *MockIAreaDBWrapMockRecorder) QueryAll(area, query, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAll", reflect.TypeOf((*MockIAreaDBWrap)(nil).QueryAll), area, query, sortby, ascending)
}

// QueryPage mocks base method.
func (m *MockIAreaDBWrap) QueryPage(area int, query string, offset, limit int, sortby, ascending interface{}) (int, interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPage", area, query, offset, limit, sortby, ascending)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// QueryPage indicates an expected call of QueryPage.
func (mr *MockIAreaDBWrapMockRecorder) QueryPage(area, query, offset, limit, sortby, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPage", reflect.TypeOf((*MockIAreaDBWrap)(nil).QueryPage), area, query, offset, limit, sortby, ascending)
}

// Update mocks base method.
func (m *MockIAreaDBWrap) Update(area int, key, info interface{}) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", area, key, info)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockIAreaDBWrapMockRecorder) Update(area, key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAreaDBWrap)(nil).Update), area, key, info)
}
