// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: instance_scheduler/service.proto

package instance_scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InstanceScheduler_AssignInstance_FullMethodName         = "/instance_scheduler.InstanceScheduler/AssignInstance"
	InstanceScheduler_GetOrder_FullMethodName               = "/instance_scheduler.InstanceScheduler/GetOrder"
	InstanceScheduler_GetResourceStat_FullMethodName        = "/instance_scheduler.InstanceScheduler/GetResourceStat"
	InstanceScheduler_ReleaseInstance_FullMethodName        = "/instance_scheduler.InstanceScheduler/ReleaseInstance"
	InstanceScheduler_InstanceStatusCallback_FullMethodName = "/instance_scheduler.InstanceScheduler/InstanceStatusCallback"
	InstanceScheduler_LockInstance_FullMethodName           = "/instance_scheduler.InstanceScheduler/LockInstance"
	InstanceScheduler_RebuildPool_FullMethodName            = "/instance_scheduler.InstanceScheduler/RebuildPool"
	InstanceScheduler_ReleasePoolItem_FullMethodName        = "/instance_scheduler.InstanceScheduler/ReleasePoolItem"
	InstanceScheduler_SearchPool_FullMethodName             = "/instance_scheduler.InstanceScheduler/SearchPool"
	InstanceScheduler_NewResource_FullMethodName            = "/instance_scheduler.InstanceScheduler/NewResource"
	InstanceScheduler_UpdateResource_FullMethodName         = "/instance_scheduler.InstanceScheduler/UpdateResource"
	InstanceScheduler_SearchResource_FullMethodName         = "/instance_scheduler.InstanceScheduler/SearchResource"
	InstanceScheduler_AssignCtyunInstance_FullMethodName    = "/instance_scheduler.InstanceScheduler/AssignCtyunInstance"
	InstanceScheduler_ReleaseCtyunInstance_FullMethodName   = "/instance_scheduler.InstanceScheduler/ReleaseCtyunInstance"
	InstanceScheduler_QueryCtyunInstances_FullMethodName    = "/instance_scheduler.InstanceScheduler/QueryCtyunInstances"
)

// InstanceSchedulerClient is the client API for InstanceScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceSchedulerClient interface {
	AssignInstance(ctx context.Context, in *AssignInstanceRequest, opts ...grpc.CallOption) (*AssignInstanceResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetResourceStat(ctx context.Context, in *GetResourceStatRequest, opts ...grpc.CallOption) (*GetResourceStatResponse, error)
	ReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error)
	InstanceStatusCallback(ctx context.Context, in *InstanceStatusRequest, opts ...grpc.CallOption) (*InstanceStatusResponse, error)
	LockInstance(ctx context.Context, in *LockInstanceRequest, opts ...grpc.CallOption) (*LockInstanceResponse, error)
	// pool mgr
	RebuildPool(ctx context.Context, in *RebuildPoolRequest, opts ...grpc.CallOption) (*RebuildPoolResponse, error)
	ReleasePoolItem(ctx context.Context, in *ReleasePoolItemRequest, opts ...grpc.CallOption) (*ReleasePoolItemResponse, error)
	SearchPool(ctx context.Context, in *SearchPoolRequest, opts ...grpc.CallOption) (*SearchPoolResponse, error)
	// resource management
	NewResource(ctx context.Context, in *NewResourceRequest, opts ...grpc.CallOption) (*NewResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	SearchResource(ctx context.Context, in *SearchResourceRequest, opts ...grpc.CallOption) (*SearchResourceResponse, error)
	// ctyun
	AssignCtyunInstance(ctx context.Context, in *AssignCtyunInstanceRequest, opts ...grpc.CallOption) (*AssignCtyunInstanceResponse, error)
	ReleaseCtyunInstance(ctx context.Context, in *ReleaseCtyunInstanceRequest, opts ...grpc.CallOption) (*ReleaseCtyunInstanceResponse, error)
	QueryCtyunInstances(ctx context.Context, in *QueryCtyunInstanceRequest, opts ...grpc.CallOption) (*QueryCtyunInstanceResponse, error)
}

type instanceSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceSchedulerClient(cc grpc.ClientConnInterface) InstanceSchedulerClient {
	return &instanceSchedulerClient{cc}
}

func (c *instanceSchedulerClient) AssignInstance(ctx context.Context, in *AssignInstanceRequest, opts ...grpc.CallOption) (*AssignInstanceResponse, error) {
	out := new(AssignInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_AssignInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) GetResourceStat(ctx context.Context, in *GetResourceStatRequest, opts ...grpc.CallOption) (*GetResourceStatResponse, error) {
	out := new(GetResourceStatResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_GetResourceStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) ReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error) {
	out := new(ReleaseInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_ReleaseInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) InstanceStatusCallback(ctx context.Context, in *InstanceStatusRequest, opts ...grpc.CallOption) (*InstanceStatusResponse, error) {
	out := new(InstanceStatusResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_InstanceStatusCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) LockInstance(ctx context.Context, in *LockInstanceRequest, opts ...grpc.CallOption) (*LockInstanceResponse, error) {
	out := new(LockInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_LockInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) RebuildPool(ctx context.Context, in *RebuildPoolRequest, opts ...grpc.CallOption) (*RebuildPoolResponse, error) {
	out := new(RebuildPoolResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_RebuildPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) ReleasePoolItem(ctx context.Context, in *ReleasePoolItemRequest, opts ...grpc.CallOption) (*ReleasePoolItemResponse, error) {
	out := new(ReleasePoolItemResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_ReleasePoolItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) SearchPool(ctx context.Context, in *SearchPoolRequest, opts ...grpc.CallOption) (*SearchPoolResponse, error) {
	out := new(SearchPoolResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_SearchPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) NewResource(ctx context.Context, in *NewResourceRequest, opts ...grpc.CallOption) (*NewResourceResponse, error) {
	out := new(NewResourceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_NewResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) SearchResource(ctx context.Context, in *SearchResourceRequest, opts ...grpc.CallOption) (*SearchResourceResponse, error) {
	out := new(SearchResourceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_SearchResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) AssignCtyunInstance(ctx context.Context, in *AssignCtyunInstanceRequest, opts ...grpc.CallOption) (*AssignCtyunInstanceResponse, error) {
	out := new(AssignCtyunInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_AssignCtyunInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) ReleaseCtyunInstance(ctx context.Context, in *ReleaseCtyunInstanceRequest, opts ...grpc.CallOption) (*ReleaseCtyunInstanceResponse, error) {
	out := new(ReleaseCtyunInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_ReleaseCtyunInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceSchedulerClient) QueryCtyunInstances(ctx context.Context, in *QueryCtyunInstanceRequest, opts ...grpc.CallOption) (*QueryCtyunInstanceResponse, error) {
	out := new(QueryCtyunInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceScheduler_QueryCtyunInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceSchedulerServer is the server API for InstanceScheduler service.
// All implementations must embed UnimplementedInstanceSchedulerServer
// for forward compatibility
type InstanceSchedulerServer interface {
	AssignInstance(context.Context, *AssignInstanceRequest) (*AssignInstanceResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetResourceStat(context.Context, *GetResourceStatRequest) (*GetResourceStatResponse, error)
	ReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error)
	InstanceStatusCallback(context.Context, *InstanceStatusRequest) (*InstanceStatusResponse, error)
	LockInstance(context.Context, *LockInstanceRequest) (*LockInstanceResponse, error)
	// pool mgr
	RebuildPool(context.Context, *RebuildPoolRequest) (*RebuildPoolResponse, error)
	ReleasePoolItem(context.Context, *ReleasePoolItemRequest) (*ReleasePoolItemResponse, error)
	SearchPool(context.Context, *SearchPoolRequest) (*SearchPoolResponse, error)
	// resource management
	NewResource(context.Context, *NewResourceRequest) (*NewResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	SearchResource(context.Context, *SearchResourceRequest) (*SearchResourceResponse, error)
	// ctyun
	AssignCtyunInstance(context.Context, *AssignCtyunInstanceRequest) (*AssignCtyunInstanceResponse, error)
	ReleaseCtyunInstance(context.Context, *ReleaseCtyunInstanceRequest) (*ReleaseCtyunInstanceResponse, error)
	QueryCtyunInstances(context.Context, *QueryCtyunInstanceRequest) (*QueryCtyunInstanceResponse, error)
	mustEmbedUnimplementedInstanceSchedulerServer()
}

// UnimplementedInstanceSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceSchedulerServer struct {
}

func (UnimplementedInstanceSchedulerServer) AssignInstance(context.Context, *AssignInstanceRequest) (*AssignInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignInstance not implemented")
}
func (UnimplementedInstanceSchedulerServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedInstanceSchedulerServer) GetResourceStat(context.Context, *GetResourceStatRequest) (*GetResourceStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStat not implemented")
}
func (UnimplementedInstanceSchedulerServer) ReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseInstance not implemented")
}
func (UnimplementedInstanceSchedulerServer) InstanceStatusCallback(context.Context, *InstanceStatusRequest) (*InstanceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceStatusCallback not implemented")
}
func (UnimplementedInstanceSchedulerServer) LockInstance(context.Context, *LockInstanceRequest) (*LockInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockInstance not implemented")
}
func (UnimplementedInstanceSchedulerServer) RebuildPool(context.Context, *RebuildPoolRequest) (*RebuildPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildPool not implemented")
}
func (UnimplementedInstanceSchedulerServer) ReleasePoolItem(context.Context, *ReleasePoolItemRequest) (*ReleasePoolItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePoolItem not implemented")
}
func (UnimplementedInstanceSchedulerServer) SearchPool(context.Context, *SearchPoolRequest) (*SearchPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPool not implemented")
}
func (UnimplementedInstanceSchedulerServer) NewResource(context.Context, *NewResourceRequest) (*NewResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewResource not implemented")
}
func (UnimplementedInstanceSchedulerServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedInstanceSchedulerServer) SearchResource(context.Context, *SearchResourceRequest) (*SearchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResource not implemented")
}
func (UnimplementedInstanceSchedulerServer) AssignCtyunInstance(context.Context, *AssignCtyunInstanceRequest) (*AssignCtyunInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCtyunInstance not implemented")
}
func (UnimplementedInstanceSchedulerServer) ReleaseCtyunInstance(context.Context, *ReleaseCtyunInstanceRequest) (*ReleaseCtyunInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCtyunInstance not implemented")
}
func (UnimplementedInstanceSchedulerServer) QueryCtyunInstances(context.Context, *QueryCtyunInstanceRequest) (*QueryCtyunInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCtyunInstances not implemented")
}
func (UnimplementedInstanceSchedulerServer) mustEmbedUnimplementedInstanceSchedulerServer() {}

// UnsafeInstanceSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceSchedulerServer will
// result in compilation errors.
type UnsafeInstanceSchedulerServer interface {
	mustEmbedUnimplementedInstanceSchedulerServer()
}

func RegisterInstanceSchedulerServer(s grpc.ServiceRegistrar, srv InstanceSchedulerServer) {
	s.RegisterService(&InstanceScheduler_ServiceDesc, srv)
}

func _InstanceScheduler_AssignInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).AssignInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_AssignInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).AssignInstance(ctx, req.(*AssignInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_GetResourceStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).GetResourceStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_GetResourceStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).GetResourceStat(ctx, req.(*GetResourceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_ReleaseInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).ReleaseInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_ReleaseInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).ReleaseInstance(ctx, req.(*ReleaseInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_InstanceStatusCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).InstanceStatusCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_InstanceStatusCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).InstanceStatusCallback(ctx, req.(*InstanceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_LockInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).LockInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_LockInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).LockInstance(ctx, req.(*LockInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_RebuildPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).RebuildPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_RebuildPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).RebuildPool(ctx, req.(*RebuildPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_ReleasePoolItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePoolItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).ReleasePoolItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_ReleasePoolItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).ReleasePoolItem(ctx, req.(*ReleasePoolItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_SearchPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).SearchPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_SearchPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).SearchPool(ctx, req.(*SearchPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_NewResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).NewResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_NewResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).NewResource(ctx, req.(*NewResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_SearchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).SearchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_SearchResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).SearchResource(ctx, req.(*SearchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_AssignCtyunInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCtyunInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).AssignCtyunInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_AssignCtyunInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).AssignCtyunInstance(ctx, req.(*AssignCtyunInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_ReleaseCtyunInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCtyunInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).ReleaseCtyunInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_ReleaseCtyunInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).ReleaseCtyunInstance(ctx, req.(*ReleaseCtyunInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceScheduler_QueryCtyunInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCtyunInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceSchedulerServer).QueryCtyunInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceScheduler_QueryCtyunInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceSchedulerServer).QueryCtyunInstances(ctx, req.(*QueryCtyunInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceScheduler_ServiceDesc is the grpc.ServiceDesc for InstanceScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instance_scheduler.InstanceScheduler",
	HandlerType: (*InstanceSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignInstance",
			Handler:    _InstanceScheduler_AssignInstance_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _InstanceScheduler_GetOrder_Handler,
		},
		{
			MethodName: "GetResourceStat",
			Handler:    _InstanceScheduler_GetResourceStat_Handler,
		},
		{
			MethodName: "ReleaseInstance",
			Handler:    _InstanceScheduler_ReleaseInstance_Handler,
		},
		{
			MethodName: "InstanceStatusCallback",
			Handler:    _InstanceScheduler_InstanceStatusCallback_Handler,
		},
		{
			MethodName: "LockInstance",
			Handler:    _InstanceScheduler_LockInstance_Handler,
		},
		{
			MethodName: "RebuildPool",
			Handler:    _InstanceScheduler_RebuildPool_Handler,
		},
		{
			MethodName: "ReleasePoolItem",
			Handler:    _InstanceScheduler_ReleasePoolItem_Handler,
		},
		{
			MethodName: "SearchPool",
			Handler:    _InstanceScheduler_SearchPool_Handler,
		},
		{
			MethodName: "NewResource",
			Handler:    _InstanceScheduler_NewResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _InstanceScheduler_UpdateResource_Handler,
		},
		{
			MethodName: "SearchResource",
			Handler:    _InstanceScheduler_SearchResource_Handler,
		},
		{
			MethodName: "AssignCtyunInstance",
			Handler:    _InstanceScheduler_AssignCtyunInstance_Handler,
		},
		{
			MethodName: "ReleaseCtyunInstance",
			Handler:    _InstanceScheduler_ReleaseCtyunInstance_Handler,
		},
		{
			MethodName: "QueryCtyunInstances",
			Handler:    _InstanceScheduler_QueryCtyunInstances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instance_scheduler/service.proto",
}
