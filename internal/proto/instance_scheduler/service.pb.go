// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.1
// source: instance_scheduler/service.proto

package instance_scheduler

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_e_ok          ErrorCode = 0
	ErrorCode_e_param       ErrorCode = -1
	ErrorCode_e_sys         ErrorCode = -2
	ErrorCode_e_busy        ErrorCode = -3
	ErrorCode_e_conflict    ErrorCode = -4
	ErrorCode_e_again       ErrorCode = -5
	ErrorCode_e_status      ErrorCode = -6
	ErrorCode_e_not_exists  ErrorCode = -7
	ErrorCode_e_no_resource ErrorCode = -1001
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "e_ok",
		-1:    "e_param",
		-2:    "e_sys",
		-3:    "e_busy",
		-4:    "e_conflict",
		-5:    "e_again",
		-6:    "e_status",
		-7:    "e_not_exists",
		-1001: "e_no_resource",
	}
	ErrorCode_value = map[string]int32{
		"e_ok":          0,
		"e_param":       -1,
		"e_sys":         -2,
		"e_busy":        -3,
		"e_conflict":    -4,
		"e_again":       -5,
		"e_status":      -6,
		"e_not_exists":  -7,
		"e_no_resource": -1001,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_instance_scheduler_service_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_instance_scheduler_service_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{0}
}

type Strategy int32

const (
	Strategy_strategy_fixed     Strategy = 0 // 指定分配
	Strategy_strategy_debug     Strategy = 1 // 分配空闲机器
	Strategy_strategy_healthy   Strategy = 2 // 分配健康可用机器
	Strategy_strategy_available Strategy = 3 // 分配允许使用机器
)

// Enum value maps for Strategy.
var (
	Strategy_name = map[int32]string{
		0: "strategy_fixed",
		1: "strategy_debug",
		2: "strategy_healthy",
		3: "strategy_available",
	}
	Strategy_value = map[string]int32{
		"strategy_fixed":     0,
		"strategy_debug":     1,
		"strategy_healthy":   2,
		"strategy_available": 3,
	}
)

func (x Strategy) Enum() *Strategy {
	p := new(Strategy)
	*p = x
	return p
}

func (x Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_instance_scheduler_service_proto_enumTypes[1].Descriptor()
}

func (Strategy) Type() protoreflect.EnumType {
	return &file_instance_scheduler_service_proto_enumTypes[1]
}

func (x Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Strategy.Descriptor instead.
func (Strategy) EnumDescriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{1}
}

type Mode int32

const (
	Mode_mode_normal   Mode = 0
	Mode_mode_freeze   Mode = 1 // 冻结
	Mode_mode_unfreeze Mode = 3 // 解冻
	Mode_mode_dynamic  Mode = 4 // 动态调度
	Mode_mode_book     Mode = 8 // 预定
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "mode_normal",
		1: "mode_freeze",
		3: "mode_unfreeze",
		4: "mode_dynamic",
		8: "mode_book",
	}
	Mode_value = map[string]int32{
		"mode_normal":   0,
		"mode_freeze":   1,
		"mode_unfreeze": 3,
		"mode_dynamic":  4,
		"mode_book":     8,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_instance_scheduler_service_proto_enumTypes[2].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_instance_scheduler_service_proto_enumTypes[2]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{2}
}

type InstanceStatus int32

const (
	InstanceStatus_status_available InstanceStatus = 0    // 空闲
	InstanceStatus_status_upgrading InstanceStatus = 1001 // 升级中
)

// Enum value maps for InstanceStatus.
var (
	InstanceStatus_name = map[int32]string{
		0:    "status_available",
		1001: "status_upgrading",
	}
	InstanceStatus_value = map[string]int32{
		"status_available": 0,
		"status_upgrading": 1001,
	}
)

func (x InstanceStatus) Enum() *InstanceStatus {
	p := new(InstanceStatus)
	*p = x
	return p
}

func (x InstanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_instance_scheduler_service_proto_enumTypes[3].Descriptor()
}

func (InstanceStatus) Type() protoreflect.EnumType {
	return &file_instance_scheduler_service_proto_enumTypes[3]
}

func (x InstanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus.Descriptor instead.
func (InstanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{3}
}

type InstanceEvent int32

const (
	InstanceEvent_ev_init     InstanceEvent = 0
	InstanceEvent_ev_power_on InstanceEvent = 100
	InstanceEvent_ev_dhcp     InstanceEvent = 200
	InstanceEvent_ev_running  InstanceEvent = 300
	InstanceEvent_ev_health   InstanceEvent = 400
)

// Enum value maps for InstanceEvent.
var (
	InstanceEvent_name = map[int32]string{
		0:   "ev_init",
		100: "ev_power_on",
		200: "ev_dhcp",
		300: "ev_running",
		400: "ev_health",
	}
	InstanceEvent_value = map[string]int32{
		"ev_init":     0,
		"ev_power_on": 100,
		"ev_dhcp":     200,
		"ev_running":  300,
		"ev_health":   400,
	}
)

func (x InstanceEvent) Enum() *InstanceEvent {
	p := new(InstanceEvent)
	*p = x
	return p
}

func (x InstanceEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_instance_scheduler_service_proto_enumTypes[4].Descriptor()
}

func (InstanceEvent) Type() protoreflect.EnumType {
	return &file_instance_scheduler_service_proto_enumTypes[4]
}

func (x InstanceEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceEvent.Descriptor instead.
func (InstanceEvent) EnumDescriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{4}
}

type CommRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CommRet) Reset() {
	*x = CommRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommRet) ProtoMessage() {}

func (x *CommRet) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommRet.ProtoReflect.Descriptor instead.
func (*CommRet) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{0}
}

func (x *CommRet) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommRet) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type NetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`             // ip地址
	Netmask  string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`   // 子网掩码
	Gateway  string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`   // 网关地址
	Dns      string `protobuf:"bytes,4,opt,name=dns,proto3" json:"dns,omitempty"`           // dns地址
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"` // 主机名
	Vlan     int32  `protobuf:"varint,6,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *NetInfo) Reset() {
	*x = NetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfo) ProtoMessage() {}

func (x *NetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfo.ProtoReflect.Descriptor instead.
func (*NetInfo) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{1}
}

func (x *NetInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetInfo) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *NetInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NetInfo) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *NetInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetInfo) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

type ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId    int64  `protobuf:"varint,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	AreaType      int32  `protobuf:"varint,2,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Type          int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Specification int64  `protobuf:"varint,5,opt,name=specification,proto3" json:"specification,omitempty"`
	Vlan          int32  `protobuf:"varint,6,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Detail        string `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty"`
	Mode          int64  `protobuf:"varint,8,opt,name=mode,proto3" json:"mode,omitempty"`
	Capacity      int32  `protobuf:"varint,9,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Buffer        int32  `protobuf:"varint,10,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Init          int32  `protobuf:"varint,11,opt,name=init,proto3" json:"init,omitempty"`
	Concurrent    int32  `protobuf:"varint,12,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	Priority      int64  `protobuf:"varint,13,opt,name=priority,proto3" json:"priority,omitempty"`
	Preemptable   int32  `protobuf:"varint,14,opt,name=preemptable,proto3" json:"preemptable,omitempty"`
	AssignConfig  string `protobuf:"bytes,15,opt,name=assign_config,json=assignConfig,proto3" json:"assign_config,omitempty"`
	State         int32  `protobuf:"varint,16,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ResourceConfig) Reset() {
	*x = ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfig) ProtoMessage() {}

func (x *ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfig.ProtoReflect.Descriptor instead.
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceConfig) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *ResourceConfig) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *ResourceConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResourceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceConfig) GetSpecification() int64 {
	if x != nil {
		return x.Specification
	}
	return 0
}

func (x *ResourceConfig) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *ResourceConfig) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ResourceConfig) GetMode() int64 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ResourceConfig) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ResourceConfig) GetBuffer() int32 {
	if x != nil {
		return x.Buffer
	}
	return 0
}

func (x *ResourceConfig) GetInit() int32 {
	if x != nil {
		return x.Init
	}
	return 0
}

func (x *ResourceConfig) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ResourceConfig) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ResourceConfig) GetPreemptable() int32 {
	if x != nil {
		return x.Preemptable
	}
	return 0
}

func (x *ResourceConfig) GetAssignConfig() string {
	if x != nil {
		return x.AssignConfig
	}
	return ""
}

func (x *ResourceConfig) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type AssignInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string          `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`                         // 流水ID
	Source         string          `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                       // 来源
	Strategy       Strategy        `protobuf:"varint,3,opt,name=strategy,proto3,enum=instance_scheduler.Strategy" json:"strategy,omitempty"` // 分配策略
	InstanceId     int64           `protobuf:"varint,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`            // 指定调度的实例id
	SchemeId       int64           `protobuf:"varint,5,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`                  // 业务编排方案
	NetInfo        *NetInfo        `protobuf:"bytes,6,opt,name=net_info,json=netInfo,proto3" json:"net_info,omitempty"`                      // 网络信息
	Vlan           int32           `protobuf:"varint,7,opt,name=vlan,proto3" json:"vlan,omitempty"`
	ResourceId     int64           `protobuf:"varint,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // 资源ID
	Edge           string          `protobuf:"bytes,9,opt,name=edge,proto3" json:"edge,omitempty"`                                // 指定边缘机房
	Params         string          `protobuf:"bytes,10,opt,name=params,proto3" json:"params,omitempty"`                           // 额外参数json格式
	AreaType       int32           `protobuf:"varint,12,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Mode           int32           `protobuf:"varint,13,opt,name=mode,proto3" json:"mode,omitempty"` // 分配模式
	ResourceConfig *ResourceConfig `protobuf:"bytes,14,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
	AdminFlag      int32           `protobuf:"varint,15,opt,name=admin_flag,json=adminFlag,proto3" json:"admin_flag,omitempty"` // 1-设置超管
}

func (x *AssignInstanceRequest) Reset() {
	*x = AssignInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignInstanceRequest) ProtoMessage() {}

func (x *AssignInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignInstanceRequest.ProtoReflect.Descriptor instead.
func (*AssignInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{3}
}

func (x *AssignInstanceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AssignInstanceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AssignInstanceRequest) GetStrategy() Strategy {
	if x != nil {
		return x.Strategy
	}
	return Strategy_strategy_fixed
}

func (x *AssignInstanceRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *AssignInstanceRequest) GetSchemeId() int64 {
	if x != nil {
		return x.SchemeId
	}
	return 0
}

func (x *AssignInstanceRequest) GetNetInfo() *NetInfo {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

func (x *AssignInstanceRequest) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *AssignInstanceRequest) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *AssignInstanceRequest) GetEdge() string {
	if x != nil {
		return x.Edge
	}
	return ""
}

func (x *AssignInstanceRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *AssignInstanceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *AssignInstanceRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *AssignInstanceRequest) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *AssignInstanceRequest) GetAdminFlag() int32 {
	if x != nil {
		return x.AdminFlag
	}
	return 0
}

type AssignInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	InstanceId     int64    `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`            // 指定调度的实例id
	ManageAddress  string   `protobuf:"bytes,3,opt,name=manage_address,json=manageAddress,proto3" json:"manage_address,omitempty"`    // 实例管理地址
	AccessEndpoint string   `protobuf:"bytes,4,opt,name=access_endpoint,json=accessEndpoint,proto3" json:"access_endpoint,omitempty"` // 实例接入点
	Mac            string   `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`                                             // mac地址
	Status         int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 0-可用 1-重启中
}

func (x *AssignInstanceResponse) Reset() {
	*x = AssignInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignInstanceResponse) ProtoMessage() {}

func (x *AssignInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignInstanceResponse.ProtoReflect.Descriptor instead.
func (*AssignInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{4}
}

func (x *AssignInstanceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *AssignInstanceResponse) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *AssignInstanceResponse) GetManageAddress() string {
	if x != nil {
		return x.ManageAddress
	}
	return ""
}

func (x *AssignInstanceResponse) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

func (x *AssignInstanceResponse) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AssignInstanceResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
	Source   string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`               // 来源
	AreaType int32  `protobuf:"varint,3,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrderRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetOrderRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetOrderRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

type GetOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	InstanceId     int64    `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`            // 指定调度的实例id
	ManageAddress  string   `protobuf:"bytes,3,opt,name=manage_address,json=manageAddress,proto3" json:"manage_address,omitempty"`    // 实例管理地址
	AccessEndpoint string   `protobuf:"bytes,4,opt,name=access_endpoint,json=accessEndpoint,proto3" json:"access_endpoint,omitempty"` // 实例接入点
	Mac            string   `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`                                             // mac地址
	Status         int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 0-可用 1-重启中
}

func (x *GetOrderResponse) Reset() {
	*x = GetOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponse) ProtoMessage() {}

func (x *GetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrderResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetOrderResponse) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *GetOrderResponse) GetManageAddress() string {
	if x != nil {
		return x.ManageAddress
	}
	return ""
}

func (x *GetOrderResponse) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

func (x *GetOrderResponse) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GetOrderResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AssignCtyunInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignOrder  string `protobuf:"bytes,1,opt,name=assign_order,json=assignOrder,proto3" json:"assign_order,omitempty"`    // 分配订单号，需保证唯一
	ClusterId    string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`          // 来源
	AssignSource string `protobuf:"bytes,3,opt,name=assign_source,json=assignSource,proto3" json:"assign_source,omitempty"` // 分配来源
	GpuType      string `protobuf:"bytes,4,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`                // 资源类型
	MirrorId     int32  `protobuf:"varint,5,opt,name=mirror_id,json=mirrorId,proto3" json:"mirror_id,omitempty"`            // 镜像id
	Num          int32  `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`                                      //资源申请数量
	RequestId    string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AssignCtyunInstanceRequest) Reset() {
	*x = AssignCtyunInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCtyunInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCtyunInstanceRequest) ProtoMessage() {}

func (x *AssignCtyunInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCtyunInstanceRequest.ProtoReflect.Descriptor instead.
func (*AssignCtyunInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{7}
}

func (x *AssignCtyunInstanceRequest) GetAssignOrder() string {
	if x != nil {
		return x.AssignOrder
	}
	return ""
}

func (x *AssignCtyunInstanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AssignCtyunInstanceRequest) GetAssignSource() string {
	if x != nil {
		return x.AssignSource
	}
	return ""
}

func (x *AssignCtyunInstanceRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *AssignCtyunInstanceRequest) GetMirrorId() int32 {
	if x != nil {
		return x.MirrorId
	}
	return 0
}

func (x *AssignCtyunInstanceRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AssignCtyunInstanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{8}
}

func (x *Status) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac         string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	AssignOrder string `protobuf:"bytes,3,opt,name=assign_order,json=assignOrder,proto3" json:"assign_order,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{9}
}

func (x *Instance) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Instance) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Instance) GetAssignOrder() string {
	if x != nil {
		return x.AssignOrder
	}
	return ""
}

type AssignCtyunInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Instances []string `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *AssignCtyunInstanceResponse) Reset() {
	*x = AssignCtyunInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCtyunInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCtyunInstanceResponse) ProtoMessage() {}

func (x *AssignCtyunInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCtyunInstanceResponse.ProtoReflect.Descriptor instead.
func (*AssignCtyunInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{10}
}

func (x *AssignCtyunInstanceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AssignCtyunInstanceResponse) GetInstances() []string {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ReleaseCtyunInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string      `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	AssignSource string      `protobuf:"bytes,3,opt,name=assign_source,json=assignSource,proto3" json:"assign_source,omitempty"`
	Instances    []*Instance `protobuf:"bytes,4,rep,name=instances,proto3" json:"instances,omitempty"`
	RequestId    string      `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ReleaseCtyunInstanceRequest) Reset() {
	*x = ReleaseCtyunInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCtyunInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCtyunInstanceRequest) ProtoMessage() {}

func (x *ReleaseCtyunInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCtyunInstanceRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCtyunInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseCtyunInstanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ReleaseCtyunInstanceRequest) GetAssignSource() string {
	if x != nil {
		return x.AssignSource
	}
	return ""
}

func (x *ReleaseCtyunInstanceRequest) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ReleaseCtyunInstanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ReleaseCtyunInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string  `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Status    *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReleaseCtyunInstanceResponse) Reset() {
	*x = ReleaseCtyunInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCtyunInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCtyunInstanceResponse) ProtoMessage() {}

func (x *ReleaseCtyunInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCtyunInstanceResponse.ProtoReflect.Descriptor instead.
func (*ReleaseCtyunInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{12}
}

func (x *ReleaseCtyunInstanceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReleaseCtyunInstanceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type QueryCtyunInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *QueryCtyunInstanceRequest) Reset() {
	*x = QueryCtyunInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCtyunInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCtyunInstanceRequest) ProtoMessage() {}

func (x *QueryCtyunInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCtyunInstanceRequest.ProtoReflect.Descriptor instead.
func (*QueryCtyunInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCtyunInstanceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryCtyunInstanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryCtyunInstanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type InstanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuType   string `protobuf:"bytes,1,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	Available int32  `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Used      int32  `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *InstanceList) Reset() {
	*x = InstanceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceList) ProtoMessage() {}

func (x *InstanceList) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceList.ProtoReflect.Descriptor instead.
func (*InstanceList) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceList) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *InstanceList) GetAvailable() int32 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *InstanceList) GetUsed() int32 {
	if x != nil {
		return x.Used
	}
	return 0
}

type QueryCtyunInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string          `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Status    *Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Lists     []*InstanceList `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *QueryCtyunInstanceResponse) Reset() {
	*x = QueryCtyunInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCtyunInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCtyunInstanceResponse) ProtoMessage() {}

func (x *QueryCtyunInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCtyunInstanceResponse.ProtoReflect.Descriptor instead.
func (*QueryCtyunInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{15}
}

func (x *QueryCtyunInstanceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *QueryCtyunInstanceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryCtyunInstanceResponse) GetLists() []*InstanceList {
	if x != nil {
		return x.Lists
	}
	return nil
}

type ReleaseInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string          `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	Source         string          `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                            // 来源
	InstanceId     int64           `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // 实例id
	AreaType       int32           `protobuf:"varint,4,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceConfig *ResourceConfig `protobuf:"bytes,5,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
}

func (x *ReleaseInstanceRequest) Reset() {
	*x = ReleaseInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInstanceRequest) ProtoMessage() {}

func (x *ReleaseInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInstanceRequest.ProtoReflect.Descriptor instead.
func (*ReleaseInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{16}
}

func (x *ReleaseInstanceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ReleaseInstanceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ReleaseInstanceRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *ReleaseInstanceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *ReleaseInstanceRequest) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

type ReleaseInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *ReleaseInstanceResponse) Reset() {
	*x = ReleaseInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInstanceResponse) ProtoMessage() {}

func (x *ReleaseInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInstanceResponse.ProtoReflect.Descriptor instead.
func (*ReleaseInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{17}
}

func (x *ReleaseInstanceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type InstanceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId     int64  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // 实例id
	PowerStatus    int64  `protobuf:"varint,2,opt,name=power_status,json=powerStatus,proto3" json:"power_status,omitempty"`
	RunningStatus  int64  `protobuf:"varint,3,opt,name=running_status,json=runningStatus,proto3" json:"running_status,omitempty"`
	BusinessStatus int64  `protobuf:"varint,4,opt,name=business_status,json=businessStatus,proto3" json:"business_status,omitempty"`
	BootTime       string `protobuf:"bytes,5,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	ManageAddress  string `protobuf:"bytes,6,opt,name=manage_address,json=manageAddress,proto3" json:"manage_address,omitempty"`
	Mac            string `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`
	ModifyTime     int64  `protobuf:"varint,8,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	AreaType       int32  `protobuf:"varint,9,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Event          int32  `protobuf:"varint,10,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *InstanceStatusRequest) Reset() {
	*x = InstanceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusRequest) ProtoMessage() {}

func (x *InstanceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusRequest.ProtoReflect.Descriptor instead.
func (*InstanceStatusRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceStatusRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *InstanceStatusRequest) GetPowerStatus() int64 {
	if x != nil {
		return x.PowerStatus
	}
	return 0
}

func (x *InstanceStatusRequest) GetRunningStatus() int64 {
	if x != nil {
		return x.RunningStatus
	}
	return 0
}

func (x *InstanceStatusRequest) GetBusinessStatus() int64 {
	if x != nil {
		return x.BusinessStatus
	}
	return 0
}

func (x *InstanceStatusRequest) GetBootTime() string {
	if x != nil {
		return x.BootTime
	}
	return ""
}

func (x *InstanceStatusRequest) GetManageAddress() string {
	if x != nil {
		return x.ManageAddress
	}
	return ""
}

func (x *InstanceStatusRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InstanceStatusRequest) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *InstanceStatusRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *InstanceStatusRequest) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

type InstanceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *InstanceStatusResponse) Reset() {
	*x = InstanceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatusResponse) ProtoMessage() {}

func (x *InstanceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatusResponse.ProtoReflect.Descriptor instead.
func (*InstanceStatusResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceStatusResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type LockInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	Source     string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                            // 来源
	InstanceId int64  `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // 实例id
	OldStatus  int64  `protobuf:"varint,4,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`    // 老状态
	NewStatus  int64  `protobuf:"varint,5,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`    // 新状态
	AreaType   int32  `protobuf:"varint,6,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
}

func (x *LockInstanceRequest) Reset() {
	*x = LockInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInstanceRequest) ProtoMessage() {}

func (x *LockInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInstanceRequest.ProtoReflect.Descriptor instead.
func (*LockInstanceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{20}
}

func (x *LockInstanceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *LockInstanceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LockInstanceRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *LockInstanceRequest) GetOldStatus() int64 {
	if x != nil {
		return x.OldStatus
	}
	return 0
}

func (x *LockInstanceRequest) GetNewStatus() int64 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *LockInstanceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

type LockInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *LockInstanceResponse) Reset() {
	*x = LockInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInstanceResponse) ProtoMessage() {}

func (x *LockInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInstanceResponse.ProtoReflect.Descriptor instead.
func (*LockInstanceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{21}
}

func (x *LockInstanceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type RebuildPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	ResourceId int64  `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // 资源ID
	AreaType   int32  `protobuf:"varint,3,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
}

func (x *RebuildPoolRequest) Reset() {
	*x = RebuildPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildPoolRequest) ProtoMessage() {}

func (x *RebuildPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildPoolRequest.ProtoReflect.Descriptor instead.
func (*RebuildPoolRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{22}
}

func (x *RebuildPoolRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *RebuildPoolRequest) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *RebuildPoolRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

type RebuildPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *RebuildPoolResponse) Reset() {
	*x = RebuildPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildPoolResponse) ProtoMessage() {}

func (x *RebuildPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildPoolResponse.ProtoReflect.Descriptor instead.
func (*RebuildPoolResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{23}
}

func (x *RebuildPoolResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type GetResourceStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	ResourceId int64  `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // 资源ID
	AreaType   int32  `protobuf:"varint,3,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
}

func (x *GetResourceStatRequest) Reset() {
	*x = GetResourceStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceStatRequest) ProtoMessage() {}

func (x *GetResourceStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceStatRequest.ProtoReflect.Descriptor instead.
func (*GetResourceStatRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetResourceStatRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetResourceStatRequest) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *GetResourceStatRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

type GetResourceStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Availables int32    `protobuf:"varint,2,opt,name=availables,proto3" json:"availables,omitempty"`
}

func (x *GetResourceStatResponse) Reset() {
	*x = GetResourceStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceStatResponse) ProtoMessage() {}

func (x *GetResourceStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceStatResponse.ProtoReflect.Descriptor instead.
func (*GetResourceStatResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetResourceStatResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetResourceStatResponse) GetAvailables() int32 {
	if x != nil {
		return x.Availables
	}
	return 0
}

type SearchPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string   `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	ResourceId int64    `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // 资源ID
	AreaType   int32    `protobuf:"varint,3,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Conditions []string `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Offset     int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Length     int32    `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	Order      string   `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"` // asc/desc
	Sortby     string   `protobuf:"bytes,8,opt,name=sortby,proto3" json:"sortby,omitempty"`
}

func (x *SearchPoolRequest) Reset() {
	*x = SearchPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPoolRequest) ProtoMessage() {}

func (x *SearchPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPoolRequest.ProtoReflect.Descriptor instead.
func (*SearchPoolRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{26}
}

func (x *SearchPoolRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *SearchPoolRequest) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *SearchPoolRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *SearchPoolRequest) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SearchPoolRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchPoolRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SearchPoolRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *SearchPoolRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

type PoolItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaType     int32                  `protobuf:"varint,1,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceId   int64                  `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	InstanceId   int64                  `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Mac          string                 `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Address      string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Flags        int64                  `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"`
	PoolSource   string                 `protobuf:"bytes,7,opt,name=pool_source,json=poolSource,proto3" json:"pool_source,omitempty"`
	PoolOrder    string                 `protobuf:"bytes,8,opt,name=pool_order,json=poolOrder,proto3" json:"pool_order,omitempty"`
	PoolStatus   int32                  `protobuf:"varint,9,opt,name=pool_status,json=poolStatus,proto3" json:"pool_status,omitempty"`
	AssignSource string                 `protobuf:"bytes,10,opt,name=assign_source,json=assignSource,proto3" json:"assign_source,omitempty"`
	AssignOrder  string                 `protobuf:"bytes,11,opt,name=assign_order,json=assignOrder,proto3" json:"assign_order,omitempty"`
	AssignParam  string                 `protobuf:"bytes,12,opt,name=assign_param,json=assignParam,proto3" json:"assign_param,omitempty"`
	AssignResult string                 `protobuf:"bytes,13,opt,name=assign_result,json=assignResult,proto3" json:"assign_result,omitempty"`
	AssignStatus int32                  `protobuf:"varint,14,opt,name=assign_status,json=assignStatus,proto3" json:"assign_status,omitempty"`
	CreateTime   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ModifyTime   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *PoolItem) Reset() {
	*x = PoolItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolItem) ProtoMessage() {}

func (x *PoolItem) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolItem.ProtoReflect.Descriptor instead.
func (*PoolItem) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{27}
}

func (x *PoolItem) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *PoolItem) GetResourceId() int64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *PoolItem) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *PoolItem) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *PoolItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PoolItem) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PoolItem) GetPoolSource() string {
	if x != nil {
		return x.PoolSource
	}
	return ""
}

func (x *PoolItem) GetPoolOrder() string {
	if x != nil {
		return x.PoolOrder
	}
	return ""
}

func (x *PoolItem) GetPoolStatus() int32 {
	if x != nil {
		return x.PoolStatus
	}
	return 0
}

func (x *PoolItem) GetAssignSource() string {
	if x != nil {
		return x.AssignSource
	}
	return ""
}

func (x *PoolItem) GetAssignOrder() string {
	if x != nil {
		return x.AssignOrder
	}
	return ""
}

func (x *PoolItem) GetAssignParam() string {
	if x != nil {
		return x.AssignParam
	}
	return ""
}

func (x *PoolItem) GetAssignResult() string {
	if x != nil {
		return x.AssignResult
	}
	return ""
}

func (x *PoolItem) GetAssignStatus() int32 {
	if x != nil {
		return x.AssignStatus
	}
	return 0
}

func (x *PoolItem) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PoolItem) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *PoolItem) GetModifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

type SearchPoolBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Lists []*PoolItem `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *SearchPoolBody) Reset() {
	*x = SearchPoolBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPoolBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPoolBody) ProtoMessage() {}

func (x *SearchPoolBody) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPoolBody.ProtoReflect.Descriptor instead.
func (*SearchPoolBody) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{28}
}

func (x *SearchPoolBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchPoolBody) GetLists() []*PoolItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

type SearchPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *CommRet        `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *SearchPoolBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SearchPoolResponse) Reset() {
	*x = SearchPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPoolResponse) ProtoMessage() {}

func (x *SearchPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPoolResponse.ProtoReflect.Descriptor instead.
func (*SearchPoolResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{29}
}

func (x *SearchPoolResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *SearchPoolResponse) GetBody() *SearchPoolBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ReleasePoolItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string          `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
	Source         string          `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                            // 来源
	InstanceId     int64           `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // 实例id
	AreaType       int32           `protobuf:"varint,4,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceConfig *ResourceConfig `protobuf:"bytes,5,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
}

func (x *ReleasePoolItemRequest) Reset() {
	*x = ReleasePoolItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePoolItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePoolItemRequest) ProtoMessage() {}

func (x *ReleasePoolItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePoolItemRequest.ProtoReflect.Descriptor instead.
func (*ReleasePoolItemRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{30}
}

func (x *ReleasePoolItemRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ReleasePoolItemRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ReleasePoolItemRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *ReleasePoolItemRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *ReleasePoolItemRequest) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

type ReleasePoolItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *ReleasePoolItemResponse) Reset() {
	*x = ReleasePoolItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePoolItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePoolItemResponse) ProtoMessage() {}

func (x *ReleasePoolItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePoolItemResponse.ProtoReflect.Descriptor instead.
func (*ReleasePoolItemResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{31}
}

func (x *ReleasePoolItemResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type NewResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string          `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
	AreaType       int32           `protobuf:"varint,2,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceConfig *ResourceConfig `protobuf:"bytes,3,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
}

func (x *NewResourceRequest) Reset() {
	*x = NewResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewResourceRequest) ProtoMessage() {}

func (x *NewResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewResourceRequest.ProtoReflect.Descriptor instead.
func (*NewResourceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{32}
}

func (x *NewResourceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *NewResourceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *NewResourceRequest) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

type NewResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *NewResourceResponse) Reset() {
	*x = NewResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewResourceResponse) ProtoMessage() {}

func (x *NewResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewResourceResponse.ProtoReflect.Descriptor instead.
func (*NewResourceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{33}
}

func (x *NewResourceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type UpdateResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId        string                  `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
	AreaType      int32                   `protobuf:"varint,2,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceId    *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Type          *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Specification *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=specification,proto3" json:"specification,omitempty"`
	Vlan          *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Mode          *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"`
	Capacity      *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Buffer        *wrapperspb.Int32Value  `protobuf:"bytes,10,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Init          *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=init,proto3" json:"init,omitempty"`
	Concurrent    *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	Priority      *wrapperspb.Int32Value  `protobuf:"bytes,13,opt,name=priority,proto3" json:"priority,omitempty"`
	Preemptable   *wrapperspb.Int32Value  `protobuf:"bytes,14,opt,name=preemptable,proto3" json:"preemptable,omitempty"`
	AssignConfig  *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=assign_config,json=assignConfig,proto3" json:"assign_config,omitempty"`
	Detail        *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=detail,proto3" json:"detail,omitempty"`
	State         *wrapperspb.Int32Value  `protobuf:"bytes,17,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdateResourceRequest) Reset() {
	*x = UpdateResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceRequest) ProtoMessage() {}

func (x *UpdateResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateResourceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateResourceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *UpdateResourceRequest) GetResourceId() *wrapperspb.Int64Value {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *UpdateResourceRequest) GetType() *wrapperspb.Int32Value {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UpdateResourceRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateResourceRequest) GetSpecification() *wrapperspb.Int64Value {
	if x != nil {
		return x.Specification
	}
	return nil
}

func (x *UpdateResourceRequest) GetVlan() *wrapperspb.Int32Value {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *UpdateResourceRequest) GetMode() *wrapperspb.Int64Value {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *UpdateResourceRequest) GetCapacity() *wrapperspb.Int32Value {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *UpdateResourceRequest) GetBuffer() *wrapperspb.Int32Value {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *UpdateResourceRequest) GetInit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *UpdateResourceRequest) GetConcurrent() *wrapperspb.Int32Value {
	if x != nil {
		return x.Concurrent
	}
	return nil
}

func (x *UpdateResourceRequest) GetPriority() *wrapperspb.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateResourceRequest) GetPreemptable() *wrapperspb.Int32Value {
	if x != nil {
		return x.Preemptable
	}
	return nil
}

func (x *UpdateResourceRequest) GetAssignConfig() *wrapperspb.StringValue {
	if x != nil {
		return x.AssignConfig
	}
	return nil
}

func (x *UpdateResourceRequest) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *UpdateResourceRequest) GetState() *wrapperspb.Int32Value {
	if x != nil {
		return x.State
	}
	return nil
}

type UpdateResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *CommRet `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *UpdateResourceResponse) Reset() {
	*x = UpdateResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceResponse) ProtoMessage() {}

func (x *UpdateResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateResourceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

type SearchResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string   `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
	AreaType   int32    `protobuf:"varint,2,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	Conditions []string `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Offset     int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Length     int32    `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Order      string   `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"` // asc/desc
	Sortby     string   `protobuf:"bytes,7,opt,name=sortby,proto3" json:"sortby,omitempty"`
}

func (x *SearchResourceRequest) Reset() {
	*x = SearchResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourceRequest) ProtoMessage() {}

func (x *SearchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourceRequest.ProtoReflect.Descriptor instead.
func (*SearchResourceRequest) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{36}
}

func (x *SearchResourceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *SearchResourceRequest) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *SearchResourceRequest) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SearchResourceRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchResourceRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SearchResourceRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *SearchResourceRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

type SearchResourceBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Lists []*ResourceConfig `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *SearchResourceBody) Reset() {
	*x = SearchResourceBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResourceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourceBody) ProtoMessage() {}

func (x *SearchResourceBody) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourceBody.ProtoReflect.Descriptor instead.
func (*SearchResourceBody) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{37}
}

func (x *SearchResourceBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchResourceBody) GetLists() []*ResourceConfig {
	if x != nil {
		return x.Lists
	}
	return nil
}

type SearchResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *CommRet            `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *SearchResourceBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SearchResourceResponse) Reset() {
	*x = SearchResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instance_scheduler_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourceResponse) ProtoMessage() {}

func (x *SearchResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instance_scheduler_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourceResponse.ProtoReflect.Descriptor instead.
func (*SearchResourceResponse) Descriptor() ([]byte, []int) {
	return file_instance_scheduler_service_proto_rawDescGZIP(), []int{38}
}

func (x *SearchResourceResponse) GetRet() *CommRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *SearchResourceResponse) GetBody() *SearchResourceBody {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_instance_scheduler_service_proto protoreflect.FileDescriptor

var file_instance_scheduler_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf6, 0x03, 0x0a, 0x15, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x6f,
	0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0xbc, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x74, 0x79, 0x75, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x70,
	0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x72, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x74, 0x79, 0x75, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x48, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x15,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xc2, 0x01, 0x0a,
	0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x45, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x13, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6f, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65,
	0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x62,
	0x79, 0x22, 0xf8, 0x04, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x36, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x17,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65,
	0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x44, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65,
	0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x93, 0x07, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x41, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x62, 0x79, 0x22, 0x64, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x38, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x2a,
	0xd1, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x65, 0x5f, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x07, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x12, 0x0a,
	0x05, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x13, 0x0a, 0x06, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x10, 0xfd, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x14, 0x0a, 0x07, 0x65, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x08, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xf9, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x65, 0x5f, 0x6e, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x97, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x2a, 0x60, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x12, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x10, 0x08, 0x2a, 0x3d, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0xe9, 0x07, 0x2a, 0x5c, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x76, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x10,
	0x64, 0x12, 0x0c, 0x0a, 0x07, 0x65, 0x76, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x10, 0xc8, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x65, 0x76, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xac, 0x02,
	0x12, 0x0e, 0x0a, 0x09, 0x65, 0x76, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0x90, 0x03,
	0x32, 0xf3, 0x12, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x62, 0x12, 0xbf, 0x01, 0x0a,
	0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x3a, 0x01, 0x2a,
	0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x0b, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x9f, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x25, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x8e,
	0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x9a, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x13, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x74, 0x79,
	0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x74, 0x79,
	0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x75, 0x78, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x75, 0x78, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0xa6, 0x01,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x74, 0x79, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x75, 0x78, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x76, 0x72, 0x76, 0x69, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instance_scheduler_service_proto_rawDescOnce sync.Once
	file_instance_scheduler_service_proto_rawDescData = file_instance_scheduler_service_proto_rawDesc
)

func file_instance_scheduler_service_proto_rawDescGZIP() []byte {
	file_instance_scheduler_service_proto_rawDescOnce.Do(func() {
		file_instance_scheduler_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_instance_scheduler_service_proto_rawDescData)
	})
	return file_instance_scheduler_service_proto_rawDescData
}

var file_instance_scheduler_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_instance_scheduler_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_instance_scheduler_service_proto_goTypes = []interface{}{
	(ErrorCode)(0),                       // 0: instance_scheduler.ErrorCode
	(Strategy)(0),                        // 1: instance_scheduler.Strategy
	(Mode)(0),                            // 2: instance_scheduler.Mode
	(InstanceStatus)(0),                  // 3: instance_scheduler.InstanceStatus
	(InstanceEvent)(0),                   // 4: instance_scheduler.InstanceEvent
	(*CommRet)(nil),                      // 5: instance_scheduler.CommRet
	(*NetInfo)(nil),                      // 6: instance_scheduler.NetInfo
	(*ResourceConfig)(nil),               // 7: instance_scheduler.ResourceConfig
	(*AssignInstanceRequest)(nil),        // 8: instance_scheduler.AssignInstanceRequest
	(*AssignInstanceResponse)(nil),       // 9: instance_scheduler.AssignInstanceResponse
	(*GetOrderRequest)(nil),              // 10: instance_scheduler.GetOrderRequest
	(*GetOrderResponse)(nil),             // 11: instance_scheduler.GetOrderResponse
	(*AssignCtyunInstanceRequest)(nil),   // 12: instance_scheduler.AssignCtyunInstanceRequest
	(*Status)(nil),                       // 13: instance_scheduler.Status
	(*Instance)(nil),                     // 14: instance_scheduler.Instance
	(*AssignCtyunInstanceResponse)(nil),  // 15: instance_scheduler.AssignCtyunInstanceResponse
	(*ReleaseCtyunInstanceRequest)(nil),  // 16: instance_scheduler.ReleaseCtyunInstanceRequest
	(*ReleaseCtyunInstanceResponse)(nil), // 17: instance_scheduler.ReleaseCtyunInstanceResponse
	(*QueryCtyunInstanceRequest)(nil),    // 18: instance_scheduler.QueryCtyunInstanceRequest
	(*InstanceList)(nil),                 // 19: instance_scheduler.InstanceList
	(*QueryCtyunInstanceResponse)(nil),   // 20: instance_scheduler.QueryCtyunInstanceResponse
	(*ReleaseInstanceRequest)(nil),       // 21: instance_scheduler.ReleaseInstanceRequest
	(*ReleaseInstanceResponse)(nil),      // 22: instance_scheduler.ReleaseInstanceResponse
	(*InstanceStatusRequest)(nil),        // 23: instance_scheduler.InstanceStatusRequest
	(*InstanceStatusResponse)(nil),       // 24: instance_scheduler.InstanceStatusResponse
	(*LockInstanceRequest)(nil),          // 25: instance_scheduler.LockInstanceRequest
	(*LockInstanceResponse)(nil),         // 26: instance_scheduler.LockInstanceResponse
	(*RebuildPoolRequest)(nil),           // 27: instance_scheduler.RebuildPoolRequest
	(*RebuildPoolResponse)(nil),          // 28: instance_scheduler.RebuildPoolResponse
	(*GetResourceStatRequest)(nil),       // 29: instance_scheduler.GetResourceStatRequest
	(*GetResourceStatResponse)(nil),      // 30: instance_scheduler.GetResourceStatResponse
	(*SearchPoolRequest)(nil),            // 31: instance_scheduler.SearchPoolRequest
	(*PoolItem)(nil),                     // 32: instance_scheduler.PoolItem
	(*SearchPoolBody)(nil),               // 33: instance_scheduler.SearchPoolBody
	(*SearchPoolResponse)(nil),           // 34: instance_scheduler.SearchPoolResponse
	(*ReleasePoolItemRequest)(nil),       // 35: instance_scheduler.ReleasePoolItemRequest
	(*ReleasePoolItemResponse)(nil),      // 36: instance_scheduler.ReleasePoolItemResponse
	(*NewResourceRequest)(nil),           // 37: instance_scheduler.NewResourceRequest
	(*NewResourceResponse)(nil),          // 38: instance_scheduler.NewResourceResponse
	(*UpdateResourceRequest)(nil),        // 39: instance_scheduler.UpdateResourceRequest
	(*UpdateResourceResponse)(nil),       // 40: instance_scheduler.UpdateResourceResponse
	(*SearchResourceRequest)(nil),        // 41: instance_scheduler.SearchResourceRequest
	(*SearchResourceBody)(nil),           // 42: instance_scheduler.SearchResourceBody
	(*SearchResourceResponse)(nil),       // 43: instance_scheduler.SearchResourceResponse
	(*timestamppb.Timestamp)(nil),        // 44: google.protobuf.Timestamp
	(*wrapperspb.Int64Value)(nil),        // 45: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),        // 46: google.protobuf.Int32Value
	(*wrapperspb.StringValue)(nil),       // 47: google.protobuf.StringValue
}
var file_instance_scheduler_service_proto_depIdxs = []int32{
	1,  // 0: instance_scheduler.AssignInstanceRequest.strategy:type_name -> instance_scheduler.Strategy
	6,  // 1: instance_scheduler.AssignInstanceRequest.net_info:type_name -> instance_scheduler.NetInfo
	7,  // 2: instance_scheduler.AssignInstanceRequest.resource_config:type_name -> instance_scheduler.ResourceConfig
	5,  // 3: instance_scheduler.AssignInstanceResponse.ret:type_name -> instance_scheduler.CommRet
	5,  // 4: instance_scheduler.GetOrderResponse.ret:type_name -> instance_scheduler.CommRet
	13, // 5: instance_scheduler.AssignCtyunInstanceResponse.status:type_name -> instance_scheduler.Status
	14, // 6: instance_scheduler.ReleaseCtyunInstanceRequest.instances:type_name -> instance_scheduler.Instance
	13, // 7: instance_scheduler.ReleaseCtyunInstanceResponse.status:type_name -> instance_scheduler.Status
	13, // 8: instance_scheduler.QueryCtyunInstanceResponse.status:type_name -> instance_scheduler.Status
	19, // 9: instance_scheduler.QueryCtyunInstanceResponse.lists:type_name -> instance_scheduler.InstanceList
	7,  // 10: instance_scheduler.ReleaseInstanceRequest.resource_config:type_name -> instance_scheduler.ResourceConfig
	5,  // 11: instance_scheduler.ReleaseInstanceResponse.ret:type_name -> instance_scheduler.CommRet
	5,  // 12: instance_scheduler.InstanceStatusResponse.ret:type_name -> instance_scheduler.CommRet
	5,  // 13: instance_scheduler.LockInstanceResponse.ret:type_name -> instance_scheduler.CommRet
	5,  // 14: instance_scheduler.RebuildPoolResponse.ret:type_name -> instance_scheduler.CommRet
	5,  // 15: instance_scheduler.GetResourceStatResponse.ret:type_name -> instance_scheduler.CommRet
	44, // 16: instance_scheduler.PoolItem.create_time:type_name -> google.protobuf.Timestamp
	44, // 17: instance_scheduler.PoolItem.update_time:type_name -> google.protobuf.Timestamp
	44, // 18: instance_scheduler.PoolItem.modify_time:type_name -> google.protobuf.Timestamp
	32, // 19: instance_scheduler.SearchPoolBody.lists:type_name -> instance_scheduler.PoolItem
	5,  // 20: instance_scheduler.SearchPoolResponse.ret:type_name -> instance_scheduler.CommRet
	33, // 21: instance_scheduler.SearchPoolResponse.body:type_name -> instance_scheduler.SearchPoolBody
	7,  // 22: instance_scheduler.ReleasePoolItemRequest.resource_config:type_name -> instance_scheduler.ResourceConfig
	5,  // 23: instance_scheduler.ReleasePoolItemResponse.ret:type_name -> instance_scheduler.CommRet
	7,  // 24: instance_scheduler.NewResourceRequest.resource_config:type_name -> instance_scheduler.ResourceConfig
	5,  // 25: instance_scheduler.NewResourceResponse.ret:type_name -> instance_scheduler.CommRet
	45, // 26: instance_scheduler.UpdateResourceRequest.resource_id:type_name -> google.protobuf.Int64Value
	46, // 27: instance_scheduler.UpdateResourceRequest.type:type_name -> google.protobuf.Int32Value
	47, // 28: instance_scheduler.UpdateResourceRequest.name:type_name -> google.protobuf.StringValue
	45, // 29: instance_scheduler.UpdateResourceRequest.specification:type_name -> google.protobuf.Int64Value
	46, // 30: instance_scheduler.UpdateResourceRequest.vlan:type_name -> google.protobuf.Int32Value
	45, // 31: instance_scheduler.UpdateResourceRequest.mode:type_name -> google.protobuf.Int64Value
	46, // 32: instance_scheduler.UpdateResourceRequest.capacity:type_name -> google.protobuf.Int32Value
	46, // 33: instance_scheduler.UpdateResourceRequest.buffer:type_name -> google.protobuf.Int32Value
	46, // 34: instance_scheduler.UpdateResourceRequest.init:type_name -> google.protobuf.Int32Value
	46, // 35: instance_scheduler.UpdateResourceRequest.concurrent:type_name -> google.protobuf.Int32Value
	46, // 36: instance_scheduler.UpdateResourceRequest.priority:type_name -> google.protobuf.Int32Value
	46, // 37: instance_scheduler.UpdateResourceRequest.preemptable:type_name -> google.protobuf.Int32Value
	47, // 38: instance_scheduler.UpdateResourceRequest.assign_config:type_name -> google.protobuf.StringValue
	47, // 39: instance_scheduler.UpdateResourceRequest.detail:type_name -> google.protobuf.StringValue
	46, // 40: instance_scheduler.UpdateResourceRequest.state:type_name -> google.protobuf.Int32Value
	5,  // 41: instance_scheduler.UpdateResourceResponse.ret:type_name -> instance_scheduler.CommRet
	7,  // 42: instance_scheduler.SearchResourceBody.lists:type_name -> instance_scheduler.ResourceConfig
	5,  // 43: instance_scheduler.SearchResourceResponse.ret:type_name -> instance_scheduler.CommRet
	42, // 44: instance_scheduler.SearchResourceResponse.body:type_name -> instance_scheduler.SearchResourceBody
	8,  // 45: instance_scheduler.InstanceScheduler.AssignInstance:input_type -> instance_scheduler.AssignInstanceRequest
	10, // 46: instance_scheduler.InstanceScheduler.GetOrder:input_type -> instance_scheduler.GetOrderRequest
	29, // 47: instance_scheduler.InstanceScheduler.GetResourceStat:input_type -> instance_scheduler.GetResourceStatRequest
	21, // 48: instance_scheduler.InstanceScheduler.ReleaseInstance:input_type -> instance_scheduler.ReleaseInstanceRequest
	23, // 49: instance_scheduler.InstanceScheduler.InstanceStatusCallback:input_type -> instance_scheduler.InstanceStatusRequest
	25, // 50: instance_scheduler.InstanceScheduler.LockInstance:input_type -> instance_scheduler.LockInstanceRequest
	27, // 51: instance_scheduler.InstanceScheduler.RebuildPool:input_type -> instance_scheduler.RebuildPoolRequest
	35, // 52: instance_scheduler.InstanceScheduler.ReleasePoolItem:input_type -> instance_scheduler.ReleasePoolItemRequest
	31, // 53: instance_scheduler.InstanceScheduler.SearchPool:input_type -> instance_scheduler.SearchPoolRequest
	37, // 54: instance_scheduler.InstanceScheduler.NewResource:input_type -> instance_scheduler.NewResourceRequest
	39, // 55: instance_scheduler.InstanceScheduler.UpdateResource:input_type -> instance_scheduler.UpdateResourceRequest
	41, // 56: instance_scheduler.InstanceScheduler.SearchResource:input_type -> instance_scheduler.SearchResourceRequest
	12, // 57: instance_scheduler.InstanceScheduler.AssignCtyunInstance:input_type -> instance_scheduler.AssignCtyunInstanceRequest
	16, // 58: instance_scheduler.InstanceScheduler.ReleaseCtyunInstance:input_type -> instance_scheduler.ReleaseCtyunInstanceRequest
	18, // 59: instance_scheduler.InstanceScheduler.QueryCtyunInstances:input_type -> instance_scheduler.QueryCtyunInstanceRequest
	9,  // 60: instance_scheduler.InstanceScheduler.AssignInstance:output_type -> instance_scheduler.AssignInstanceResponse
	11, // 61: instance_scheduler.InstanceScheduler.GetOrder:output_type -> instance_scheduler.GetOrderResponse
	30, // 62: instance_scheduler.InstanceScheduler.GetResourceStat:output_type -> instance_scheduler.GetResourceStatResponse
	22, // 63: instance_scheduler.InstanceScheduler.ReleaseInstance:output_type -> instance_scheduler.ReleaseInstanceResponse
	24, // 64: instance_scheduler.InstanceScheduler.InstanceStatusCallback:output_type -> instance_scheduler.InstanceStatusResponse
	26, // 65: instance_scheduler.InstanceScheduler.LockInstance:output_type -> instance_scheduler.LockInstanceResponse
	28, // 66: instance_scheduler.InstanceScheduler.RebuildPool:output_type -> instance_scheduler.RebuildPoolResponse
	36, // 67: instance_scheduler.InstanceScheduler.ReleasePoolItem:output_type -> instance_scheduler.ReleasePoolItemResponse
	34, // 68: instance_scheduler.InstanceScheduler.SearchPool:output_type -> instance_scheduler.SearchPoolResponse
	38, // 69: instance_scheduler.InstanceScheduler.NewResource:output_type -> instance_scheduler.NewResourceResponse
	40, // 70: instance_scheduler.InstanceScheduler.UpdateResource:output_type -> instance_scheduler.UpdateResourceResponse
	43, // 71: instance_scheduler.InstanceScheduler.SearchResource:output_type -> instance_scheduler.SearchResourceResponse
	15, // 72: instance_scheduler.InstanceScheduler.AssignCtyunInstance:output_type -> instance_scheduler.AssignCtyunInstanceResponse
	17, // 73: instance_scheduler.InstanceScheduler.ReleaseCtyunInstance:output_type -> instance_scheduler.ReleaseCtyunInstanceResponse
	20, // 74: instance_scheduler.InstanceScheduler.QueryCtyunInstances:output_type -> instance_scheduler.QueryCtyunInstanceResponse
	60, // [60:75] is the sub-list for method output_type
	45, // [45:60] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_instance_scheduler_service_proto_init() }
func file_instance_scheduler_service_proto_init() {
	if File_instance_scheduler_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instance_scheduler_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignCtyunInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignCtyunInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCtyunInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCtyunInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCtyunInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCtyunInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoolBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePoolItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePoolItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResourceBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instance_scheduler_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instance_scheduler_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instance_scheduler_service_proto_goTypes,
		DependencyIndexes: file_instance_scheduler_service_proto_depIdxs,
		EnumInfos:         file_instance_scheduler_service_proto_enumTypes,
		MessageInfos:      file_instance_scheduler_service_proto_msgTypes,
	}.Build()
	File_instance_scheduler_service_proto = out.File
	file_instance_scheduler_service_proto_rawDesc = nil
	file_instance_scheduler_service_proto_goTypes = nil
	file_instance_scheduler_service_proto_depIdxs = nil
}
