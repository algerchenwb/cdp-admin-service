// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: image_service.proto

package image_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_UnStart TaskStatus = 0 // 未启动（可能是机器状态不符合升级条件等）
	TaskStatus_Process TaskStatus = 1 // 进行中
	TaskStatus_Succ    TaskStatus = 2 // 已完成:成功
	TaskStatus_Failed  TaskStatus = 3 // 已完成:失败
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "UnStart",
		1: "Process",
		2: "Succ",
		3: "Failed",
	}
	TaskStatus_value = map[string]int32{
		"UnStart": 0,
		"Process": 1,
		"Succ":    2,
		"Failed":  3,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_image_service_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_image_service_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{0}
}

type Resource int32

const (
	Resource_ManagerConsole Resource = 0 // 管理台
	Resource_GameDeployment Resource = 1 // 应用分发
)

// Enum value maps for Resource.
var (
	Resource_name = map[int32]string{
		0: "ManagerConsole",
		1: "GameDeployment",
	}
	Resource_value = map[string]int32{
		"ManagerConsole": 0,
		"GameDeployment": 1,
	}
)

func (x Resource) Enum() *Resource {
	p := new(Resource)
	*p = x
	return p
}

func (x Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_image_service_proto_enumTypes[1].Descriptor()
}

func (Resource) Type() protoreflect.EnumType {
	return &file_image_service_proto_enumTypes[1]
}

func (x Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Resource.Descriptor instead.
func (Resource) EnumDescriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{1}
}

type RecoveType int32

const (
	RecoveType_Recove            RecoveType = 0 // 默认的恢复镜像流程
	RecoveType_BOOT_IMAGE        RecoveType = 1 // 开机流程中,调用系统恢复镜像
	RecoveType_RECOVE_BOOT_IAMGE RecoveType = 2 // 升级开机流程中的镜像(升级到指定镜像版本)
)

// Enum value maps for RecoveType.
var (
	RecoveType_name = map[int32]string{
		0: "Recove",
		1: "BOOT_IMAGE",
		2: "RECOVE_BOOT_IAMGE",
	}
	RecoveType_value = map[string]int32{
		"Recove":            0,
		"BOOT_IMAGE":        1,
		"RECOVE_BOOT_IAMGE": 2,
	}
)

func (x RecoveType) Enum() *RecoveType {
	p := new(RecoveType)
	*p = x
	return p
}

func (x RecoveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoveType) Descriptor() protoreflect.EnumDescriptor {
	return file_image_service_proto_enumTypes[2].Descriptor()
}

func (RecoveType) Type() protoreflect.EnumType {
	return &file_image_service_proto_enumTypes[2]
}

func (x RecoveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecoveType.Descriptor instead.
func (RecoveType) EnumDescriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{2}
}

type RspInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RspInfo) Reset() {
	*x = RspInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspInfo) ProtoMessage() {}

func (x *RspInfo) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspInfo.ProtoReflect.Descriptor instead.
func (*RspInfo) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{0}
}

func (x *RspInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 传入0；不设置
type SetGameVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId          string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	NextDataVersion int32  `protobuf:"varint,3,opt,name=next_data_version,json=nextDataVersion,proto3" json:"next_data_version,omitempty"`
	Vmids           string `protobuf:"bytes,4,opt,name=vmids,proto3" json:"vmids,omitempty"` // 格式:2,3,4,5,
}

func (x *SetGameVersionRequest) Reset() {
	*x = SetGameVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGameVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGameVersionRequest) ProtoMessage() {}

func (x *SetGameVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGameVersionRequest.ProtoReflect.Descriptor instead.
func (*SetGameVersionRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{1}
}

func (x *SetGameVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *SetGameVersionRequest) GetNextDataVersion() int32 {
	if x != nil {
		return x.NextDataVersion
	}
	return 0
}

func (x *SetGameVersionRequest) GetVmids() string {
	if x != nil {
		return x.Vmids
	}
	return ""
}

type SetGameVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *SetGameVersionResponse) Reset() {
	*x = SetGameVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGameVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGameVersionResponse) ProtoMessage() {}

func (x *SetGameVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGameVersionResponse.ProtoReflect.Descriptor instead.
func (*SetGameVersionResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{2}
}

func (x *SetGameVersionResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

type SetGameVersionHttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *RspInfo                `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *SetGameVersionResponse `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SetGameVersionHttpResponse) Reset() {
	*x = SetGameVersionHttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGameVersionHttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGameVersionHttpResponse) ProtoMessage() {}

func (x *SetGameVersionHttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGameVersionHttpResponse.ProtoReflect.Descriptor instead.
func (*SetGameVersionHttpResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetGameVersionHttpResponse) GetRet() *RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *SetGameVersionHttpResponse) GetBody() *SetGameVersionResponse {
	if x != nil {
		return x.Body
	}
	return nil
}

type TaskProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      TaskStatus `protobuf:"varint,1,opt,name=status,proto3,enum=image_service.TaskStatus" json:"status,omitempty"` // 任务状态
	Process     int32      `protobuf:"varint,2,opt,name=process,proto3" json:"process,omitempty"`                             // 进度 1-100
	ProcessInfo string     `protobuf:"bytes,3,opt,name=process_info,json=processInfo,proto3" json:"process_info,omitempty"`   // 进度信息
}

func (x *TaskProcess) Reset() {
	*x = TaskProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProcess) ProtoMessage() {}

func (x *TaskProcess) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProcess.ProtoReflect.Descriptor instead.
func (*TaskProcess) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{4}
}

func (x *TaskProcess) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_UnStart
}

func (x *TaskProcess) GetProcess() int32 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *TaskProcess) GetProcessInfo() string {
	if x != nil {
		return x.ProcessInfo
	}
	return ""
}

type GetTaskProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	TaskIds  []int32  `protobuf:"varint,2,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`         // 传入-1的话代表获取所有的vmid进度
	Resource Resource `protobuf:"varint,3,opt,name=resource,proto3,enum=image_service.Resource" json:"resource,omitempty"` // 请求来源
}

func (x *GetTaskProcessRequest) Reset() {
	*x = GetTaskProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProcessRequest) ProtoMessage() {}

func (x *GetTaskProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProcessRequest.ProtoReflect.Descriptor instead.
func (*GetTaskProcessRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskProcessRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetTaskProcessRequest) GetTaskIds() []int32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetTaskProcessRequest) GetResource() Resource {
	if x != nil {
		return x.Resource
	}
	return Resource_ManagerConsole
}

type GetTaskProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks map[int32]*TaskProcess `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskProcessResponse) Reset() {
	*x = GetTaskProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProcessResponse) ProtoMessage() {}

func (x *GetTaskProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProcessResponse.ProtoReflect.Descriptor instead.
func (*GetTaskProcessResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTaskProcessResponse) GetTasks() map[int32]*TaskProcess {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetTaskProcessHttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *RspInfo                `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *GetTaskProcessResponse `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GetTaskProcessHttpResponse) Reset() {
	*x = GetTaskProcessHttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProcessHttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProcessHttpResponse) ProtoMessage() {}

func (x *GetTaskProcessHttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProcessHttpResponse.ProtoReflect.Descriptor instead.
func (*GetTaskProcessHttpResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetTaskProcessHttpResponse) GetRet() *RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetTaskProcessHttpResponse) GetBody() *GetTaskProcessResponse {
	if x != nil {
		return x.Body
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string  `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Vmids  []int32 `protobuf:"varint,2,rep,packed,name=vmids,proto3" json:"vmids,omitempty"`
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetVersionRequest) GetVmids() []int32 {
	if x != nil {
		return x.Vmids
	}
	return nil
}

type VmVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmid            int32 `protobuf:"varint,1,opt,name=vmid,proto3" json:"vmid,omitempty"`
	OsVersion       int32 `protobuf:"varint,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	DataVersion     int32 `protobuf:"varint,3,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	NextOsVersion   int32 `protobuf:"varint,4,opt,name=next_os_version,json=nextOsVersion,proto3" json:"next_os_version,omitempty"`
	NextDataVersion int32 `protobuf:"varint,5,opt,name=next_data_version,json=nextDataVersion,proto3" json:"next_data_version,omitempty"`
}

func (x *VmVersion) Reset() {
	*x = VmVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmVersion) ProtoMessage() {}

func (x *VmVersion) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmVersion.ProtoReflect.Descriptor instead.
func (*VmVersion) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{9}
}

func (x *VmVersion) GetVmid() int32 {
	if x != nil {
		return x.Vmid
	}
	return 0
}

func (x *VmVersion) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

func (x *VmVersion) GetDataVersion() int32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *VmVersion) GetNextOsVersion() int32 {
	if x != nil {
		return x.NextOsVersion
	}
	return 0
}

func (x *VmVersion) GetNextDataVersion() int32 {
	if x != nil {
		return x.NextDataVersion
	}
	return 0
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Versions []*VmVersion `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetVersionResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetVersionResponse) GetVersions() []*VmVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

// 传入0；不设置
type PostVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId          string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	NextOsVersion   int32  `protobuf:"varint,2,opt,name=next_os_version,json=nextOsVersion,proto3" json:"next_os_version,omitempty"`
	NextDataVersion int32  `protobuf:"varint,3,opt,name=next_data_version,json=nextDataVersion,proto3" json:"next_data_version,omitempty"`
	Vmids           string `protobuf:"bytes,4,opt,name=vmids,proto3" json:"vmids,omitempty"` // 格式:2,3,4,5,
}

func (x *PostVersionRequest) Reset() {
	*x = PostVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVersionRequest) ProtoMessage() {}

func (x *PostVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVersionRequest.ProtoReflect.Descriptor instead.
func (*PostVersionRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{11}
}

func (x *PostVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *PostVersionRequest) GetNextOsVersion() int32 {
	if x != nil {
		return x.NextOsVersion
	}
	return 0
}

func (x *PostVersionRequest) GetNextDataVersion() int32 {
	if x != nil {
		return x.NextDataVersion
	}
	return 0
}

func (x *PostVersionRequest) GetVmids() string {
	if x != nil {
		return x.Vmids
	}
	return ""
}

type PostVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *PostVersionResponse) Reset() {
	*x = PostVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVersionResponse) ProtoMessage() {}

func (x *PostVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVersionResponse.ProtoReflect.Descriptor instead.
func (*PostVersionResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{12}
}

func (x *PostVersionResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

type VMTaskMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Title      string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtasks   []*UpgradeSubtask      `protobuf:"bytes,3,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
	Operator   string                 `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *VMTaskMsg) Reset() {
	*x = VMTaskMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMTaskMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMTaskMsg) ProtoMessage() {}

func (x *VMTaskMsg) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMTaskMsg.ProtoReflect.Descriptor instead.
func (*VMTaskMsg) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{13}
}

func (x *VMTaskMsg) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *VMTaskMsg) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VMTaskMsg) GetSubtasks() []*UpgradeSubtask {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

func (x *VMTaskMsg) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *VMTaskMsg) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpgradeSubtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             int32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	AreaType           int32 `protobuf:"varint,2,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	SubAreaType        int32 `protobuf:"varint,3,opt,name=sub_area_type,json=subAreaType,proto3" json:"sub_area_type,omitempty"`
	Hmid               int32 `protobuf:"varint,4,opt,name=hmid,proto3" json:"hmid,omitempty"`
	Vmid               int32 `protobuf:"varint,5,opt,name=vmid,proto3" json:"vmid,omitempty"`
	OsVersion          int32 `protobuf:"varint,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	GameVersion        int32 `protobuf:"varint,7,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	IgnoreAssignStatus bool  `protobuf:"varint,8,opt,name=ignore_assign_status,json=ignoreAssignStatus,proto3" json:"ignore_assign_status,omitempty"`
}

func (x *UpgradeSubtask) Reset() {
	*x = UpgradeSubtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeSubtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeSubtask) ProtoMessage() {}

func (x *UpgradeSubtask) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeSubtask.ProtoReflect.Descriptor instead.
func (*UpgradeSubtask) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpgradeSubtask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *UpgradeSubtask) GetAreaType() int32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *UpgradeSubtask) GetSubAreaType() int32 {
	if x != nil {
		return x.SubAreaType
	}
	return 0
}

func (x *UpgradeSubtask) GetHmid() int32 {
	if x != nil {
		return x.Hmid
	}
	return 0
}

func (x *UpgradeSubtask) GetVmid() int32 {
	if x != nil {
		return x.Vmid
	}
	return 0
}

func (x *UpgradeSubtask) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

func (x *UpgradeSubtask) GetGameVersion() int32 {
	if x != nil {
		return x.GameVersion
	}
	return 0
}

func (x *UpgradeSubtask) GetIgnoreAssignStatus() bool {
	if x != nil {
		return x.IgnoreAssignStatus
	}
	return false
}

type RecoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string     `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`    // 请求流水ID
	TaskMsg *VMTaskMsg `protobuf:"bytes,2,opt,name=task_msg,json=taskMsg,proto3" json:"task_msg,omitempty"` // 恢复镜像的task信息
	Type    RecoveType `protobuf:"varint,3,opt,name=type,proto3,enum=image_service.RecoveType" json:"type,omitempty"`
}

func (x *RecoveRequest) Reset() {
	*x = RecoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveRequest) ProtoMessage() {}

func (x *RecoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveRequest.ProtoReflect.Descriptor instead.
func (*RecoveRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{15}
}

func (x *RecoveRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *RecoveRequest) GetTaskMsg() *VMTaskMsg {
	if x != nil {
		return x.TaskMsg
	}
	return nil
}

func (x *RecoveRequest) GetType() RecoveType {
	if x != nil {
		return x.Type
	}
	return RecoveType_Recove
}

type RecoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 回包信息, 恢复镜像会直接回包，然后后台慢慢处理
}

func (x *RecoveResponse) Reset() {
	*x = RecoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveResponse) ProtoMessage() {}

func (x *RecoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveResponse.ProtoReflect.Descriptor instead.
func (*RecoveResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecoveResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

type MakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 请求流水ID
	Vmid       int32  `protobuf:"varint,2,opt,name=vmid,proto3" json:"vmid,omitempty"`
	OldVersion string `protobuf:"bytes,3,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	NewVersion string `protobuf:"bytes,4,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	Compress   bool   `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"` // 是否压缩
}

func (x *MakeRequest) Reset() {
	*x = MakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeRequest) ProtoMessage() {}

func (x *MakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeRequest.ProtoReflect.Descriptor instead.
func (*MakeRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{17}
}

func (x *MakeRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *MakeRequest) GetVmid() int32 {
	if x != nil {
		return x.Vmid
	}
	return 0
}

func (x *MakeRequest) GetOldVersion() string {
	if x != nil {
		return x.OldVersion
	}
	return ""
}

func (x *MakeRequest) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *MakeRequest) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

type MakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` //
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`  // 镜像制作完生成的url路径，可以直接wget拿到
}

func (x *MakeResponse) Reset() {
	*x = MakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeResponse) ProtoMessage() {}

func (x *MakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeResponse.ProtoReflect.Descriptor instead.
func (*MakeResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{18}
}

func (x *MakeResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *MakeResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 恢复镜像请求
type ImageRecoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 实例的mac地址(-分割)
	InsMac string `protobuf:"bytes,2,opt,name=ins_mac,json=insMac,proto3" json:"ins_mac,omitempty"`
	// 镜像版本
	OsVersion string `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// 游戏版本
	GameVersion string `protobuf:"bytes,4,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
}

func (x *ImageRecoverRequest) Reset() {
	*x = ImageRecoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRecoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRecoverRequest) ProtoMessage() {}

func (x *ImageRecoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRecoverRequest.ProtoReflect.Descriptor instead.
func (*ImageRecoverRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{19}
}

func (x *ImageRecoverRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageRecoverRequest) GetInsMac() string {
	if x != nil {
		return x.InsMac
	}
	return ""
}

func (x *ImageRecoverRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *ImageRecoverRequest) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回值
	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	// 返回信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{20}
}

func (x *Status) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Status) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 恢复镜像结果
type ImageRecoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 返回结果信息
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ImageRecoverResponse) Reset() {
	*x = ImageRecoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRecoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRecoverResponse) ProtoMessage() {}

func (x *ImageRecoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRecoverResponse.ProtoReflect.Descriptor instead.
func (*ImageRecoverResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{21}
}

func (x *ImageRecoverResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageRecoverResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// 镜像制作请求
type ImageMakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 实例的mac地址(-分割)
	InsMac string `protobuf:"bytes,2,opt,name=ins_mac,json=insMac,proto3" json:"ins_mac,omitempty"`
	// 旧版本
	OldVersion string `protobuf:"bytes,3,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	// 新版本
	NewVersion string `protobuf:"bytes,4,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	// 是否压缩
	Compress bool `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`
}

func (x *ImageMakeRequest) Reset() {
	*x = ImageMakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMakeRequest) ProtoMessage() {}

func (x *ImageMakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMakeRequest.ProtoReflect.Descriptor instead.
func (*ImageMakeRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{22}
}

func (x *ImageMakeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageMakeRequest) GetInsMac() string {
	if x != nil {
		return x.InsMac
	}
	return ""
}

func (x *ImageMakeRequest) GetOldVersion() string {
	if x != nil {
		return x.OldVersion
	}
	return ""
}

func (x *ImageMakeRequest) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *ImageMakeRequest) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

// 镜像制作回包
type ImageMakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 返回结果信息
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 镜像url
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageMakeResponse) Reset() {
	*x = ImageMakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMakeResponse) ProtoMessage() {}

func (x *ImageMakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMakeResponse.ProtoReflect.Descriptor instead.
func (*ImageMakeResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{23}
}

func (x *ImageMakeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageMakeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImageMakeResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 传入0；不设置
type ImageVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 下一个生效系统版本号，不设置的话置为0
	NextOsVersion string `protobuf:"bytes,2,opt,name=next_os_version,json=nextOsVersion,proto3" json:"next_os_version,omitempty"`
	// 下一个生效游戏版本号，不设置的话置为0
	NextDataVersion string `protobuf:"bytes,3,opt,name=next_data_version,json=nextDataVersion,proto3" json:"next_data_version,omitempty"`
	// 需要设置的实例mac
	Macs []string `protobuf:"bytes,4,rep,name=macs,proto3" json:"macs,omitempty"`
}

func (x *ImageVersionRequest) Reset() {
	*x = ImageVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageVersionRequest) ProtoMessage() {}

func (x *ImageVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageVersionRequest.ProtoReflect.Descriptor instead.
func (*ImageVersionRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{24}
}

func (x *ImageVersionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageVersionRequest) GetNextOsVersion() string {
	if x != nil {
		return x.NextOsVersion
	}
	return ""
}

func (x *ImageVersionRequest) GetNextDataVersion() string {
	if x != nil {
		return x.NextDataVersion
	}
	return ""
}

func (x *ImageVersionRequest) GetMacs() []string {
	if x != nil {
		return x.Macs
	}
	return nil
}

type ImageVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 返回结果信息
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ImageVersionResponse) Reset() {
	*x = ImageVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageVersionResponse) ProtoMessage() {}

func (x *ImageVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageVersionResponse.ProtoReflect.Descriptor instead.
func (*ImageVersionResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{25}
}

func (x *ImageVersionResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageVersionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// 传入0；不设置
type ImageGetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 需要设置的实例mac
	Macs []string `protobuf:"bytes,2,rep,name=macs,proto3" json:"macs,omitempty"`
}

func (x *ImageGetVersionRequest) Reset() {
	*x = ImageGetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageGetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageGetVersionRequest) ProtoMessage() {}

func (x *ImageGetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageGetVersionRequest.ProtoReflect.Descriptor instead.
func (*ImageGetVersionRequest) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{26}
}

func (x *ImageGetVersionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageGetVersionRequest) GetMacs() []string {
	if x != nil {
		return x.Macs
	}
	return nil
}

type ImageVmVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac             string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	OsVersion       string `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"` // 当前版本号
	DataVersion     string `protobuf:"bytes,3,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	NextOsVersion   string `protobuf:"bytes,4,opt,name=next_os_version,json=nextOsVersion,proto3" json:"next_os_version,omitempty"` // 下一个版本号
	NextDataVersion string `protobuf:"bytes,5,opt,name=next_data_version,json=nextDataVersion,proto3" json:"next_data_version,omitempty"`
}

func (x *ImageVmVersion) Reset() {
	*x = ImageVmVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageVmVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageVmVersion) ProtoMessage() {}

func (x *ImageVmVersion) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageVmVersion.ProtoReflect.Descriptor instead.
func (*ImageVmVersion) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{27}
}

func (x *ImageVmVersion) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *ImageVmVersion) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *ImageVmVersion) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *ImageVmVersion) GetNextOsVersion() string {
	if x != nil {
		return x.NextOsVersion
	}
	return ""
}

func (x *ImageVmVersion) GetNextDataVersion() string {
	if x != nil {
		return x.NextDataVersion
	}
	return ""
}

type ImageGetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的标识
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 返回结果信息
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 返回结果信息
	Versions []*ImageVmVersion `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ImageGetVersionResponse) Reset() {
	*x = ImageGetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageGetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageGetVersionResponse) ProtoMessage() {}

func (x *ImageGetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageGetVersionResponse.ProtoReflect.Descriptor instead.
func (*ImageGetVersionResponse) Descriptor() ([]byte, []int) {
	return file_image_service_proto_rawDescGZIP(), []int{28}
}

func (x *ImageGetVersionResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImageGetVersionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImageGetVersionResponse) GetVersions() []*ImageVmVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

var File_image_service_proto protoreflect.FileDescriptor

var file_image_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x72, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x7d, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x54, 0x0a,
	0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x09,
	0x56, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6d, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x13, 0x50,
	0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x56, 0x4d, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x4d, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x0c,
	0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x8f, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x5f, 0x6d,
	0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x4d, 0x61, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x64, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73,
	0x4d, 0x61, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x73, 0x0a, 0x11, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x63, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x16, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x56, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x3c, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x75, 0x63, 0x63, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x49, 0x41, 0x4d, 0x47, 0x45, 0x10, 0x02, 0x32, 0xe2, 0x05, 0x0a, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x61, 0x0a, 0x04, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x7d, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x8e, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x65, 0x74, 0x67, 0x61, 0x6d, 0x67, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x8a, 0x04, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x73, 0x73, 0x12, 0x7e, 0x0a,
	0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01,
	0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x2f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x72, 0x0a,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x61, 0x6b,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x72, 0x76, 0x69, 0x75, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_image_service_proto_rawDescOnce sync.Once
	file_image_service_proto_rawDescData = file_image_service_proto_rawDesc
)

func file_image_service_proto_rawDescGZIP() []byte {
	file_image_service_proto_rawDescOnce.Do(func() {
		file_image_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_image_service_proto_rawDescData)
	})
	return file_image_service_proto_rawDescData
}

var file_image_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_image_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_image_service_proto_goTypes = []interface{}{
	(TaskStatus)(0),                    // 0: image_service.TaskStatus
	(Resource)(0),                      // 1: image_service.Resource
	(RecoveType)(0),                    // 2: image_service.RecoveType
	(*RspInfo)(nil),                    // 3: image_service.RspInfo
	(*SetGameVersionRequest)(nil),      // 4: image_service.SetGameVersionRequest
	(*SetGameVersionResponse)(nil),     // 5: image_service.SetGameVersionResponse
	(*SetGameVersionHttpResponse)(nil), // 6: image_service.SetGameVersionHttpResponse
	(*TaskProcess)(nil),                // 7: image_service.TaskProcess
	(*GetTaskProcessRequest)(nil),      // 8: image_service.GetTaskProcessRequest
	(*GetTaskProcessResponse)(nil),     // 9: image_service.GetTaskProcessResponse
	(*GetTaskProcessHttpResponse)(nil), // 10: image_service.GetTaskProcessHttpResponse
	(*GetVersionRequest)(nil),          // 11: image_service.GetVersionRequest
	(*VmVersion)(nil),                  // 12: image_service.VmVersion
	(*GetVersionResponse)(nil),         // 13: image_service.GetVersionResponse
	(*PostVersionRequest)(nil),         // 14: image_service.PostVersionRequest
	(*PostVersionResponse)(nil),        // 15: image_service.PostVersionResponse
	(*VMTaskMsg)(nil),                  // 16: image_service.VMTaskMsg
	(*UpgradeSubtask)(nil),             // 17: image_service.UpgradeSubtask
	(*RecoveRequest)(nil),              // 18: image_service.RecoveRequest
	(*RecoveResponse)(nil),             // 19: image_service.RecoveResponse
	(*MakeRequest)(nil),                // 20: image_service.MakeRequest
	(*MakeResponse)(nil),               // 21: image_service.MakeResponse
	(*ImageRecoverRequest)(nil),        // 22: image_service.ImageRecoverRequest
	(*Status)(nil),                     // 23: image_service.Status
	(*ImageRecoverResponse)(nil),       // 24: image_service.ImageRecoverResponse
	(*ImageMakeRequest)(nil),           // 25: image_service.ImageMakeRequest
	(*ImageMakeResponse)(nil),          // 26: image_service.ImageMakeResponse
	(*ImageVersionRequest)(nil),        // 27: image_service.ImageVersionRequest
	(*ImageVersionResponse)(nil),       // 28: image_service.ImageVersionResponse
	(*ImageGetVersionRequest)(nil),     // 29: image_service.ImageGetVersionRequest
	(*ImageVmVersion)(nil),             // 30: image_service.ImageVmVersion
	(*ImageGetVersionResponse)(nil),    // 31: image_service.ImageGetVersionResponse
	nil,                                // 32: image_service.GetTaskProcessResponse.TasksEntry
	(*timestamppb.Timestamp)(nil),      // 33: google.protobuf.Timestamp
}
var file_image_service_proto_depIdxs = []int32{
	3,  // 0: image_service.SetGameVersionHttpResponse.ret:type_name -> image_service.RspInfo
	5,  // 1: image_service.SetGameVersionHttpResponse.body:type_name -> image_service.SetGameVersionResponse
	0,  // 2: image_service.TaskProcess.status:type_name -> image_service.TaskStatus
	1,  // 3: image_service.GetTaskProcessRequest.resource:type_name -> image_service.Resource
	32, // 4: image_service.GetTaskProcessResponse.tasks:type_name -> image_service.GetTaskProcessResponse.TasksEntry
	3,  // 5: image_service.GetTaskProcessHttpResponse.ret:type_name -> image_service.RspInfo
	9,  // 6: image_service.GetTaskProcessHttpResponse.body:type_name -> image_service.GetTaskProcessResponse
	12, // 7: image_service.GetVersionResponse.versions:type_name -> image_service.VmVersion
	17, // 8: image_service.VMTaskMsg.subtasks:type_name -> image_service.UpgradeSubtask
	33, // 9: image_service.VMTaskMsg.create_time:type_name -> google.protobuf.Timestamp
	16, // 10: image_service.RecoveRequest.task_msg:type_name -> image_service.VMTaskMsg
	2,  // 11: image_service.RecoveRequest.type:type_name -> image_service.RecoveType
	23, // 12: image_service.ImageRecoverResponse.status:type_name -> image_service.Status
	23, // 13: image_service.ImageMakeResponse.status:type_name -> image_service.Status
	23, // 14: image_service.ImageVersionResponse.status:type_name -> image_service.Status
	23, // 15: image_service.ImageGetVersionResponse.status:type_name -> image_service.Status
	30, // 16: image_service.ImageGetVersionResponse.versions:type_name -> image_service.ImageVmVersion
	7,  // 17: image_service.GetTaskProcessResponse.TasksEntry.value:type_name -> image_service.TaskProcess
	18, // 18: image_service.ImageService.Recove:input_type -> image_service.RecoveRequest
	8,  // 19: image_service.ImageService.GetTaskProcess:input_type -> image_service.GetTaskProcessRequest
	20, // 20: image_service.ImageService.Make:input_type -> image_service.MakeRequest
	14, // 21: image_service.ImageService.PostVersion:input_type -> image_service.PostVersionRequest
	11, // 22: image_service.ImageService.GetVersion:input_type -> image_service.GetVersionRequest
	4,  // 23: image_service.ImageService.SetGameVersion:input_type -> image_service.SetGameVersionRequest
	22, // 24: image_service.DiskLess.ImageRecover:input_type -> image_service.ImageRecoverRequest
	25, // 25: image_service.DiskLess.ImageMake:input_type -> image_service.ImageMakeRequest
	27, // 26: image_service.DiskLess.PostVersion:input_type -> image_service.ImageVersionRequest
	29, // 27: image_service.DiskLess.GetVersion:input_type -> image_service.ImageGetVersionRequest
	19, // 28: image_service.ImageService.Recove:output_type -> image_service.RecoveResponse
	10, // 29: image_service.ImageService.GetTaskProcess:output_type -> image_service.GetTaskProcessHttpResponse
	21, // 30: image_service.ImageService.Make:output_type -> image_service.MakeResponse
	15, // 31: image_service.ImageService.PostVersion:output_type -> image_service.PostVersionResponse
	13, // 32: image_service.ImageService.GetVersion:output_type -> image_service.GetVersionResponse
	6,  // 33: image_service.ImageService.SetGameVersion:output_type -> image_service.SetGameVersionHttpResponse
	24, // 34: image_service.DiskLess.ImageRecover:output_type -> image_service.ImageRecoverResponse
	26, // 35: image_service.DiskLess.ImageMake:output_type -> image_service.ImageMakeResponse
	28, // 36: image_service.DiskLess.PostVersion:output_type -> image_service.ImageVersionResponse
	31, // 37: image_service.DiskLess.GetVersion:output_type -> image_service.ImageGetVersionResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_image_service_proto_init() }
func file_image_service_proto_init() {
	if File_image_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_image_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGameVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGameVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGameVersionHttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProcessHttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMTaskMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeSubtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRecoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRecoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageGetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageVmVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageGetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_image_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_image_service_proto_goTypes,
		DependencyIndexes: file_image_service_proto_depIdxs,
		EnumInfos:         file_image_service_proto_enumTypes,
		MessageInfos:      file_image_service_proto_msgTypes,
	}.Build()
	File_image_service_proto = out.File
	file_image_service_proto_rawDesc = nil
	file_image_service_proto_goTypes = nil
	file_image_service_proto_depIdxs = nil
}
