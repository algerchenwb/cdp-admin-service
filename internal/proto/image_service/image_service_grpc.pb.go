// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: image_service.proto

package image_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	// 恢复镜像接口
	Recove(ctx context.Context, in *RecoveRequest, opts ...grpc.CallOption) (*RecoveResponse, error)
	GetTaskProcess(ctx context.Context, in *GetTaskProcessRequest, opts ...grpc.CallOption) (*GetTaskProcessHttpResponse, error)
	// 镜像制作接口
	Make(ctx context.Context, in *MakeRequest, opts ...grpc.CallOption) (*MakeResponse, error)
	PostVersion(ctx context.Context, in *PostVersionRequest, opts ...grpc.CallOption) (*PostVersionResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	SetGameVersion(ctx context.Context, in *SetGameVersionRequest, opts ...grpc.CallOption) (*SetGameVersionHttpResponse, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) Recove(ctx context.Context, in *RecoveRequest, opts ...grpc.CallOption) (*RecoveResponse, error) {
	out := new(RecoveResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/Recove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetTaskProcess(ctx context.Context, in *GetTaskProcessRequest, opts ...grpc.CallOption) (*GetTaskProcessHttpResponse, error) {
	out := new(GetTaskProcessHttpResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/GetTaskProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Make(ctx context.Context, in *MakeRequest, opts ...grpc.CallOption) (*MakeResponse, error) {
	out := new(MakeResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/Make", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) PostVersion(ctx context.Context, in *PostVersionRequest, opts ...grpc.CallOption) (*PostVersionResponse, error) {
	out := new(PostVersionResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/PostVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) SetGameVersion(ctx context.Context, in *SetGameVersionRequest, opts ...grpc.CallOption) (*SetGameVersionHttpResponse, error) {
	out := new(SetGameVersionHttpResponse)
	err := c.cc.Invoke(ctx, "/image_service.ImageService/SetGameVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	// 恢复镜像接口
	Recove(context.Context, *RecoveRequest) (*RecoveResponse, error)
	GetTaskProcess(context.Context, *GetTaskProcessRequest) (*GetTaskProcessHttpResponse, error)
	// 镜像制作接口
	Make(context.Context, *MakeRequest) (*MakeResponse, error)
	PostVersion(context.Context, *PostVersionRequest) (*PostVersionResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	SetGameVersion(context.Context, *SetGameVersionRequest) (*SetGameVersionHttpResponse, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) Recove(context.Context, *RecoveRequest) (*RecoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recove not implemented")
}
func (UnimplementedImageServiceServer) GetTaskProcess(context.Context, *GetTaskProcessRequest) (*GetTaskProcessHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskProcess not implemented")
}
func (UnimplementedImageServiceServer) Make(context.Context, *MakeRequest) (*MakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Make not implemented")
}
func (UnimplementedImageServiceServer) PostVersion(context.Context, *PostVersionRequest) (*PostVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVersion not implemented")
}
func (UnimplementedImageServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedImageServiceServer) SetGameVersion(context.Context, *SetGameVersionRequest) (*SetGameVersionHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameVersion not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_Recove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Recove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/Recove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Recove(ctx, req.(*RecoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetTaskProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetTaskProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/GetTaskProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetTaskProcess(ctx, req.(*GetTaskProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Make_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Make(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/Make",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Make(ctx, req.(*MakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_PostVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).PostVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/PostVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).PostVersion(ctx, req.(*PostVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_SetGameVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGameVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).SetGameVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.ImageService/SetGameVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).SetGameVersion(ctx, req.(*SetGameVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_service.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recove",
			Handler:    _ImageService_Recove_Handler,
		},
		{
			MethodName: "GetTaskProcess",
			Handler:    _ImageService_GetTaskProcess_Handler,
		},
		{
			MethodName: "Make",
			Handler:    _ImageService_Make_Handler,
		},
		{
			MethodName: "PostVersion",
			Handler:    _ImageService_PostVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ImageService_GetVersion_Handler,
		},
		{
			MethodName: "SetGameVersion",
			Handler:    _ImageService_SetGameVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image_service.proto",
}

// DiskLessClient is the client API for DiskLess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiskLessClient interface {
	// 镜像恢复流程，由云天负责封装一层后提供
	ImageRecover(ctx context.Context, in *ImageRecoverRequest, opts ...grpc.CallOption) (*ImageRecoverResponse, error)
	// 制作镜像流程，由云天负责封装后提供
	ImageMake(ctx context.Context, in *ImageMakeRequest, opts ...grpc.CallOption) (*ImageMakeResponse, error)
	// 指定下一个生效镜像版本
	PostVersion(ctx context.Context, in *ImageVersionRequest, opts ...grpc.CallOption) (*ImageVersionResponse, error)
	GetVersion(ctx context.Context, in *ImageGetVersionRequest, opts ...grpc.CallOption) (*ImageGetVersionResponse, error)
}

type diskLessClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskLessClient(cc grpc.ClientConnInterface) DiskLessClient {
	return &diskLessClient{cc}
}

func (c *diskLessClient) ImageRecover(ctx context.Context, in *ImageRecoverRequest, opts ...grpc.CallOption) (*ImageRecoverResponse, error) {
	out := new(ImageRecoverResponse)
	err := c.cc.Invoke(ctx, "/image_service.DiskLess/ImageRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskLessClient) ImageMake(ctx context.Context, in *ImageMakeRequest, opts ...grpc.CallOption) (*ImageMakeResponse, error) {
	out := new(ImageMakeResponse)
	err := c.cc.Invoke(ctx, "/image_service.DiskLess/ImageMake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskLessClient) PostVersion(ctx context.Context, in *ImageVersionRequest, opts ...grpc.CallOption) (*ImageVersionResponse, error) {
	out := new(ImageVersionResponse)
	err := c.cc.Invoke(ctx, "/image_service.DiskLess/PostVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskLessClient) GetVersion(ctx context.Context, in *ImageGetVersionRequest, opts ...grpc.CallOption) (*ImageGetVersionResponse, error) {
	out := new(ImageGetVersionResponse)
	err := c.cc.Invoke(ctx, "/image_service.DiskLess/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskLessServer is the server API for DiskLess service.
// All implementations must embed UnimplementedDiskLessServer
// for forward compatibility
type DiskLessServer interface {
	// 镜像恢复流程，由云天负责封装一层后提供
	ImageRecover(context.Context, *ImageRecoverRequest) (*ImageRecoverResponse, error)
	// 制作镜像流程，由云天负责封装后提供
	ImageMake(context.Context, *ImageMakeRequest) (*ImageMakeResponse, error)
	// 指定下一个生效镜像版本
	PostVersion(context.Context, *ImageVersionRequest) (*ImageVersionResponse, error)
	GetVersion(context.Context, *ImageGetVersionRequest) (*ImageGetVersionResponse, error)
	mustEmbedUnimplementedDiskLessServer()
}

// UnimplementedDiskLessServer must be embedded to have forward compatible implementations.
type UnimplementedDiskLessServer struct {
}

func (UnimplementedDiskLessServer) ImageRecover(context.Context, *ImageRecoverRequest) (*ImageRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageRecover not implemented")
}
func (UnimplementedDiskLessServer) ImageMake(context.Context, *ImageMakeRequest) (*ImageMakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageMake not implemented")
}
func (UnimplementedDiskLessServer) PostVersion(context.Context, *ImageVersionRequest) (*ImageVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVersion not implemented")
}
func (UnimplementedDiskLessServer) GetVersion(context.Context, *ImageGetVersionRequest) (*ImageGetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDiskLessServer) mustEmbedUnimplementedDiskLessServer() {}

// UnsafeDiskLessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskLessServer will
// result in compilation errors.
type UnsafeDiskLessServer interface {
	mustEmbedUnimplementedDiskLessServer()
}

func RegisterDiskLessServer(s grpc.ServiceRegistrar, srv DiskLessServer) {
	s.RegisterService(&DiskLess_ServiceDesc, srv)
}

func _DiskLess_ImageRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskLessServer).ImageRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.DiskLess/ImageRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskLessServer).ImageRecover(ctx, req.(*ImageRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskLess_ImageMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskLessServer).ImageMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.DiskLess/ImageMake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskLessServer).ImageMake(ctx, req.(*ImageMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskLess_PostVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskLessServer).PostVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.DiskLess/PostVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskLessServer).PostVersion(ctx, req.(*ImageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskLess_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskLessServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.DiskLess/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskLessServer).GetVersion(ctx, req.(*ImageGetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiskLess_ServiceDesc is the grpc.ServiceDesc for DiskLess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiskLess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_service.DiskLess",
	HandlerType: (*DiskLessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageRecover",
			Handler:    _DiskLess_ImageRecover_Handler,
		},
		{
			MethodName: "ImageMake",
			Handler:    _DiskLess_ImageMake_Handler,
		},
		{
			MethodName: "PostVersion",
			Handler:    _DiskLess_PostVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DiskLess_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image_service.proto",
}
