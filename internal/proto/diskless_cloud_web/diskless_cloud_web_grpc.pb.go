// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: diskless_cloud_web/diskless_cloud_web.proto

package diskless_cloud_web

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DisklessCloudWeb_GetRegionMap_FullMethodName      = "/diskless_cloud_web.DisklessCloudWeb/GetRegionMap"
	DisklessCloudWeb_RegisterArea_FullMethodName      = "/diskless_cloud_web.DisklessCloudWeb/RegisterArea"
	DisklessCloudWeb_UnregisterArea_FullMethodName    = "/diskless_cloud_web.DisklessCloudWeb/UnregisterArea"
	DisklessCloudWeb_ChangeAreaInfo_FullMethodName    = "/diskless_cloud_web.DisklessCloudWeb/ChangeAreaInfo"
	DisklessCloudWeb_QueryAreaList_FullMethodName     = "/diskless_cloud_web.DisklessCloudWeb/QueryAreaList"
	DisklessCloudWeb_PostAreaApi_FullMethodName       = "/diskless_cloud_web.DisklessCloudWeb/PostAreaApi"
	DisklessCloudWeb_GetAreaApi_FullMethodName        = "/diskless_cloud_web.DisklessCloudWeb/GetAreaApi"
	DisklessCloudWeb_DirectPostAreaApi_FullMethodName = "/diskless_cloud_web.DisklessCloudWeb/DirectPostAreaApi"
	DisklessCloudWeb_DirectGetAreaApi_FullMethodName  = "/diskless_cloud_web.DisklessCloudWeb/DirectGetAreaApi"
)

// DisklessCloudWebClient is the client API for DisklessCloudWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisklessCloudWebClient interface {
	// 获取大区枚举
	GetRegionMap(ctx context.Context, in *GetRegionMapRequest, opts ...grpc.CallOption) (*GetRegionMapResponse, error)
	// 新增机房
	RegisterArea(ctx context.Context, in *RegisterAreaRequest, opts ...grpc.CallOption) (*RegisterAreaResponse, error)
	// 删除机房
	UnregisterArea(ctx context.Context, in *UnregisterAreaRequest, opts ...grpc.CallOption) (*UnregisterAreaResponse, error)
	// 修改机房信息
	ChangeAreaInfo(ctx context.Context, in *ChangeAreaInfoRequest, opts ...grpc.CallOption) (*ChangeAreaInfoResponse, error)
	// 查询机房列表
	QueryAreaList(ctx context.Context, in *QueryAreaListRequest, opts ...grpc.CallOption) (*QueryAreaListResponse, error)
	// 调用机房的post接口
	PostAreaApi(ctx context.Context, in *CallAreaApiRequest, opts ...grpc.CallOption) (*CallAreaApiResponse, error)
	// 调用机房的post接口
	GetAreaApi(ctx context.Context, in *CallAreaApiRequest, opts ...grpc.CallOption) (*CallAreaApiResponse, error)
	// 调用机房的post接口
	DirectPostAreaApi(ctx context.Context, in *DirectPostAreaApiRequest, opts ...grpc.CallOption) (*DirectPostAreaApiResponse, error)
	// 调用机房的post接口
	DirectGetAreaApi(ctx context.Context, in *DirectGetAreaApiRequest, opts ...grpc.CallOption) (*DirectGetAreaApiResponse, error)
}

type disklessCloudWebClient struct {
	cc grpc.ClientConnInterface
}

func NewDisklessCloudWebClient(cc grpc.ClientConnInterface) DisklessCloudWebClient {
	return &disklessCloudWebClient{cc}
}

func (c *disklessCloudWebClient) GetRegionMap(ctx context.Context, in *GetRegionMapRequest, opts ...grpc.CallOption) (*GetRegionMapResponse, error) {
	out := new(GetRegionMapResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_GetRegionMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) RegisterArea(ctx context.Context, in *RegisterAreaRequest, opts ...grpc.CallOption) (*RegisterAreaResponse, error) {
	out := new(RegisterAreaResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_RegisterArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) UnregisterArea(ctx context.Context, in *UnregisterAreaRequest, opts ...grpc.CallOption) (*UnregisterAreaResponse, error) {
	out := new(UnregisterAreaResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_UnregisterArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) ChangeAreaInfo(ctx context.Context, in *ChangeAreaInfoRequest, opts ...grpc.CallOption) (*ChangeAreaInfoResponse, error) {
	out := new(ChangeAreaInfoResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_ChangeAreaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) QueryAreaList(ctx context.Context, in *QueryAreaListRequest, opts ...grpc.CallOption) (*QueryAreaListResponse, error) {
	out := new(QueryAreaListResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_QueryAreaList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) PostAreaApi(ctx context.Context, in *CallAreaApiRequest, opts ...grpc.CallOption) (*CallAreaApiResponse, error) {
	out := new(CallAreaApiResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_PostAreaApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) GetAreaApi(ctx context.Context, in *CallAreaApiRequest, opts ...grpc.CallOption) (*CallAreaApiResponse, error) {
	out := new(CallAreaApiResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_GetAreaApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) DirectPostAreaApi(ctx context.Context, in *DirectPostAreaApiRequest, opts ...grpc.CallOption) (*DirectPostAreaApiResponse, error) {
	out := new(DirectPostAreaApiResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_DirectPostAreaApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudWebClient) DirectGetAreaApi(ctx context.Context, in *DirectGetAreaApiRequest, opts ...grpc.CallOption) (*DirectGetAreaApiResponse, error) {
	out := new(DirectGetAreaApiResponse)
	err := c.cc.Invoke(ctx, DisklessCloudWeb_DirectGetAreaApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisklessCloudWebServer is the server API for DisklessCloudWeb service.
// All implementations must embed UnimplementedDisklessCloudWebServer
// for forward compatibility
type DisklessCloudWebServer interface {
	// 获取大区枚举
	GetRegionMap(context.Context, *GetRegionMapRequest) (*GetRegionMapResponse, error)
	// 新增机房
	RegisterArea(context.Context, *RegisterAreaRequest) (*RegisterAreaResponse, error)
	// 删除机房
	UnregisterArea(context.Context, *UnregisterAreaRequest) (*UnregisterAreaResponse, error)
	// 修改机房信息
	ChangeAreaInfo(context.Context, *ChangeAreaInfoRequest) (*ChangeAreaInfoResponse, error)
	// 查询机房列表
	QueryAreaList(context.Context, *QueryAreaListRequest) (*QueryAreaListResponse, error)
	// 调用机房的post接口
	PostAreaApi(context.Context, *CallAreaApiRequest) (*CallAreaApiResponse, error)
	// 调用机房的post接口
	GetAreaApi(context.Context, *CallAreaApiRequest) (*CallAreaApiResponse, error)
	// 调用机房的post接口
	DirectPostAreaApi(context.Context, *DirectPostAreaApiRequest) (*DirectPostAreaApiResponse, error)
	// 调用机房的post接口
	DirectGetAreaApi(context.Context, *DirectGetAreaApiRequest) (*DirectGetAreaApiResponse, error)
	mustEmbedUnimplementedDisklessCloudWebServer()
}

// UnimplementedDisklessCloudWebServer must be embedded to have forward compatible implementations.
type UnimplementedDisklessCloudWebServer struct {
}

func (UnimplementedDisklessCloudWebServer) GetRegionMap(context.Context, *GetRegionMapRequest) (*GetRegionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionMap not implemented")
}
func (UnimplementedDisklessCloudWebServer) RegisterArea(context.Context, *RegisterAreaRequest) (*RegisterAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterArea not implemented")
}
func (UnimplementedDisklessCloudWebServer) UnregisterArea(context.Context, *UnregisterAreaRequest) (*UnregisterAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterArea not implemented")
}
func (UnimplementedDisklessCloudWebServer) ChangeAreaInfo(context.Context, *ChangeAreaInfoRequest) (*ChangeAreaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAreaInfo not implemented")
}
func (UnimplementedDisklessCloudWebServer) QueryAreaList(context.Context, *QueryAreaListRequest) (*QueryAreaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAreaList not implemented")
}
func (UnimplementedDisklessCloudWebServer) PostAreaApi(context.Context, *CallAreaApiRequest) (*CallAreaApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAreaApi not implemented")
}
func (UnimplementedDisklessCloudWebServer) GetAreaApi(context.Context, *CallAreaApiRequest) (*CallAreaApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaApi not implemented")
}
func (UnimplementedDisklessCloudWebServer) DirectPostAreaApi(context.Context, *DirectPostAreaApiRequest) (*DirectPostAreaApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectPostAreaApi not implemented")
}
func (UnimplementedDisklessCloudWebServer) DirectGetAreaApi(context.Context, *DirectGetAreaApiRequest) (*DirectGetAreaApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectGetAreaApi not implemented")
}
func (UnimplementedDisklessCloudWebServer) mustEmbedUnimplementedDisklessCloudWebServer() {}

// UnsafeDisklessCloudWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisklessCloudWebServer will
// result in compilation errors.
type UnsafeDisklessCloudWebServer interface {
	mustEmbedUnimplementedDisklessCloudWebServer()
}

func RegisterDisklessCloudWebServer(s grpc.ServiceRegistrar, srv DisklessCloudWebServer) {
	s.RegisterService(&DisklessCloudWeb_ServiceDesc, srv)
}

func _DisklessCloudWeb_GetRegionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).GetRegionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_GetRegionMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).GetRegionMap(ctx, req.(*GetRegionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_RegisterArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).RegisterArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_RegisterArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).RegisterArea(ctx, req.(*RegisterAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_UnregisterArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).UnregisterArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_UnregisterArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).UnregisterArea(ctx, req.(*UnregisterAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_ChangeAreaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAreaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).ChangeAreaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_ChangeAreaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).ChangeAreaInfo(ctx, req.(*ChangeAreaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_QueryAreaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAreaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).QueryAreaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_QueryAreaList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).QueryAreaList(ctx, req.(*QueryAreaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_PostAreaApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallAreaApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).PostAreaApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_PostAreaApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).PostAreaApi(ctx, req.(*CallAreaApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_GetAreaApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallAreaApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).GetAreaApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_GetAreaApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).GetAreaApi(ctx, req.(*CallAreaApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_DirectPostAreaApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectPostAreaApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).DirectPostAreaApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_DirectPostAreaApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).DirectPostAreaApi(ctx, req.(*DirectPostAreaApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudWeb_DirectGetAreaApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectGetAreaApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudWebServer).DirectGetAreaApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudWeb_DirectGetAreaApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudWebServer).DirectGetAreaApi(ctx, req.(*DirectGetAreaApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisklessCloudWeb_ServiceDesc is the grpc.ServiceDesc for DisklessCloudWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisklessCloudWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diskless_cloud_web.DisklessCloudWeb",
	HandlerType: (*DisklessCloudWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegionMap",
			Handler:    _DisklessCloudWeb_GetRegionMap_Handler,
		},
		{
			MethodName: "RegisterArea",
			Handler:    _DisklessCloudWeb_RegisterArea_Handler,
		},
		{
			MethodName: "UnregisterArea",
			Handler:    _DisklessCloudWeb_UnregisterArea_Handler,
		},
		{
			MethodName: "ChangeAreaInfo",
			Handler:    _DisklessCloudWeb_ChangeAreaInfo_Handler,
		},
		{
			MethodName: "QueryAreaList",
			Handler:    _DisklessCloudWeb_QueryAreaList_Handler,
		},
		{
			MethodName: "PostAreaApi",
			Handler:    _DisklessCloudWeb_PostAreaApi_Handler,
		},
		{
			MethodName: "GetAreaApi",
			Handler:    _DisklessCloudWeb_GetAreaApi_Handler,
		},
		{
			MethodName: "DirectPostAreaApi",
			Handler:    _DisklessCloudWeb_DirectPostAreaApi_Handler,
		},
		{
			MethodName: "DirectGetAreaApi",
			Handler:    _DisklessCloudWeb_DirectGetAreaApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diskless_cloud_web/diskless_cloud_web.proto",
}
