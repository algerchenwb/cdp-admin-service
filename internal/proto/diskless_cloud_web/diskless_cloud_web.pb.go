// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.15.8
// source: diskless_cloud_web/diskless_cloud_web.proto

package diskless_cloud_web

import (
	common "gitlab.vrviu.com/diskless_stack/diskless_stack/protocol/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRegionMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *GetRegionMapRequest) Reset() {
	*x = GetRegionMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionMapRequest) ProtoMessage() {}

func (x *GetRegionMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionMapRequest.ProtoReflect.Descriptor instead.
func (*GetRegionMapRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{0}
}

func (x *GetRegionMapRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             // 地区编号：1
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`          // 地区名：华南地区
	AreaNum int32  `protobuf:"varint,3,opt,name=area_num,proto3" json:"area_num,omitempty"` // 该地区机房数
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{1}
}

func (x *Region) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Region) GetAreaNum() int32 {
	if x != nil {
		return x.AreaNum
	}
	return 0
}

type GetRegionMapBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    string    `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Total     int32     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 地区数
	RegionMap []*Region `protobuf:"bytes,3,rep,name=region_map,proto3" json:"region_map,omitempty"`
}

func (x *GetRegionMapBody) Reset() {
	*x = GetRegionMapBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionMapBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionMapBody) ProtoMessage() {}

func (x *GetRegionMapBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionMapBody.ProtoReflect.Descriptor instead.
func (*GetRegionMapBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{2}
}

func (x *GetRegionMapBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetRegionMapBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRegionMapBody) GetRegionMap() []*Region {
	if x != nil {
		return x.RegionMap
	}
	return nil
}

type GetRegionMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo   `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *GetRegionMapBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GetRegionMapResponse) Reset() {
	*x = GetRegionMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionMapResponse) ProtoMessage() {}

func (x *GetRegionMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionMapResponse.ProtoReflect.Descriptor instead.
func (*GetRegionMapResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{3}
}

func (x *GetRegionMapResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetRegionMapResponse) GetBody() *GetRegionMapBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type RegisterAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	AreaId         int64  `protobuf:"varint,2,opt,name=area_id,proto3" json:"area_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RegionId       int32  `protobuf:"varint,4,opt,name=region_id,proto3" json:"region_id,omitempty"`             // 例：华南地区ID
	DeploymentType int32  `protobuf:"varint,5,opt,name=deployment_type,proto3" json:"deployment_type,omitempty"` // 1.poc；2.正式；
	Remark         string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	ManagerState   int32  `protobuf:"varint,7,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1.启用；2.禁用
}

func (x *RegisterAreaRequest) Reset() {
	*x = RegisterAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAreaRequest) ProtoMessage() {}

func (x *RegisterAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAreaRequest.ProtoReflect.Descriptor instead.
func (*RegisterAreaRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterAreaRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *RegisterAreaRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *RegisterAreaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterAreaRequest) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *RegisterAreaRequest) GetDeploymentType() int32 {
	if x != nil {
		return x.DeploymentType
	}
	return 0
}

func (x *RegisterAreaRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RegisterAreaRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

type RegisterAreaBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *RegisterAreaBody) Reset() {
	*x = RegisterAreaBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAreaBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAreaBody) ProtoMessage() {}

func (x *RegisterAreaBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAreaBody.ProtoReflect.Descriptor instead.
func (*RegisterAreaBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterAreaBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type RegisterAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo   `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *RegisterAreaBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RegisterAreaResponse) Reset() {
	*x = RegisterAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAreaResponse) ProtoMessage() {}

func (x *RegisterAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAreaResponse.ProtoReflect.Descriptor instead.
func (*RegisterAreaResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterAreaResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *RegisterAreaResponse) GetBody() *RegisterAreaBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type UnregisterAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Ids    string `protobuf:"bytes,2,opt,name=ids,proto3" json:"ids,omitempty"` // 主键
}

func (x *UnregisterAreaRequest) Reset() {
	*x = UnregisterAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterAreaRequest) ProtoMessage() {}

func (x *UnregisterAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterAreaRequest.ProtoReflect.Descriptor instead.
func (*UnregisterAreaRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{7}
}

func (x *UnregisterAreaRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UnregisterAreaRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

type UnregisterAreaBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string            `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Rets   []*common.RspInfo `protobuf:"bytes,2,rep,name=rets,proto3" json:"rets,omitempty"`
}

func (x *UnregisterAreaBody) Reset() {
	*x = UnregisterAreaBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterAreaBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterAreaBody) ProtoMessage() {}

func (x *UnregisterAreaBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterAreaBody.ProtoReflect.Descriptor instead.
func (*UnregisterAreaBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{8}
}

func (x *UnregisterAreaBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UnregisterAreaBody) GetRets() []*common.RspInfo {
	if x != nil {
		return x.Rets
	}
	return nil
}

type UnregisterAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo     `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *UnregisterAreaBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UnregisterAreaResponse) Reset() {
	*x = UnregisterAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterAreaResponse) ProtoMessage() {}

func (x *UnregisterAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterAreaResponse.ProtoReflect.Descriptor instead.
func (*UnregisterAreaResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{9}
}

func (x *UnregisterAreaResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *UnregisterAreaResponse) GetBody() *UnregisterAreaBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ChangeAreaInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id             int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // 主键
	AreaId         int64  `protobuf:"varint,3,opt,name=area_id,proto3" json:"area_id,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RegionId       int32  `protobuf:"varint,5,opt,name=region_id,proto3" json:"region_id,omitempty"`
	DeploymentType int32  `protobuf:"varint,6,opt,name=deployment_type,proto3" json:"deployment_type,omitempty"` // 1.poc；2.正式；
	Remark         string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	ManagerState   int32  `protobuf:"varint,8,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1.启用；2.禁用
}

func (x *ChangeAreaInfoRequest) Reset() {
	*x = ChangeAreaInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAreaInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAreaInfoRequest) ProtoMessage() {}

func (x *ChangeAreaInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAreaInfoRequest.ProtoReflect.Descriptor instead.
func (*ChangeAreaInfoRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeAreaInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ChangeAreaInfoRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChangeAreaInfoRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *ChangeAreaInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChangeAreaInfoRequest) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *ChangeAreaInfoRequest) GetDeploymentType() int32 {
	if x != nil {
		return x.DeploymentType
	}
	return 0
}

func (x *ChangeAreaInfoRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ChangeAreaInfoRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

type ChangeAreaInfoBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *ChangeAreaInfoBody) Reset() {
	*x = ChangeAreaInfoBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAreaInfoBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAreaInfoBody) ProtoMessage() {}

func (x *ChangeAreaInfoBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAreaInfoBody.ProtoReflect.Descriptor instead.
func (*ChangeAreaInfoBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeAreaInfoBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type ChangeAreaInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo     `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *ChangeAreaInfoBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ChangeAreaInfoResponse) Reset() {
	*x = ChangeAreaInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAreaInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAreaInfoResponse) ProtoMessage() {}

func (x *ChangeAreaInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAreaInfoResponse.ProtoReflect.Descriptor instead.
func (*ChangeAreaInfoResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeAreaInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *ChangeAreaInfoResponse) GetBody() *ChangeAreaInfoBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type QueryAreaListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryAreaListRequest) Reset() {
	*x = QueryAreaListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAreaListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAreaListRequest) ProtoMessage() {}

func (x *QueryAreaListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAreaListRequest.ProtoReflect.Descriptor instead.
func (*QueryAreaListRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{13}
}

func (x *QueryAreaListRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryAreaListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryAreaListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryAreaListRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryAreaListRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryAreaListRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type AreaBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AreaId         int64  `protobuf:"varint,2,opt,name=area_id,proto3" json:"area_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RegionId       int32  `protobuf:"varint,4,opt,name=region_id,proto3" json:"region_id,omitempty"`
	DeploymentType int32  `protobuf:"varint,5,opt,name=deployment_type,proto3" json:"deployment_type,omitempty"` // 1.poc；2.正式；
	Remark         string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	ManagerState   int32  `protobuf:"varint,7,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1.启用；2.禁用
	OnlineVm       int32  `protobuf:"varint,8,opt,name=online_vm,proto3" json:"online_vm,omitempty"`
	TotalVm        int32  `protobuf:"varint,9,opt,name=total_vm,proto3" json:"total_vm,omitempty"`
	Version        int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"` // 边缘部署的iaas服务版本
	ProxyAddr      string `protobuf:"bytes,11,opt,name=proxy_addr,proto3" json:"proxy_addr,omitempty"`
	ProxyOnline    int32  `protobuf:"varint,12,opt,name=proxy_online,proto3" json:"proxy_online,omitempty"` // 1.在线；0.离线
	CreateTime     string `protobuf:"bytes,13,opt,name=create_time,proto3" json:"create_time,omitempty"`
	UpdateTime     string `protobuf:"bytes,14,opt,name=update_time,proto3" json:"update_time,omitempty"` // 用户最后修改时间
	ModifyTime     string `protobuf:"bytes,15,opt,name=modify_time,proto3" json:"modify_time,omitempty"` // db记录最后更新时间
}

func (x *AreaBaseInfo) Reset() {
	*x = AreaBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaBaseInfo) ProtoMessage() {}

func (x *AreaBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaBaseInfo.ProtoReflect.Descriptor instead.
func (*AreaBaseInfo) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{14}
}

func (x *AreaBaseInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaBaseInfo) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *AreaBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AreaBaseInfo) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *AreaBaseInfo) GetDeploymentType() int32 {
	if x != nil {
		return x.DeploymentType
	}
	return 0
}

func (x *AreaBaseInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AreaBaseInfo) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *AreaBaseInfo) GetOnlineVm() int32 {
	if x != nil {
		return x.OnlineVm
	}
	return 0
}

func (x *AreaBaseInfo) GetTotalVm() int32 {
	if x != nil {
		return x.TotalVm
	}
	return 0
}

func (x *AreaBaseInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AreaBaseInfo) GetProxyAddr() string {
	if x != nil {
		return x.ProxyAddr
	}
	return ""
}

func (x *AreaBaseInfo) GetProxyOnline() int32 {
	if x != nil {
		return x.ProxyOnline
	}
	return 0
}

func (x *AreaBaseInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AreaBaseInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AreaBaseInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type QueryAreaListBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string          `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Total  int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List   []*AreaBaseInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryAreaListBody) Reset() {
	*x = QueryAreaListBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAreaListBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAreaListBody) ProtoMessage() {}

func (x *QueryAreaListBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAreaListBody.ProtoReflect.Descriptor instead.
func (*QueryAreaListBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{15}
}

func (x *QueryAreaListBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryAreaListBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryAreaListBody) GetList() []*AreaBaseInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryAreaListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo    `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *QueryAreaListBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *QueryAreaListResponse) Reset() {
	*x = QueryAreaListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAreaListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAreaListResponse) ProtoMessage() {}

func (x *QueryAreaListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAreaListResponse.ProtoReflect.Descriptor instead.
func (*QueryAreaListResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{16}
}

func (x *QueryAreaListResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryAreaListResponse) GetBody() *QueryAreaListBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type CallAreaApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	AreaId    int64  `protobuf:"varint,2,opt,name=area_id,proto3" json:"area_id,omitempty"`    // 例: 6020
	Subsystem string `protobuf:"bytes,3,opt,name=subsystem,proto3" json:"subsystem,omitempty"` // 例: iaas
	Api       string `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`             // 例: create_instance
	Request   string `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`     // get时是url后缀[k1=v1&k2=v2],post时是json
}

func (x *CallAreaApiRequest) Reset() {
	*x = CallAreaApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAreaApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAreaApiRequest) ProtoMessage() {}

func (x *CallAreaApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAreaApiRequest.ProtoReflect.Descriptor instead.
func (*CallAreaApiRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{17}
}

func (x *CallAreaApiRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *CallAreaApiRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *CallAreaApiRequest) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *CallAreaApiRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CallAreaApiRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type CallAreaApiBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Response string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"` // http响应体，内嵌json
}

func (x *CallAreaApiBody) Reset() {
	*x = CallAreaApiBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAreaApiBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAreaApiBody) ProtoMessage() {}

func (x *CallAreaApiBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAreaApiBody.ProtoReflect.Descriptor instead.
func (*CallAreaApiBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{18}
}

func (x *CallAreaApiBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *CallAreaApiBody) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CallAreaApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo  `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *CallAreaApiBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CallAreaApiResponse) Reset() {
	*x = CallAreaApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAreaApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAreaApiResponse) ProtoMessage() {}

func (x *CallAreaApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAreaApiResponse.ProtoReflect.Descriptor instead.
func (*CallAreaApiResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{19}
}

func (x *CallAreaApiResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *CallAreaApiResponse) GetBody() *CallAreaApiBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// 直接转发body和url
type DirectPostAreaApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DirectPostAreaApiRequest) Reset() {
	*x = DirectPostAreaApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectPostAreaApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectPostAreaApiRequest) ProtoMessage() {}

func (x *DirectPostAreaApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectPostAreaApiRequest.ProtoReflect.Descriptor instead.
func (*DirectPostAreaApiRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{20}
}

func (x *DirectPostAreaApiRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type DirectPostAreaApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DirectPostAreaApiResponse) Reset() {
	*x = DirectPostAreaApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectPostAreaApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectPostAreaApiResponse) ProtoMessage() {}

func (x *DirectPostAreaApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectPostAreaApiResponse.ProtoReflect.Descriptor instead.
func (*DirectPostAreaApiResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{21}
}

func (x *DirectPostAreaApiResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type DirectGetAreaApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DirectGetAreaApiRequest) Reset() {
	*x = DirectGetAreaApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectGetAreaApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectGetAreaApiRequest) ProtoMessage() {}

func (x *DirectGetAreaApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectGetAreaApiRequest.ProtoReflect.Descriptor instead.
func (*DirectGetAreaApiRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{22}
}

type DirectGetAreaApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DirectGetAreaApiResponse) Reset() {
	*x = DirectGetAreaApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectGetAreaApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectGetAreaApiResponse) ProtoMessage() {}

func (x *DirectGetAreaApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectGetAreaApiResponse.ProtoReflect.Descriptor instead.
func (*DirectGetAreaApiResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP(), []int{23}
}

func (x *DirectGetAreaApiResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_diskless_cloud_web_diskless_cloud_web_proto protoreflect.FileDescriptor

var file_diskless_cloud_web_diskless_cloud_web_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x65, 0x62, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x64,
	0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65,
	0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x22,
	0x7e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x22,
	0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x43, 0x0a,
	0x15, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x53, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x72, 0x65, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x55, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xf5, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xd0,
	0x03, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x79, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2e, 0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x32, 0xdc, 0x0a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x65, 0x62, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x29, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65,
	0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x57, 0x65, 0x62, 0x2f, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x93, 0x01,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x41, 0x70, 0x69, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65,
	0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70,
	0x69, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69,
	0x12, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x44,
	0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69,
	0x12, 0x2c, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69,
	0x12, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x41, 0x70, 0x69, 0x12, 0x2b, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x2f, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x70, 0x69, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x72, 0x76, 0x69, 0x75, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diskless_cloud_web_diskless_cloud_web_proto_rawDescOnce sync.Once
	file_diskless_cloud_web_diskless_cloud_web_proto_rawDescData = file_diskless_cloud_web_diskless_cloud_web_proto_rawDesc
)

func file_diskless_cloud_web_diskless_cloud_web_proto_rawDescGZIP() []byte {
	file_diskless_cloud_web_diskless_cloud_web_proto_rawDescOnce.Do(func() {
		file_diskless_cloud_web_diskless_cloud_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_diskless_cloud_web_diskless_cloud_web_proto_rawDescData)
	})
	return file_diskless_cloud_web_diskless_cloud_web_proto_rawDescData
}

var file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_diskless_cloud_web_diskless_cloud_web_proto_goTypes = []interface{}{
	(*GetRegionMapRequest)(nil),       // 0: diskless_cloud_web.GetRegionMapRequest
	(*Region)(nil),                    // 1: diskless_cloud_web.Region
	(*GetRegionMapBody)(nil),          // 2: diskless_cloud_web.GetRegionMapBody
	(*GetRegionMapResponse)(nil),      // 3: diskless_cloud_web.GetRegionMapResponse
	(*RegisterAreaRequest)(nil),       // 4: diskless_cloud_web.RegisterAreaRequest
	(*RegisterAreaBody)(nil),          // 5: diskless_cloud_web.RegisterAreaBody
	(*RegisterAreaResponse)(nil),      // 6: diskless_cloud_web.RegisterAreaResponse
	(*UnregisterAreaRequest)(nil),     // 7: diskless_cloud_web.UnregisterAreaRequest
	(*UnregisterAreaBody)(nil),        // 8: diskless_cloud_web.UnregisterAreaBody
	(*UnregisterAreaResponse)(nil),    // 9: diskless_cloud_web.UnregisterAreaResponse
	(*ChangeAreaInfoRequest)(nil),     // 10: diskless_cloud_web.ChangeAreaInfoRequest
	(*ChangeAreaInfoBody)(nil),        // 11: diskless_cloud_web.ChangeAreaInfoBody
	(*ChangeAreaInfoResponse)(nil),    // 12: diskless_cloud_web.ChangeAreaInfoResponse
	(*QueryAreaListRequest)(nil),      // 13: diskless_cloud_web.QueryAreaListRequest
	(*AreaBaseInfo)(nil),              // 14: diskless_cloud_web.AreaBaseInfo
	(*QueryAreaListBody)(nil),         // 15: diskless_cloud_web.QueryAreaListBody
	(*QueryAreaListResponse)(nil),     // 16: diskless_cloud_web.QueryAreaListResponse
	(*CallAreaApiRequest)(nil),        // 17: diskless_cloud_web.CallAreaApiRequest
	(*CallAreaApiBody)(nil),           // 18: diskless_cloud_web.CallAreaApiBody
	(*CallAreaApiResponse)(nil),       // 19: diskless_cloud_web.CallAreaApiResponse
	(*DirectPostAreaApiRequest)(nil),  // 20: diskless_cloud_web.DirectPostAreaApiRequest
	(*DirectPostAreaApiResponse)(nil), // 21: diskless_cloud_web.DirectPostAreaApiResponse
	(*DirectGetAreaApiRequest)(nil),   // 22: diskless_cloud_web.DirectGetAreaApiRequest
	(*DirectGetAreaApiResponse)(nil),  // 23: diskless_cloud_web.DirectGetAreaApiResponse
	(*common.RspInfo)(nil),            // 24: common.RspInfo
}
var file_diskless_cloud_web_diskless_cloud_web_proto_depIdxs = []int32{
	1,  // 0: diskless_cloud_web.GetRegionMapBody.region_map:type_name -> diskless_cloud_web.Region
	24, // 1: diskless_cloud_web.GetRegionMapResponse.ret:type_name -> common.RspInfo
	2,  // 2: diskless_cloud_web.GetRegionMapResponse.body:type_name -> diskless_cloud_web.GetRegionMapBody
	24, // 3: diskless_cloud_web.RegisterAreaResponse.ret:type_name -> common.RspInfo
	5,  // 4: diskless_cloud_web.RegisterAreaResponse.body:type_name -> diskless_cloud_web.RegisterAreaBody
	24, // 5: diskless_cloud_web.UnregisterAreaBody.rets:type_name -> common.RspInfo
	24, // 6: diskless_cloud_web.UnregisterAreaResponse.ret:type_name -> common.RspInfo
	8,  // 7: diskless_cloud_web.UnregisterAreaResponse.body:type_name -> diskless_cloud_web.UnregisterAreaBody
	24, // 8: diskless_cloud_web.ChangeAreaInfoResponse.ret:type_name -> common.RspInfo
	11, // 9: diskless_cloud_web.ChangeAreaInfoResponse.body:type_name -> diskless_cloud_web.ChangeAreaInfoBody
	14, // 10: diskless_cloud_web.QueryAreaListBody.list:type_name -> diskless_cloud_web.AreaBaseInfo
	24, // 11: diskless_cloud_web.QueryAreaListResponse.ret:type_name -> common.RspInfo
	15, // 12: diskless_cloud_web.QueryAreaListResponse.body:type_name -> diskless_cloud_web.QueryAreaListBody
	24, // 13: diskless_cloud_web.CallAreaApiResponse.ret:type_name -> common.RspInfo
	18, // 14: diskless_cloud_web.CallAreaApiResponse.body:type_name -> diskless_cloud_web.CallAreaApiBody
	0,  // 15: diskless_cloud_web.DisklessCloudWeb.GetRegionMap:input_type -> diskless_cloud_web.GetRegionMapRequest
	4,  // 16: diskless_cloud_web.DisklessCloudWeb.RegisterArea:input_type -> diskless_cloud_web.RegisterAreaRequest
	7,  // 17: diskless_cloud_web.DisklessCloudWeb.UnregisterArea:input_type -> diskless_cloud_web.UnregisterAreaRequest
	10, // 18: diskless_cloud_web.DisklessCloudWeb.ChangeAreaInfo:input_type -> diskless_cloud_web.ChangeAreaInfoRequest
	13, // 19: diskless_cloud_web.DisklessCloudWeb.QueryAreaList:input_type -> diskless_cloud_web.QueryAreaListRequest
	17, // 20: diskless_cloud_web.DisklessCloudWeb.PostAreaApi:input_type -> diskless_cloud_web.CallAreaApiRequest
	17, // 21: diskless_cloud_web.DisklessCloudWeb.GetAreaApi:input_type -> diskless_cloud_web.CallAreaApiRequest
	20, // 22: diskless_cloud_web.DisklessCloudWeb.DirectPostAreaApi:input_type -> diskless_cloud_web.DirectPostAreaApiRequest
	22, // 23: diskless_cloud_web.DisklessCloudWeb.DirectGetAreaApi:input_type -> diskless_cloud_web.DirectGetAreaApiRequest
	3,  // 24: diskless_cloud_web.DisklessCloudWeb.GetRegionMap:output_type -> diskless_cloud_web.GetRegionMapResponse
	6,  // 25: diskless_cloud_web.DisklessCloudWeb.RegisterArea:output_type -> diskless_cloud_web.RegisterAreaResponse
	9,  // 26: diskless_cloud_web.DisklessCloudWeb.UnregisterArea:output_type -> diskless_cloud_web.UnregisterAreaResponse
	12, // 27: diskless_cloud_web.DisklessCloudWeb.ChangeAreaInfo:output_type -> diskless_cloud_web.ChangeAreaInfoResponse
	16, // 28: diskless_cloud_web.DisklessCloudWeb.QueryAreaList:output_type -> diskless_cloud_web.QueryAreaListResponse
	19, // 29: diskless_cloud_web.DisklessCloudWeb.PostAreaApi:output_type -> diskless_cloud_web.CallAreaApiResponse
	19, // 30: diskless_cloud_web.DisklessCloudWeb.GetAreaApi:output_type -> diskless_cloud_web.CallAreaApiResponse
	21, // 31: diskless_cloud_web.DisklessCloudWeb.DirectPostAreaApi:output_type -> diskless_cloud_web.DirectPostAreaApiResponse
	23, // 32: diskless_cloud_web.DisklessCloudWeb.DirectGetAreaApi:output_type -> diskless_cloud_web.DirectGetAreaApiResponse
	24, // [24:33] is the sub-list for method output_type
	15, // [15:24] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_diskless_cloud_web_diskless_cloud_web_proto_init() }
func file_diskless_cloud_web_diskless_cloud_web_proto_init() {
	if File_diskless_cloud_web_diskless_cloud_web_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionMapBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAreaBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterAreaBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAreaInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAreaInfoBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAreaInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAreaListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAreaListBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAreaListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAreaApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAreaApiBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAreaApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectPostAreaApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectPostAreaApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectGetAreaApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectGetAreaApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diskless_cloud_web_diskless_cloud_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diskless_cloud_web_diskless_cloud_web_proto_goTypes,
		DependencyIndexes: file_diskless_cloud_web_diskless_cloud_web_proto_depIdxs,
		MessageInfos:      file_diskless_cloud_web_diskless_cloud_web_proto_msgTypes,
	}.Build()
	File_diskless_cloud_web_diskless_cloud_web_proto = out.File
	file_diskless_cloud_web_diskless_cloud_web_proto_rawDesc = nil
	file_diskless_cloud_web_diskless_cloud_web_proto_goTypes = nil
	file_diskless_cloud_web_diskless_cloud_web_proto_depIdxs = nil
}
