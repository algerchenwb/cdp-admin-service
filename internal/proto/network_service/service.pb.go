// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.15.8
// source: network_service/service.proto

package network_service

import (
	common "gitlab.vrviu.com/diskless_stack/diskless_stack/protocol/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_e_ok       ErrorCode = 0
	ErrorCode_e_param    ErrorCode = -1
	ErrorCode_e_sys      ErrorCode = -2
	ErrorCode_e_busy     ErrorCode = -3
	ErrorCode_e_conflict ErrorCode = -4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "e_ok",
		-1: "e_param",
		-2: "e_sys",
		-3: "e_busy",
		-4: "e_conflict",
	}
	ErrorCode_value = map[string]int32{
		"e_ok":       0,
		"e_param":    -1,
		"e_sys":      -2,
		"e_busy":     -3,
		"e_conflict": -4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_service_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_network_service_service_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{0}
}

type CommRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CommRet) Reset() {
	*x = CommRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommRet) ProtoMessage() {}

func (x *CommRet) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommRet.ProtoReflect.Descriptor instead.
func (*CommRet) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{0}
}

func (x *CommRet) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommRet) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SwitchSetVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`          // 流水ID
	SwitchId   int64  `protobuf:"varint,2,opt,name=switch_id,proto3" json:"switch_id,omitempty"`     // 交换机ID
	SwitchPort int32  `protobuf:"varint,3,opt,name=switch_port,proto3" json:"switch_port,omitempty"` // 交换机端口
	Vlan       int32  `protobuf:"varint,4,opt,name=vlan,proto3" json:"vlan,omitempty"`               // vlan
	Mac        string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`                  // mac
}

func (x *SwitchSetVlanRequest) Reset() {
	*x = SwitchSetVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchSetVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSetVlanRequest) ProtoMessage() {}

func (x *SwitchSetVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSetVlanRequest.ProtoReflect.Descriptor instead.
func (*SwitchSetVlanRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{1}
}

func (x *SwitchSetVlanRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *SwitchSetVlanRequest) GetSwitchId() int64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *SwitchSetVlanRequest) GetSwitchPort() int32 {
	if x != nil {
		return x.SwitchPort
	}
	return 0
}

func (x *SwitchSetVlanRequest) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *SwitchSetVlanRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type SwitchSetVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *SwitchSetVlanResponse) Reset() {
	*x = SwitchSetVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchSetVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSetVlanResponse) ProtoMessage() {}

func (x *SwitchSetVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSetVlanResponse.ProtoReflect.Descriptor instead.
func (*SwitchSetVlanResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{2}
}

func (x *SwitchSetVlanResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type NetInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask     string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway  string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1     string `protobuf:"bytes,4,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2     string `protobuf:"bytes,5,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostName string `protobuf:"bytes,6,opt,name=host_name,proto3" json:"host_name,omitempty"`
	VlanId   int32  `protobuf:"varint,7,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
}

func (x *NetInfoData) Reset() {
	*x = NetInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfoData) ProtoMessage() {}

func (x *NetInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfoData.ProtoReflect.Descriptor instead.
func (*NetInfoData) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{3}
}

func (x *NetInfoData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetInfoData) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *NetInfoData) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NetInfoData) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *NetInfoData) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *NetInfoData) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NetInfoData) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type DynamicNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         float64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
	Ip         string  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask       string  `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway    string  `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1       string  `protobuf:"bytes,5,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2       string  `protobuf:"bytes,6,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostName   string  `protobuf:"bytes,7,opt,name=host_name,proto3" json:"host_name,omitempty"`
	VlanId     int32   `protobuf:"varint,8,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	State      int32   `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`             // 状态：0 - 正常; 1 - 废弃
	CreateTime string  `protobuf:"bytes,10,opt,name=create_time,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime string  `protobuf:"bytes,11,opt,name=update_time,proto3" json:"update_time,omitempty"` // 用户最后更新时间
	ModifyTime string  `protobuf:"bytes,12,opt,name=modify_time,proto3" json:"modify_time,omitempty"` // db最后更新时间
}

func (x *DynamicNet) Reset() {
	*x = DynamicNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicNet) ProtoMessage() {}

func (x *DynamicNet) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicNet.ProtoReflect.Descriptor instead.
func (*DynamicNet) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicNet) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DynamicNet) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DynamicNet) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *DynamicNet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DynamicNet) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *DynamicNet) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *DynamicNet) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DynamicNet) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *DynamicNet) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DynamicNet) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DynamicNet) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DynamicNet) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type DefaultNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         float64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
	Ip         string  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask       string  `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway    string  `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1       string  `protobuf:"bytes,5,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2       string  `protobuf:"bytes,6,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostName   string  `protobuf:"bytes,7,opt,name=host_name,proto3" json:"host_name,omitempty"`
	VlanId     int32   `protobuf:"varint,8,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	ExpireTime string  `protobuf:"bytes,9,opt,name=expire_time,proto3" json:"expire_time,omitempty"`
	BindMac    string  `protobuf:"bytes,10,opt,name=bind_mac,proto3" json:"bind_mac,omitempty"`
	State      int32   `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`            // 状态：0 - 正常; 1 - 废弃
	CreateTime string  `protobuf:"bytes,12,opt,name=create_time,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime string  `protobuf:"bytes,13,opt,name=update_time,proto3" json:"update_time,omitempty"` // 用户最后更新时间
	ModifyTime string  `protobuf:"bytes,14,opt,name=modify_time,proto3" json:"modify_time,omitempty"` // db最后更新时间
}

func (x *DefaultNet) Reset() {
	*x = DefaultNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultNet) ProtoMessage() {}

func (x *DefaultNet) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultNet.ProtoReflect.Descriptor instead.
func (*DefaultNet) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{5}
}

func (x *DefaultNet) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DefaultNet) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DefaultNet) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *DefaultNet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DefaultNet) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *DefaultNet) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *DefaultNet) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DefaultNet) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *DefaultNet) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *DefaultNet) GetBindMac() string {
	if x != nil {
		return x.BindMac
	}
	return ""
}

func (x *DefaultNet) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DefaultNet) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DefaultNet) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DefaultNet) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type GetNetInfoByIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`           // 网络信息主键ip
}

func (x *GetNetInfoByIpRequest) Reset() {
	*x = GetNetInfoByIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetInfoByIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetInfoByIpRequest) ProtoMessage() {}

func (x *GetNetInfoByIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetInfoByIpRequest.ProtoReflect.Descriptor instead.
func (*GetNetInfoByIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetNetInfoByIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetNetInfoByIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetNetInfoByIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	NetInfo *NetInfoData    `protobuf:"bytes,2,opt,name=net_info,proto3" json:"net_info,omitempty"`
}

func (x *GetNetInfoByIpResponse) Reset() {
	*x = GetNetInfoByIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetInfoByIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetInfoByIpResponse) ProtoMessage() {}

func (x *GetNetInfoByIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetInfoByIpResponse.ProtoReflect.Descriptor instead.
func (*GetNetInfoByIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetNetInfoByIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetNetInfoByIpResponse) GetNetInfo() *NetInfoData {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

// vlan
type AddVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Id             int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	VlanId         int32  `protobuf:"varint,3,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	Ip             string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask           string `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway        string `protobuf:"bytes,6,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1           string `protobuf:"bytes,7,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2           string `protobuf:"bytes,8,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostNamePrefix string `protobuf:"bytes,9,opt,name=host_name_prefix,proto3" json:"host_name_prefix,omitempty"`
	Num            int32  `protobuf:"varint,10,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AddVlanRequest) Reset() {
	*x = AddVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVlanRequest) ProtoMessage() {}

func (x *AddVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVlanRequest.ProtoReflect.Descriptor instead.
func (*AddVlanRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddVlanRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddVlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddVlanRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *AddVlanRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddVlanRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *AddVlanRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AddVlanRequest) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *AddVlanRequest) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *AddVlanRequest) GetHostNamePrefix() string {
	if x != nil {
		return x.HostNamePrefix
	}
	return ""
}

func (x *AddVlanRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AddVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddVlanResponse) Reset() {
	*x = AddVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVlanResponse) ProtoMessage() {}

func (x *AddVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVlanResponse.ProtoReflect.Descriptor instead.
func (*AddVlanResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddVlanResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type DelVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Id     int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	VlanId int32  `protobuf:"varint,3,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
}

func (x *DelVlanRequest) Reset() {
	*x = DelVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelVlanRequest) ProtoMessage() {}

func (x *DelVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelVlanRequest.ProtoReflect.Descriptor instead.
func (*DelVlanRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{10}
}

func (x *DelVlanRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DelVlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelVlanRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type DelVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *DelVlanResponse) Reset() {
	*x = DelVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelVlanResponse) ProtoMessage() {}

func (x *DelVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelVlanResponse.ProtoReflect.Descriptor instead.
func (*DelVlanResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{11}
}

func (x *DelVlanResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type UpdateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string    `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`     // 流水ID
	VlanInfo *VlanInfo `protobuf:"bytes,2,opt,name=vlan_info,proto3" json:"vlan_info,omitempty"` // 新内容
}

func (x *UpdateVlanRequest) Reset() {
	*x = UpdateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVlanRequest) ProtoMessage() {}

func (x *UpdateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateVlanRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateVlanRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateVlanRequest) GetVlanInfo() *VlanInfo {
	if x != nil {
		return x.VlanInfo
	}
	return nil
}

type UpdateVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *UpdateVlanResponse) Reset() {
	*x = UpdateVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVlanResponse) ProtoMessage() {}

func (x *UpdateVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVlanResponse.ProtoReflect.Descriptor instead.
func (*UpdateVlanResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateVlanResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type VlanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             float64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
	VlanId         int32   `protobuf:"varint,2,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	Ip             string  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask           string  `protobuf:"bytes,4,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway        string  `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1           string  `protobuf:"bytes,6,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2           string  `protobuf:"bytes,7,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostNamePrefix string  `protobuf:"bytes,8,opt,name=host_name_prefix,proto3" json:"host_name_prefix,omitempty"`
	State          int32   `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`             // 状态：0 - 正常; 1 - 废弃
	CreateTime     string  `protobuf:"bytes,10,opt,name=create_time,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime     string  `protobuf:"bytes,11,opt,name=update_time,proto3" json:"update_time,omitempty"` // 用户最后更新时间
	ModifyTime     string  `protobuf:"bytes,12,opt,name=modify_time,proto3" json:"modify_time,omitempty"` // db最后更新时间
}

func (x *VlanInfo) Reset() {
	*x = VlanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanInfo) ProtoMessage() {}

func (x *VlanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanInfo.ProtoReflect.Descriptor instead.
func (*VlanInfo) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{14}
}

func (x *VlanInfo) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VlanInfo) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VlanInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *VlanInfo) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *VlanInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *VlanInfo) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *VlanInfo) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *VlanInfo) GetHostNamePrefix() string {
	if x != nil {
		return x.HostNamePrefix
	}
	return ""
}

func (x *VlanInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *VlanInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VlanInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *VlanInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type SZCtyunSetVlanTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskId        int64  `protobuf:"varint,2,opt,name=task_id,proto3" json:"task_id,omitempty"` // unique_key
	Mac           string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Vlan          string `protobuf:"bytes,4,opt,name=vlan,proto3" json:"vlan,omitempty"`
	State         int32  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"` // 状态: 0-初始化; 1-调用失败; 2-调用成功; 3-回调成功; 4-超时失败
	SetCode       string `protobuf:"bytes,6,opt,name=set_code,proto3" json:"set_code,omitempty"`
	CbCode        string `protobuf:"bytes,7,opt,name=cb_code,proto3" json:"cb_code,omitempty"`
	SetfinishTime string `protobuf:"bytes,8,opt,name=setfinish_time,proto3" json:"setfinish_time,omitempty"`
	CtyuncbTime   string `protobuf:"bytes,9,opt,name=ctyuncb_time,proto3" json:"ctyuncb_time,omitempty"`
	TimetoutTime  string `protobuf:"bytes,10,opt,name=timetout_time,proto3" json:"timetout_time,omitempty"`
	CreateTime    string `protobuf:"bytes,11,opt,name=create_time,proto3" json:"create_time,omitempty"`
	UpdateTime    string `protobuf:"bytes,12,opt,name=update_time,proto3" json:"update_time,omitempty"`
	ModifyTime    string `protobuf:"bytes,13,opt,name=modify_time,proto3" json:"modify_time,omitempty"`
}

func (x *SZCtyunSetVlanTask) Reset() {
	*x = SZCtyunSetVlanTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SZCtyunSetVlanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SZCtyunSetVlanTask) ProtoMessage() {}

func (x *SZCtyunSetVlanTask) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SZCtyunSetVlanTask.ProtoReflect.Descriptor instead.
func (*SZCtyunSetVlanTask) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{15}
}

func (x *SZCtyunSetVlanTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SZCtyunSetVlanTask) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SZCtyunSetVlanTask) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SZCtyunSetVlanTask) GetSetCode() string {
	if x != nil {
		return x.SetCode
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetCbCode() string {
	if x != nil {
		return x.CbCode
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetSetfinishTime() string {
	if x != nil {
		return x.SetfinishTime
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetCtyuncbTime() string {
	if x != nil {
		return x.CtyuncbTime
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetTimetoutTime() string {
	if x != nil {
		return x.TimetoutTime
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SZCtyunSetVlanTask) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type QueryVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryVlanRequest) Reset() {
	*x = QueryVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVlanRequest) ProtoMessage() {}

func (x *QueryVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVlanRequest.ProtoReflect.Descriptor instead.
func (*QueryVlanRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{16}
}

func (x *QueryVlanRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryVlanRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryVlanRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryVlanRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryVlanRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryVlanRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type QueryVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List  []*VlanInfo     `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryVlanResponse) Reset() {
	*x = QueryVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVlanResponse) ProtoMessage() {}

func (x *QueryVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVlanResponse.ProtoReflect.Descriptor instead.
func (*QueryVlanResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{17}
}

func (x *QueryVlanResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryVlanResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryVlanResponse) GetList() []*VlanInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{18}
}

func (x *Status) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QuerySZCtyunSetVlanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id,omitempty"`
}

func (x *QuerySZCtyunSetVlanTaskRequest) Reset() {
	*x = QuerySZCtyunSetVlanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySZCtyunSetVlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySZCtyunSetVlanTaskRequest) ProtoMessage() {}

func (x *QuerySZCtyunSetVlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySZCtyunSetVlanTaskRequest.ProtoReflect.Descriptor instead.
func (*QuerySZCtyunSetVlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{19}
}

func (x *QuerySZCtyunSetVlanTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type QuerySZCtyunSetVlanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *common.RspInfo     `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	SzctyunSetvlanTask *SZCtyunSetVlanTask `protobuf:"bytes,2,opt,name=szctyun_setvlan_task,proto3" json:"szctyun_setvlan_task,omitempty"`
}

func (x *QuerySZCtyunSetVlanTaskResponse) Reset() {
	*x = QuerySZCtyunSetVlanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySZCtyunSetVlanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySZCtyunSetVlanTaskResponse) ProtoMessage() {}

func (x *QuerySZCtyunSetVlanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySZCtyunSetVlanTaskResponse.ProtoReflect.Descriptor instead.
func (*QuerySZCtyunSetVlanTaskResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{20}
}

func (x *QuerySZCtyunSetVlanTaskResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QuerySZCtyunSetVlanTaskResponse) GetSzctyunSetvlanTask() *SZCtyunSetVlanTask {
	if x != nil {
		return x.SzctyunSetvlanTask
	}
	return nil
}

type UpdateSZCtyunSetVlanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id,omitempty"`
	State  int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdateSZCtyunSetVlanTaskRequest) Reset() {
	*x = UpdateSZCtyunSetVlanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSZCtyunSetVlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSZCtyunSetVlanTaskRequest) ProtoMessage() {}

func (x *UpdateSZCtyunSetVlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSZCtyunSetVlanTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateSZCtyunSetVlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateSZCtyunSetVlanTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *UpdateSZCtyunSetVlanTaskRequest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type UpdateSZCtyunSetVlanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string  `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Status    *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateSZCtyunSetVlanTaskResponse) Reset() {
	*x = UpdateSZCtyunSetVlanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSZCtyunSetVlanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSZCtyunSetVlanTaskResponse) ProtoMessage() {}

func (x *UpdateSZCtyunSetVlanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSZCtyunSetVlanTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateSZCtyunSetVlanTaskResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSZCtyunSetVlanTaskResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateSZCtyunSetVlanTaskResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AddDefaultNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Ip             string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask           string `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway        string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1           string `protobuf:"bytes,5,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2           string `protobuf:"bytes,6,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostNamePrefix string `protobuf:"bytes,7,opt,name=host_name_prefix,proto3" json:"host_name_prefix,omitempty"`
	VlanId         int32  `protobuf:"varint,8,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	Num            int32  `protobuf:"varint,9,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AddDefaultNetRequest) Reset() {
	*x = AddDefaultNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultNetRequest) ProtoMessage() {}

func (x *AddDefaultNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultNetRequest.ProtoReflect.Descriptor instead.
func (*AddDefaultNetRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{23}
}

func (x *AddDefaultNetRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddDefaultNetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddDefaultNetRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *AddDefaultNetRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AddDefaultNetRequest) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *AddDefaultNetRequest) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *AddDefaultNetRequest) GetHostNamePrefix() string {
	if x != nil {
		return x.HostNamePrefix
	}
	return ""
}

func (x *AddDefaultNetRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *AddDefaultNetRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AddDefaultNetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDefaultNetResponse) Reset() {
	*x = AddDefaultNetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultNetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultNetResponse) ProtoMessage() {}

func (x *AddDefaultNetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultNetResponse.ProtoReflect.Descriptor instead.
func (*AddDefaultNetResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{24}
}

func (x *AddDefaultNetResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type AddDynamicNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId         string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Ip             string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask           string `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway        string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1           string `protobuf:"bytes,5,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2           string `protobuf:"bytes,6,opt,name=dns2,proto3" json:"dns2,omitempty"`
	HostNamePrefix string `protobuf:"bytes,7,opt,name=host_name_prefix,proto3" json:"host_name_prefix,omitempty"`
	VlanId         int32  `protobuf:"varint,8,opt,name=vlan_id,proto3" json:"vlan_id,omitempty"`
	Num            int32  `protobuf:"varint,9,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AddDynamicNetRequest) Reset() {
	*x = AddDynamicNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicNetRequest) ProtoMessage() {}

func (x *AddDynamicNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicNetRequest.ProtoReflect.Descriptor instead.
func (*AddDynamicNetRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{25}
}

func (x *AddDynamicNetRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddDynamicNetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddDynamicNetRequest) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *AddDynamicNetRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AddDynamicNetRequest) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *AddDynamicNetRequest) GetDns2() string {
	if x != nil {
		return x.Dns2
	}
	return ""
}

func (x *AddDynamicNetRequest) GetHostNamePrefix() string {
	if x != nil {
		return x.HostNamePrefix
	}
	return ""
}

func (x *AddDynamicNetRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *AddDynamicNetRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AddDynamicNetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDynamicNetResponse) Reset() {
	*x = AddDynamicNetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicNetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicNetResponse) ProtoMessage() {}

func (x *AddDynamicNetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicNetResponse.ProtoReflect.Descriptor instead.
func (*AddDynamicNetResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{26}
}

func (x *AddDynamicNetResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type AddDefaultIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string      `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	NetInfo *DefaultNet `protobuf:"bytes,2,opt,name=net_info,proto3" json:"net_info,omitempty"`
}

func (x *AddDefaultIpRequest) Reset() {
	*x = AddDefaultIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultIpRequest) ProtoMessage() {}

func (x *AddDefaultIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultIpRequest.ProtoReflect.Descriptor instead.
func (*AddDefaultIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{27}
}

func (x *AddDefaultIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddDefaultIpRequest) GetNetInfo() *DefaultNet {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

type AddDefaultIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDefaultIpResponse) Reset() {
	*x = AddDefaultIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultIpResponse) ProtoMessage() {}

func (x *AddDefaultIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultIpResponse.ProtoReflect.Descriptor instead.
func (*AddDefaultIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{28}
}

func (x *AddDefaultIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type DelDefaultIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`           // 网络信息主键ip
}

func (x *DelDefaultIpRequest) Reset() {
	*x = DelDefaultIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultIpRequest) ProtoMessage() {}

func (x *DelDefaultIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultIpRequest.ProtoReflect.Descriptor instead.
func (*DelDefaultIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{29}
}

func (x *DelDefaultIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DelDefaultIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type DelDefaultIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *DelDefaultIpResponse) Reset() {
	*x = DelDefaultIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultIpResponse) ProtoMessage() {}

func (x *DelDefaultIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultIpResponse.ProtoReflect.Descriptor instead.
func (*DelDefaultIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{30}
}

func (x *DelDefaultIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type UpdateDefaultIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string      `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	NetInfo *DefaultNet `protobuf:"bytes,2,opt,name=net_info,proto3" json:"net_info,omitempty"`
}

func (x *UpdateDefaultIpRequest) Reset() {
	*x = UpdateDefaultIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultIpRequest) ProtoMessage() {}

func (x *UpdateDefaultIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultIpRequest.ProtoReflect.Descriptor instead.
func (*UpdateDefaultIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateDefaultIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateDefaultIpRequest) GetNetInfo() *DefaultNet {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

type UpdateDefaultIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *UpdateDefaultIpResponse) Reset() {
	*x = UpdateDefaultIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultIpResponse) ProtoMessage() {}

func (x *UpdateDefaultIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultIpResponse.ProtoReflect.Descriptor instead.
func (*UpdateDefaultIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateDefaultIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type QueryDefaultIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryDefaultIpRequest) Reset() {
	*x = QueryDefaultIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDefaultIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDefaultIpRequest) ProtoMessage() {}

func (x *QueryDefaultIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDefaultIpRequest.ProtoReflect.Descriptor instead.
func (*QueryDefaultIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{33}
}

func (x *QueryDefaultIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryDefaultIpRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryDefaultIpRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryDefaultIpRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryDefaultIpRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryDefaultIpRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type QueryDefaultIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DefaultNet   `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryDefaultIpResponse) Reset() {
	*x = QueryDefaultIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDefaultIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDefaultIpResponse) ProtoMessage() {}

func (x *QueryDefaultIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDefaultIpResponse.ProtoReflect.Descriptor instead.
func (*QueryDefaultIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{34}
}

func (x *QueryDefaultIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryDefaultIpResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDefaultIpResponse) GetList() []*DefaultNet {
	if x != nil {
		return x.List
	}
	return nil
}

type AddDynamicIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string      `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	NetInfo *DynamicNet `protobuf:"bytes,2,opt,name=net_info,proto3" json:"net_info,omitempty"`
}

func (x *AddDynamicIpRequest) Reset() {
	*x = AddDynamicIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicIpRequest) ProtoMessage() {}

func (x *AddDynamicIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicIpRequest.ProtoReflect.Descriptor instead.
func (*AddDynamicIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{35}
}

func (x *AddDynamicIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddDynamicIpRequest) GetNetInfo() *DynamicNet {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

type AddDynamicIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDynamicIpResponse) Reset() {
	*x = AddDynamicIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicIpResponse) ProtoMessage() {}

func (x *AddDynamicIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicIpResponse.ProtoReflect.Descriptor instead.
func (*AddDynamicIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{36}
}

func (x *AddDynamicIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type DelDynamicIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`           // 网络信息主键ip
}

func (x *DelDynamicIpRequest) Reset() {
	*x = DelDynamicIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDynamicIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDynamicIpRequest) ProtoMessage() {}

func (x *DelDynamicIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDynamicIpRequest.ProtoReflect.Descriptor instead.
func (*DelDynamicIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{37}
}

func (x *DelDynamicIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DelDynamicIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type DelDynamicIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *DelDynamicIpResponse) Reset() {
	*x = DelDynamicIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDynamicIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDynamicIpResponse) ProtoMessage() {}

func (x *DelDynamicIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDynamicIpResponse.ProtoReflect.Descriptor instead.
func (*DelDynamicIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{38}
}

func (x *DelDynamicIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type UpdateDynamicIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string      `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	NetInfo *DynamicNet `protobuf:"bytes,2,opt,name=net_info,proto3" json:"net_info,omitempty"`
}

func (x *UpdateDynamicIpRequest) Reset() {
	*x = UpdateDynamicIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDynamicIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDynamicIpRequest) ProtoMessage() {}

func (x *UpdateDynamicIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDynamicIpRequest.ProtoReflect.Descriptor instead.
func (*UpdateDynamicIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateDynamicIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateDynamicIpRequest) GetNetInfo() *DynamicNet {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

type UpdateDynamicIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *UpdateDynamicIpResponse) Reset() {
	*x = UpdateDynamicIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDynamicIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDynamicIpResponse) ProtoMessage() {}

func (x *UpdateDynamicIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDynamicIpResponse.ProtoReflect.Descriptor instead.
func (*UpdateDynamicIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateDynamicIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type QueryDynamicIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryDynamicIpRequest) Reset() {
	*x = QueryDynamicIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDynamicIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDynamicIpRequest) ProtoMessage() {}

func (x *QueryDynamicIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDynamicIpRequest.ProtoReflect.Descriptor instead.
func (*QueryDynamicIpRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{41}
}

func (x *QueryDynamicIpRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryDynamicIpRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryDynamicIpRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryDynamicIpRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryDynamicIpRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryDynamicIpRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type QueryDynamicIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DynamicNet   `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryDynamicIpResponse) Reset() {
	*x = QueryDynamicIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDynamicIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDynamicIpResponse) ProtoMessage() {}

func (x *QueryDynamicIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDynamicIpResponse.ProtoReflect.Descriptor instead.
func (*QueryDynamicIpResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{42}
}

func (x *QueryDynamicIpResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryDynamicIpResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDynamicIpResponse) GetList() []*DynamicNet {
	if x != nil {
		return x.List
	}
	return nil
}

type SwitchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           float64 `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"` // 主键
	Address      string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	DevType      string  `protobuf:"bytes,4,opt,name=dev_type,proto3" json:"dev_type,omitempty"`
	Manufacturer string  `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Username     string  `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password     string  `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Remark       string  `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *SwitchInfo) Reset() {
	*x = SwitchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInfo) ProtoMessage() {}

func (x *SwitchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInfo.ProtoReflect.Descriptor instead.
func (*SwitchInfo) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{43}
}

func (x *SwitchInfo) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SwitchInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SwitchInfo) GetDevType() string {
	if x != nil {
		return x.DevType
	}
	return ""
}

func (x *SwitchInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SwitchInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SwitchInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SwitchInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AddSwitchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string  `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Id           float64 `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`         // 主键
	Address      string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	DevType      string  `protobuf:"bytes,4,opt,name=dev_type,proto3" json:"dev_type,omitempty"`
	Manufacturer string  `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Username     string  `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password     string  `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Remark       string  `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *AddSwitchInfoRequest) Reset() {
	*x = AddSwitchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSwitchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSwitchInfoRequest) ProtoMessage() {}

func (x *AddSwitchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSwitchInfoRequest.ProtoReflect.Descriptor instead.
func (*AddSwitchInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{44}
}

func (x *AddSwitchInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSwitchInfoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetDevType() string {
	if x != nil {
		return x.DevType
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddSwitchInfoRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AddSwitchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddSwitchInfoResponse) Reset() {
	*x = AddSwitchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSwitchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSwitchInfoResponse) ProtoMessage() {}

func (x *AddSwitchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSwitchInfoResponse.ProtoReflect.Descriptor instead.
func (*AddSwitchInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{45}
}

func (x *AddSwitchInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type DelSwitchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string  `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	Id     float64 `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`         // 主键
}

func (x *DelSwitchInfoRequest) Reset() {
	*x = DelSwitchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSwitchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSwitchInfoRequest) ProtoMessage() {}

func (x *DelSwitchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSwitchInfoRequest.ProtoReflect.Descriptor instead.
func (*DelSwitchInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{46}
}

func (x *DelSwitchInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DelSwitchInfoRequest) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySwitchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QuerySwitchInfoRequest) Reset() {
	*x = QuerySwitchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySwitchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySwitchInfoRequest) ProtoMessage() {}

func (x *QuerySwitchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySwitchInfoRequest.ProtoReflect.Descriptor instead.
func (*QuerySwitchInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{47}
}

func (x *QuerySwitchInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QuerySwitchInfoRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QuerySwitchInfoRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QuerySwitchInfoRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QuerySwitchInfoRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QuerySwitchInfoRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type QuerySwitchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SwitchInfo   `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySwitchInfoResponse) Reset() {
	*x = QuerySwitchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySwitchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySwitchInfoResponse) ProtoMessage() {}

func (x *QuerySwitchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySwitchInfoResponse.ProtoReflect.Descriptor instead.
func (*QuerySwitchInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{48}
}

func (x *QuerySwitchInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QuerySwitchInfoResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySwitchInfoResponse) GetList() []*SwitchInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateSwitchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId     string      `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"` // 流水ID
	SwitchInfo *SwitchInfo `protobuf:"bytes,2,opt,name=switch_info,proto3" json:"switch_info,omitempty"`
}

func (x *UpdateSwitchInfoRequest) Reset() {
	*x = UpdateSwitchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchInfoRequest) ProtoMessage() {}

func (x *UpdateSwitchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateSwitchInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateSwitchInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateSwitchInfoRequest) GetSwitchInfo() *SwitchInfo {
	if x != nil {
		return x.SwitchInfo
	}
	return nil
}

type UpdateSwitchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *UpdateSwitchInfoResponse) Reset() {
	*x = UpdateSwitchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchInfoResponse) ProtoMessage() {}

func (x *UpdateSwitchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateSwitchInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateSwitchInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type DelSwitchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *DelSwitchInfoResponse) Reset() {
	*x = DelSwitchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSwitchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSwitchInfoResponse) ProtoMessage() {}

func (x *DelSwitchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSwitchInfoResponse.ProtoReflect.Descriptor instead.
func (*DelSwitchInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{51}
}

func (x *DelSwitchInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type AddDynamicIpFromCSVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *AddDynamicIpFromCSVRequest) Reset() {
	*x = AddDynamicIpFromCSVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicIpFromCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicIpFromCSVRequest) ProtoMessage() {}

func (x *AddDynamicIpFromCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicIpFromCSVRequest.ProtoReflect.Descriptor instead.
func (*AddDynamicIpFromCSVRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{52}
}

func (x *AddDynamicIpFromCSVRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type AddDynamicIpFromCSVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDynamicIpFromCSVResponse) Reset() {
	*x = AddDynamicIpFromCSVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDynamicIpFromCSVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDynamicIpFromCSVResponse) ProtoMessage() {}

func (x *AddDynamicIpFromCSVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDynamicIpFromCSVResponse.ProtoReflect.Descriptor instead.
func (*AddDynamicIpFromCSVResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{53}
}

func (x *AddDynamicIpFromCSVResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type AddDefaultIpFromCSVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *AddDefaultIpFromCSVRequest) Reset() {
	*x = AddDefaultIpFromCSVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultIpFromCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultIpFromCSVRequest) ProtoMessage() {}

func (x *AddDefaultIpFromCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultIpFromCSVRequest.ProtoReflect.Descriptor instead.
func (*AddDefaultIpFromCSVRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{54}
}

func (x *AddDefaultIpFromCSVRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type AddDefaultIpFromCSVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddDefaultIpFromCSVResponse) Reset() {
	*x = AddDefaultIpFromCSVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultIpFromCSVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultIpFromCSVResponse) ProtoMessage() {}

func (x *AddDefaultIpFromCSVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultIpFromCSVResponse.ProtoReflect.Descriptor instead.
func (*AddDefaultIpFromCSVResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{55}
}

func (x *AddDefaultIpFromCSVResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

type AddSwitchInfoFromCSVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *AddSwitchInfoFromCSVRequest) Reset() {
	*x = AddSwitchInfoFromCSVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSwitchInfoFromCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSwitchInfoFromCSVRequest) ProtoMessage() {}

func (x *AddSwitchInfoFromCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSwitchInfoFromCSVRequest.ProtoReflect.Descriptor instead.
func (*AddSwitchInfoFromCSVRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{56}
}

func (x *AddSwitchInfoFromCSVRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type AddSwitchFromCSVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *common.RspInfo `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *AddSwitchFromCSVResponse) Reset() {
	*x = AddSwitchFromCSVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSwitchFromCSVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSwitchFromCSVResponse) ProtoMessage() {}

func (x *AddSwitchFromCSVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSwitchFromCSVResponse.ProtoReflect.Descriptor instead.
func (*AddSwitchFromCSVResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{57}
}

func (x *AddSwitchFromCSVResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

// 返回 CSV 模板的响应
type CSVTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsvContent string          `protobuf:"bytes,1,opt,name=csv_content,json=csvContent,proto3" json:"csv_content,omitempty"` // 模板内容，以文本形式返回
	Ret        *common.RspInfo `protobuf:"bytes,2,opt,name=ret,json=responseStatus,proto3" json:"ret,omitempty"`             // 响应状态信息
}

func (x *CSVTemplateResponse) Reset() {
	*x = CSVTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVTemplateResponse) ProtoMessage() {}

func (x *CSVTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVTemplateResponse.ProtoReflect.Descriptor instead.
func (*CSVTemplateResponse) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{58}
}

func (x *CSVTemplateResponse) GetCsvContent() string {
	if x != nil {
		return x.CsvContent
	}
	return ""
}

func (x *CSVTemplateResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

// 请求 CSV 模板的空消息体
type CSVTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSVTemplateRequest) Reset() {
	*x = CSVTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVTemplateRequest) ProtoMessage() {}

func (x *CSVTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVTemplateRequest.ProtoReflect.Descriptor instead.
func (*CSVTemplateRequest) Descriptor() ([]byte, []int) {
	return file_network_service_service_proto_rawDescGZIP(), []int{59}
}

var File_network_service_service_proto protoreflect.FileDescriptor

var file_network_service_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x3a, 0x0a,
	0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6e, 0x73, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x0a, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xf4, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73,
	0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e,
	0x73, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x2a,
	0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x34, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0x54, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x66,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x37, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0xc2, 0x02, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x2a, 0x0a, 0x10,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x12, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e,
	0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x74, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x63, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x63, 0x62, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xa6, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a,
	0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x57, 0x0a, 0x14, 0x73, 0x7a, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x14, 0x73, 0x7a, 0x63, 0x74, 0x79, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xee, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x6e, 0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x22, 0x3a, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xee, 0x01, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73,
	0x31, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x6e, 0x73, 0x32, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x3a, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3f,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x39, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e,
	0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x39, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3f, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x39,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xea, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3a, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x72, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x3f, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x40, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0x3f, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x13, 0x43, 0x53, 0x56, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x43, 0x53, 0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2a, 0x6d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x65, 0x5f, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x07, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x12, 0x0a, 0x05, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x13, 0x0a, 0x06, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x10, 0xfd, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x32, 0xbf, 0x23, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x70, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x70, 0x12, 0x75, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a,
	0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x12, 0x75, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x7d, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0xb4, 0x01, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x5a,
	0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x7a, 0x63,
	0x74, 0x79, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x5a, 0x43, 0x74,
	0x79, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e, 0x53, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x5a, 0x43, 0x74, 0x79, 0x75, 0x6e,
	0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x7a, 0x63,
	0x74, 0x79, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e,
	0x65, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4e, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x6e, 0x65, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x70, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70,
	0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x70, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x96, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x70, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x12,
	0x94, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x70, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x12, 0x24, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x69, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x12, 0x92,
	0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49,
	0x70, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x69, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x9a,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xa8, 0x01, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x53, 0x56, 0x12, 0x2b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x64, 0x64, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x76, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x12, 0x2b,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53,
	0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73,
	0x76, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x61, 0x64, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x76, 0x12, 0xa0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x70, 0x43, 0x53, 0x56, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x56, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x63,
	0x73, 0x76, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x43, 0x53, 0x56, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x56, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x53, 0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x63, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa2,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x53, 0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x53,
	0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x53, 0x56, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01,
	0x2a, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x72,
	0x76, 0x69, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_service_service_proto_rawDescOnce sync.Once
	file_network_service_service_proto_rawDescData = file_network_service_service_proto_rawDesc
)

func file_network_service_service_proto_rawDescGZIP() []byte {
	file_network_service_service_proto_rawDescOnce.Do(func() {
		file_network_service_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_service_service_proto_rawDescData)
	})
	return file_network_service_service_proto_rawDescData
}

var file_network_service_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_network_service_service_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_network_service_service_proto_goTypes = []any{
	(ErrorCode)(0),                           // 0: network_service.ErrorCode
	(*CommRet)(nil),                          // 1: network_service.CommRet
	(*SwitchSetVlanRequest)(nil),             // 2: network_service.SwitchSetVlanRequest
	(*SwitchSetVlanResponse)(nil),            // 3: network_service.SwitchSetVlanResponse
	(*NetInfoData)(nil),                      // 4: network_service.NetInfoData
	(*DynamicNet)(nil),                       // 5: network_service.DynamicNet
	(*DefaultNet)(nil),                       // 6: network_service.DefaultNet
	(*GetNetInfoByIpRequest)(nil),            // 7: network_service.GetNetInfoByIpRequest
	(*GetNetInfoByIpResponse)(nil),           // 8: network_service.GetNetInfoByIpResponse
	(*AddVlanRequest)(nil),                   // 9: network_service.AddVlanRequest
	(*AddVlanResponse)(nil),                  // 10: network_service.AddVlanResponse
	(*DelVlanRequest)(nil),                   // 11: network_service.DelVlanRequest
	(*DelVlanResponse)(nil),                  // 12: network_service.DelVlanResponse
	(*UpdateVlanRequest)(nil),                // 13: network_service.UpdateVlanRequest
	(*UpdateVlanResponse)(nil),               // 14: network_service.UpdateVlanResponse
	(*VlanInfo)(nil),                         // 15: network_service.VlanInfo
	(*SZCtyunSetVlanTask)(nil),               // 16: network_service.SZCtyunSetVlanTask
	(*QueryVlanRequest)(nil),                 // 17: network_service.QueryVlanRequest
	(*QueryVlanResponse)(nil),                // 18: network_service.QueryVlanResponse
	(*Status)(nil),                           // 19: network_service.Status
	(*QuerySZCtyunSetVlanTaskRequest)(nil),   // 20: network_service.QuerySZCtyunSetVlanTaskRequest
	(*QuerySZCtyunSetVlanTaskResponse)(nil),  // 21: network_service.QuerySZCtyunSetVlanTaskResponse
	(*UpdateSZCtyunSetVlanTaskRequest)(nil),  // 22: network_service.UpdateSZCtyunSetVlanTaskRequest
	(*UpdateSZCtyunSetVlanTaskResponse)(nil), // 23: network_service.UpdateSZCtyunSetVlanTaskResponse
	(*AddDefaultNetRequest)(nil),             // 24: network_service.AddDefaultNetRequest
	(*AddDefaultNetResponse)(nil),            // 25: network_service.AddDefaultNetResponse
	(*AddDynamicNetRequest)(nil),             // 26: network_service.AddDynamicNetRequest
	(*AddDynamicNetResponse)(nil),            // 27: network_service.AddDynamicNetResponse
	(*AddDefaultIpRequest)(nil),              // 28: network_service.AddDefaultIpRequest
	(*AddDefaultIpResponse)(nil),             // 29: network_service.AddDefaultIpResponse
	(*DelDefaultIpRequest)(nil),              // 30: network_service.DelDefaultIpRequest
	(*DelDefaultIpResponse)(nil),             // 31: network_service.DelDefaultIpResponse
	(*UpdateDefaultIpRequest)(nil),           // 32: network_service.UpdateDefaultIpRequest
	(*UpdateDefaultIpResponse)(nil),          // 33: network_service.UpdateDefaultIpResponse
	(*QueryDefaultIpRequest)(nil),            // 34: network_service.QueryDefaultIpRequest
	(*QueryDefaultIpResponse)(nil),           // 35: network_service.QueryDefaultIpResponse
	(*AddDynamicIpRequest)(nil),              // 36: network_service.AddDynamicIpRequest
	(*AddDynamicIpResponse)(nil),             // 37: network_service.AddDynamicIpResponse
	(*DelDynamicIpRequest)(nil),              // 38: network_service.DelDynamicIpRequest
	(*DelDynamicIpResponse)(nil),             // 39: network_service.DelDynamicIpResponse
	(*UpdateDynamicIpRequest)(nil),           // 40: network_service.UpdateDynamicIpRequest
	(*UpdateDynamicIpResponse)(nil),          // 41: network_service.UpdateDynamicIpResponse
	(*QueryDynamicIpRequest)(nil),            // 42: network_service.QueryDynamicIpRequest
	(*QueryDynamicIpResponse)(nil),           // 43: network_service.QueryDynamicIpResponse
	(*SwitchInfo)(nil),                       // 44: network_service.SwitchInfo
	(*AddSwitchInfoRequest)(nil),             // 45: network_service.AddSwitchInfoRequest
	(*AddSwitchInfoResponse)(nil),            // 46: network_service.AddSwitchInfoResponse
	(*DelSwitchInfoRequest)(nil),             // 47: network_service.DelSwitchInfoRequest
	(*QuerySwitchInfoRequest)(nil),           // 48: network_service.QuerySwitchInfoRequest
	(*QuerySwitchInfoResponse)(nil),          // 49: network_service.QuerySwitchInfoResponse
	(*UpdateSwitchInfoRequest)(nil),          // 50: network_service.UpdateSwitchInfoRequest
	(*UpdateSwitchInfoResponse)(nil),         // 51: network_service.UpdateSwitchInfoResponse
	(*DelSwitchInfoResponse)(nil),            // 52: network_service.DelSwitchInfoResponse
	(*AddDynamicIpFromCSVRequest)(nil),       // 53: network_service.AddDynamicIpFromCSVRequest
	(*AddDynamicIpFromCSVResponse)(nil),      // 54: network_service.AddDynamicIpFromCSVResponse
	(*AddDefaultIpFromCSVRequest)(nil),       // 55: network_service.AddDefaultIpFromCSVRequest
	(*AddDefaultIpFromCSVResponse)(nil),      // 56: network_service.AddDefaultIpFromCSVResponse
	(*AddSwitchInfoFromCSVRequest)(nil),      // 57: network_service.AddSwitchInfoFromCSVRequest
	(*AddSwitchFromCSVResponse)(nil),         // 58: network_service.AddSwitchFromCSVResponse
	(*CSVTemplateResponse)(nil),              // 59: network_service.CSVTemplateResponse
	(*CSVTemplateRequest)(nil),               // 60: network_service.CSVTemplateRequest
	(*common.RspInfo)(nil),                   // 61: common.RspInfo
}
var file_network_service_service_proto_depIdxs = []int32{
	61, // 0: network_service.SwitchSetVlanResponse.ret:type_name -> common.RspInfo
	61, // 1: network_service.GetNetInfoByIpResponse.ret:type_name -> common.RspInfo
	4,  // 2: network_service.GetNetInfoByIpResponse.net_info:type_name -> network_service.NetInfoData
	61, // 3: network_service.AddVlanResponse.ret:type_name -> common.RspInfo
	61, // 4: network_service.DelVlanResponse.ret:type_name -> common.RspInfo
	15, // 5: network_service.UpdateVlanRequest.vlan_info:type_name -> network_service.VlanInfo
	61, // 6: network_service.UpdateVlanResponse.ret:type_name -> common.RspInfo
	61, // 7: network_service.QueryVlanResponse.ret:type_name -> common.RspInfo
	15, // 8: network_service.QueryVlanResponse.list:type_name -> network_service.VlanInfo
	61, // 9: network_service.QuerySZCtyunSetVlanTaskResponse.ret:type_name -> common.RspInfo
	16, // 10: network_service.QuerySZCtyunSetVlanTaskResponse.szctyun_setvlan_task:type_name -> network_service.SZCtyunSetVlanTask
	19, // 11: network_service.UpdateSZCtyunSetVlanTaskResponse.status:type_name -> network_service.Status
	61, // 12: network_service.AddDefaultNetResponse.ret:type_name -> common.RspInfo
	61, // 13: network_service.AddDynamicNetResponse.ret:type_name -> common.RspInfo
	6,  // 14: network_service.AddDefaultIpRequest.net_info:type_name -> network_service.DefaultNet
	61, // 15: network_service.AddDefaultIpResponse.ret:type_name -> common.RspInfo
	61, // 16: network_service.DelDefaultIpResponse.ret:type_name -> common.RspInfo
	6,  // 17: network_service.UpdateDefaultIpRequest.net_info:type_name -> network_service.DefaultNet
	61, // 18: network_service.UpdateDefaultIpResponse.ret:type_name -> common.RspInfo
	61, // 19: network_service.QueryDefaultIpResponse.ret:type_name -> common.RspInfo
	6,  // 20: network_service.QueryDefaultIpResponse.list:type_name -> network_service.DefaultNet
	5,  // 21: network_service.AddDynamicIpRequest.net_info:type_name -> network_service.DynamicNet
	61, // 22: network_service.AddDynamicIpResponse.ret:type_name -> common.RspInfo
	61, // 23: network_service.DelDynamicIpResponse.ret:type_name -> common.RspInfo
	5,  // 24: network_service.UpdateDynamicIpRequest.net_info:type_name -> network_service.DynamicNet
	61, // 25: network_service.UpdateDynamicIpResponse.ret:type_name -> common.RspInfo
	61, // 26: network_service.QueryDynamicIpResponse.ret:type_name -> common.RspInfo
	5,  // 27: network_service.QueryDynamicIpResponse.list:type_name -> network_service.DynamicNet
	61, // 28: network_service.AddSwitchInfoResponse.ret:type_name -> common.RspInfo
	61, // 29: network_service.QuerySwitchInfoResponse.ret:type_name -> common.RspInfo
	44, // 30: network_service.QuerySwitchInfoResponse.list:type_name -> network_service.SwitchInfo
	44, // 31: network_service.UpdateSwitchInfoRequest.switch_info:type_name -> network_service.SwitchInfo
	61, // 32: network_service.UpdateSwitchInfoResponse.ret:type_name -> common.RspInfo
	61, // 33: network_service.DelSwitchInfoResponse.ret:type_name -> common.RspInfo
	61, // 34: network_service.AddDynamicIpFromCSVResponse.ret:type_name -> common.RspInfo
	61, // 35: network_service.AddDefaultIpFromCSVResponse.ret:type_name -> common.RspInfo
	61, // 36: network_service.AddSwitchFromCSVResponse.ret:type_name -> common.RspInfo
	61, // 37: network_service.CSVTemplateResponse.ret:type_name -> common.RspInfo
	2,  // 38: network_service.NetworkService.SwitchSetVlan:input_type -> network_service.SwitchSetVlanRequest
	7,  // 39: network_service.NetworkService.GetNetInfoByIp:input_type -> network_service.GetNetInfoByIpRequest
	9,  // 40: network_service.NetworkService.AddVlan:input_type -> network_service.AddVlanRequest
	11, // 41: network_service.NetworkService.DelVlan:input_type -> network_service.DelVlanRequest
	13, // 42: network_service.NetworkService.UpdateVlan:input_type -> network_service.UpdateVlanRequest
	17, // 43: network_service.NetworkService.QueryVlan:input_type -> network_service.QueryVlanRequest
	20, // 44: network_service.NetworkService.QuerySZCtyunSetVlanTask:input_type -> network_service.QuerySZCtyunSetVlanTaskRequest
	22, // 45: network_service.NetworkService.UpdateSZCtyunSetVlanTask:input_type -> network_service.UpdateSZCtyunSetVlanTaskRequest
	24, // 46: network_service.NetworkService.AddDefaultNet:input_type -> network_service.AddDefaultNetRequest
	26, // 47: network_service.NetworkService.AddDynamicNet:input_type -> network_service.AddDynamicNetRequest
	28, // 48: network_service.NetworkService.AddDefaultIp:input_type -> network_service.AddDefaultIpRequest
	30, // 49: network_service.NetworkService.DelDefaultIp:input_type -> network_service.DelDefaultIpRequest
	32, // 50: network_service.NetworkService.UpdateDefaultIp:input_type -> network_service.UpdateDefaultIpRequest
	32, // 51: network_service.NetworkService.OccupyDefaultIp:input_type -> network_service.UpdateDefaultIpRequest
	32, // 52: network_service.NetworkService.ResetDefaultIp:input_type -> network_service.UpdateDefaultIpRequest
	34, // 53: network_service.NetworkService.QueryDefaultIp:input_type -> network_service.QueryDefaultIpRequest
	36, // 54: network_service.NetworkService.AddDynamicIp:input_type -> network_service.AddDynamicIpRequest
	38, // 55: network_service.NetworkService.DelDynamicIp:input_type -> network_service.DelDynamicIpRequest
	40, // 56: network_service.NetworkService.UpdateDynamicIp:input_type -> network_service.UpdateDynamicIpRequest
	42, // 57: network_service.NetworkService.QueryDynamicIp:input_type -> network_service.QueryDynamicIpRequest
	45, // 58: network_service.NetworkService.AddSwitchInfo:input_type -> network_service.AddSwitchInfoRequest
	47, // 59: network_service.NetworkService.DelSwitchInfo:input_type -> network_service.DelSwitchInfoRequest
	48, // 60: network_service.NetworkService.QuerySwitchInfo:input_type -> network_service.QuerySwitchInfoRequest
	50, // 61: network_service.NetworkService.UpdateSwitchInfo:input_type -> network_service.UpdateSwitchInfoRequest
	53, // 62: network_service.NetworkService.AddDynamicIpFromCSV:input_type -> network_service.AddDynamicIpFromCSVRequest
	55, // 63: network_service.NetworkService.AddDefaultIpFromCSV:input_type -> network_service.AddDefaultIpFromCSVRequest
	57, // 64: network_service.NetworkService.AddSwitchFromCSV:input_type -> network_service.AddSwitchInfoFromCSVRequest
	60, // 65: network_service.NetworkService.GetDynamicIpCSVTemplate:input_type -> network_service.CSVTemplateRequest
	60, // 66: network_service.NetworkService.GetDefaultIpCSVTemplate:input_type -> network_service.CSVTemplateRequest
	60, // 67: network_service.NetworkService.GetSwitchInfoCSVTemplate:input_type -> network_service.CSVTemplateRequest
	3,  // 68: network_service.NetworkService.SwitchSetVlan:output_type -> network_service.SwitchSetVlanResponse
	8,  // 69: network_service.NetworkService.GetNetInfoByIp:output_type -> network_service.GetNetInfoByIpResponse
	10, // 70: network_service.NetworkService.AddVlan:output_type -> network_service.AddVlanResponse
	12, // 71: network_service.NetworkService.DelVlan:output_type -> network_service.DelVlanResponse
	14, // 72: network_service.NetworkService.UpdateVlan:output_type -> network_service.UpdateVlanResponse
	18, // 73: network_service.NetworkService.QueryVlan:output_type -> network_service.QueryVlanResponse
	21, // 74: network_service.NetworkService.QuerySZCtyunSetVlanTask:output_type -> network_service.QuerySZCtyunSetVlanTaskResponse
	23, // 75: network_service.NetworkService.UpdateSZCtyunSetVlanTask:output_type -> network_service.UpdateSZCtyunSetVlanTaskResponse
	25, // 76: network_service.NetworkService.AddDefaultNet:output_type -> network_service.AddDefaultNetResponse
	27, // 77: network_service.NetworkService.AddDynamicNet:output_type -> network_service.AddDynamicNetResponse
	29, // 78: network_service.NetworkService.AddDefaultIp:output_type -> network_service.AddDefaultIpResponse
	31, // 79: network_service.NetworkService.DelDefaultIp:output_type -> network_service.DelDefaultIpResponse
	33, // 80: network_service.NetworkService.UpdateDefaultIp:output_type -> network_service.UpdateDefaultIpResponse
	33, // 81: network_service.NetworkService.OccupyDefaultIp:output_type -> network_service.UpdateDefaultIpResponse
	33, // 82: network_service.NetworkService.ResetDefaultIp:output_type -> network_service.UpdateDefaultIpResponse
	35, // 83: network_service.NetworkService.QueryDefaultIp:output_type -> network_service.QueryDefaultIpResponse
	37, // 84: network_service.NetworkService.AddDynamicIp:output_type -> network_service.AddDynamicIpResponse
	39, // 85: network_service.NetworkService.DelDynamicIp:output_type -> network_service.DelDynamicIpResponse
	41, // 86: network_service.NetworkService.UpdateDynamicIp:output_type -> network_service.UpdateDynamicIpResponse
	43, // 87: network_service.NetworkService.QueryDynamicIp:output_type -> network_service.QueryDynamicIpResponse
	46, // 88: network_service.NetworkService.AddSwitchInfo:output_type -> network_service.AddSwitchInfoResponse
	52, // 89: network_service.NetworkService.DelSwitchInfo:output_type -> network_service.DelSwitchInfoResponse
	49, // 90: network_service.NetworkService.QuerySwitchInfo:output_type -> network_service.QuerySwitchInfoResponse
	51, // 91: network_service.NetworkService.UpdateSwitchInfo:output_type -> network_service.UpdateSwitchInfoResponse
	54, // 92: network_service.NetworkService.AddDynamicIpFromCSV:output_type -> network_service.AddDynamicIpFromCSVResponse
	56, // 93: network_service.NetworkService.AddDefaultIpFromCSV:output_type -> network_service.AddDefaultIpFromCSVResponse
	58, // 94: network_service.NetworkService.AddSwitchFromCSV:output_type -> network_service.AddSwitchFromCSVResponse
	59, // 95: network_service.NetworkService.GetDynamicIpCSVTemplate:output_type -> network_service.CSVTemplateResponse
	59, // 96: network_service.NetworkService.GetDefaultIpCSVTemplate:output_type -> network_service.CSVTemplateResponse
	59, // 97: network_service.NetworkService.GetSwitchInfoCSVTemplate:output_type -> network_service.CSVTemplateResponse
	68, // [68:98] is the sub-list for method output_type
	38, // [38:68] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_network_service_service_proto_init() }
func file_network_service_service_proto_init() {
	if File_network_service_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_service_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CommRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SwitchSetVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SwitchSetVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*NetInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DefaultNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetInfoByIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetInfoByIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AddVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AddVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DelVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DelVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*VlanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SZCtyunSetVlanTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*QueryVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*QueryVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySZCtyunSetVlanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySZCtyunSetVlanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSZCtyunSetVlanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSZCtyunSetVlanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultNetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicNetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DelDefaultIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*DelDefaultIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDefaultIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDefaultIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDefaultIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDefaultIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DelDynamicIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DelDynamicIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDynamicIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDynamicIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDynamicIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDynamicIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*SwitchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*AddSwitchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*AddSwitchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*DelSwitchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySwitchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySwitchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSwitchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSwitchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*DelSwitchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicIpFromCSVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*AddDynamicIpFromCSVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultIpFromCSVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*AddDefaultIpFromCSVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*AddSwitchInfoFromCSVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*AddSwitchFromCSVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CSVTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_service_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CSVTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_service_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_service_service_proto_goTypes,
		DependencyIndexes: file_network_service_service_proto_depIdxs,
		EnumInfos:         file_network_service_service_proto_enumTypes,
		MessageInfos:      file_network_service_service_proto_msgTypes,
	}.Build()
	File_network_service_service_proto = out.File
	file_network_service_service_proto_rawDesc = nil
	file_network_service_service_proto_goTypes = nil
	file_network_service_service_proto_depIdxs = nil
}
