// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: network_service/service.proto

package network_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkService_SwitchSetVlan_FullMethodName            = "/network_service.NetworkService/SwitchSetVlan"
	NetworkService_GetNetInfoByIp_FullMethodName           = "/network_service.NetworkService/GetNetInfoByIp"
	NetworkService_AddVlan_FullMethodName                  = "/network_service.NetworkService/AddVlan"
	NetworkService_DelVlan_FullMethodName                  = "/network_service.NetworkService/DelVlan"
	NetworkService_UpdateVlan_FullMethodName               = "/network_service.NetworkService/UpdateVlan"
	NetworkService_QueryVlan_FullMethodName                = "/network_service.NetworkService/QueryVlan"
	NetworkService_QuerySZCtyunSetVlanTask_FullMethodName  = "/network_service.NetworkService/QuerySZCtyunSetVlanTask"
	NetworkService_UpdateSZCtyunSetVlanTask_FullMethodName = "/network_service.NetworkService/UpdateSZCtyunSetVlanTask"
	NetworkService_AddDefaultNet_FullMethodName            = "/network_service.NetworkService/AddDefaultNet"
	NetworkService_AddDynamicNet_FullMethodName            = "/network_service.NetworkService/AddDynamicNet"
	NetworkService_AddDefaultIp_FullMethodName             = "/network_service.NetworkService/AddDefaultIp"
	NetworkService_DelDefaultIp_FullMethodName             = "/network_service.NetworkService/DelDefaultIp"
	NetworkService_UpdateDefaultIp_FullMethodName          = "/network_service.NetworkService/UpdateDefaultIp"
	NetworkService_OccupyDefaultIp_FullMethodName          = "/network_service.NetworkService/OccupyDefaultIp"
	NetworkService_ResetDefaultIp_FullMethodName           = "/network_service.NetworkService/ResetDefaultIp"
	NetworkService_QueryDefaultIp_FullMethodName           = "/network_service.NetworkService/QueryDefaultIp"
	NetworkService_AddDynamicIp_FullMethodName             = "/network_service.NetworkService/AddDynamicIp"
	NetworkService_DelDynamicIp_FullMethodName             = "/network_service.NetworkService/DelDynamicIp"
	NetworkService_UpdateDynamicIp_FullMethodName          = "/network_service.NetworkService/UpdateDynamicIp"
	NetworkService_QueryDynamicIp_FullMethodName           = "/network_service.NetworkService/QueryDynamicIp"
	NetworkService_AddSwitchInfo_FullMethodName            = "/network_service.NetworkService/AddSwitchInfo"
	NetworkService_DelSwitchInfo_FullMethodName            = "/network_service.NetworkService/DelSwitchInfo"
	NetworkService_QuerySwitchInfo_FullMethodName          = "/network_service.NetworkService/QuerySwitchInfo"
	NetworkService_UpdateSwitchInfo_FullMethodName         = "/network_service.NetworkService/UpdateSwitchInfo"
	NetworkService_AddDynamicIpFromCSV_FullMethodName      = "/network_service.NetworkService/AddDynamicIpFromCSV"
	NetworkService_AddDefaultIpFromCSV_FullMethodName      = "/network_service.NetworkService/AddDefaultIpFromCSV"
	NetworkService_AddSwitchFromCSV_FullMethodName         = "/network_service.NetworkService/AddSwitchFromCSV"
	NetworkService_GetDynamicIpCSVTemplate_FullMethodName  = "/network_service.NetworkService/GetDynamicIpCSVTemplate"
	NetworkService_GetDefaultIpCSVTemplate_FullMethodName  = "/network_service.NetworkService/GetDefaultIpCSVTemplate"
	NetworkService_GetSwitchInfoCSVTemplate_FullMethodName = "/network_service.NetworkService/GetSwitchInfoCSVTemplate"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	SwitchSetVlan(ctx context.Context, in *SwitchSetVlanRequest, opts ...grpc.CallOption) (*SwitchSetVlanResponse, error)
	GetNetInfoByIp(ctx context.Context, in *GetNetInfoByIpRequest, opts ...grpc.CallOption) (*GetNetInfoByIpResponse, error)
	// switch
	// 部署
	// 添加一批交换机
	// vlan
	AddVlan(ctx context.Context, in *AddVlanRequest, opts ...grpc.CallOption) (*AddVlanResponse, error)
	DelVlan(ctx context.Context, in *DelVlanRequest, opts ...grpc.CallOption) (*DelVlanResponse, error)
	UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*UpdateVlanResponse, error)
	QueryVlan(ctx context.Context, in *QueryVlanRequest, opts ...grpc.CallOption) (*QueryVlanResponse, error)
	QuerySZCtyunSetVlanTask(ctx context.Context, in *QuerySZCtyunSetVlanTaskRequest, opts ...grpc.CallOption) (*QuerySZCtyunSetVlanTaskResponse, error)
	UpdateSZCtyunSetVlanTask(ctx context.Context, in *UpdateSZCtyunSetVlanTaskRequest, opts ...grpc.CallOption) (*UpdateSZCtyunSetVlanTaskResponse, error)
	// 添加一个默认网段(自动绑定到实例)
	AddDefaultNet(ctx context.Context, in *AddDefaultNetRequest, opts ...grpc.CallOption) (*AddDefaultNetResponse, error)
	// 添加一个租户网段
	AddDynamicNet(ctx context.Context, in *AddDynamicNetRequest, opts ...grpc.CallOption) (*AddDynamicNetResponse, error)
	//
	// 运营
	// 交换机列表：增删改查
	// 实例列表：增删改查
	// 默认网络列表：增删改查
	AddDefaultIp(ctx context.Context, in *AddDefaultIpRequest, opts ...grpc.CallOption) (*AddDefaultIpResponse, error)
	DelDefaultIp(ctx context.Context, in *DelDefaultIpRequest, opts ...grpc.CallOption) (*DelDefaultIpResponse, error)
	UpdateDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error)
	OccupyDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error)
	ResetDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error)
	QueryDefaultIp(ctx context.Context, in *QueryDefaultIpRequest, opts ...grpc.CallOption) (*QueryDefaultIpResponse, error)
	// 租户网络列表：增删改查
	AddDynamicIp(ctx context.Context, in *AddDynamicIpRequest, opts ...grpc.CallOption) (*AddDynamicIpResponse, error)
	DelDynamicIp(ctx context.Context, in *DelDynamicIpRequest, opts ...grpc.CallOption) (*DelDynamicIpResponse, error)
	UpdateDynamicIp(ctx context.Context, in *UpdateDynamicIpRequest, opts ...grpc.CallOption) (*UpdateDynamicIpResponse, error)
	QueryDynamicIp(ctx context.Context, in *QueryDynamicIpRequest, opts ...grpc.CallOption) (*QueryDynamicIpResponse, error)
	AddSwitchInfo(ctx context.Context, in *AddSwitchInfoRequest, opts ...grpc.CallOption) (*AddSwitchInfoResponse, error)
	DelSwitchInfo(ctx context.Context, in *DelSwitchInfoRequest, opts ...grpc.CallOption) (*DelSwitchInfoResponse, error)
	QuerySwitchInfo(ctx context.Context, in *QuerySwitchInfoRequest, opts ...grpc.CallOption) (*QuerySwitchInfoResponse, error)
	UpdateSwitchInfo(ctx context.Context, in *UpdateSwitchInfoRequest, opts ...grpc.CallOption) (*UpdateSwitchInfoResponse, error)
	AddDynamicIpFromCSV(ctx context.Context, in *AddDynamicIpFromCSVRequest, opts ...grpc.CallOption) (*AddDynamicIpFromCSVResponse, error)
	AddDefaultIpFromCSV(ctx context.Context, in *AddDefaultIpFromCSVRequest, opts ...grpc.CallOption) (*AddDefaultIpFromCSVResponse, error)
	AddSwitchFromCSV(ctx context.Context, in *AddSwitchInfoFromCSVRequest, opts ...grpc.CallOption) (*AddSwitchFromCSVResponse, error)
	GetDynamicIpCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error)
	GetDefaultIpCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error)
	GetSwitchInfoCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) SwitchSetVlan(ctx context.Context, in *SwitchSetVlanRequest, opts ...grpc.CallOption) (*SwitchSetVlanResponse, error) {
	out := new(SwitchSetVlanResponse)
	err := c.cc.Invoke(ctx, NetworkService_SwitchSetVlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetNetInfoByIp(ctx context.Context, in *GetNetInfoByIpRequest, opts ...grpc.CallOption) (*GetNetInfoByIpResponse, error) {
	out := new(GetNetInfoByIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetNetInfoByIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddVlan(ctx context.Context, in *AddVlanRequest, opts ...grpc.CallOption) (*AddVlanResponse, error) {
	out := new(AddVlanResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddVlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DelVlan(ctx context.Context, in *DelVlanRequest, opts ...grpc.CallOption) (*DelVlanResponse, error) {
	out := new(DelVlanResponse)
	err := c.cc.Invoke(ctx, NetworkService_DelVlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*UpdateVlanResponse, error) {
	out := new(UpdateVlanResponse)
	err := c.cc.Invoke(ctx, NetworkService_UpdateVlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) QueryVlan(ctx context.Context, in *QueryVlanRequest, opts ...grpc.CallOption) (*QueryVlanResponse, error) {
	out := new(QueryVlanResponse)
	err := c.cc.Invoke(ctx, NetworkService_QueryVlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) QuerySZCtyunSetVlanTask(ctx context.Context, in *QuerySZCtyunSetVlanTaskRequest, opts ...grpc.CallOption) (*QuerySZCtyunSetVlanTaskResponse, error) {
	out := new(QuerySZCtyunSetVlanTaskResponse)
	err := c.cc.Invoke(ctx, NetworkService_QuerySZCtyunSetVlanTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateSZCtyunSetVlanTask(ctx context.Context, in *UpdateSZCtyunSetVlanTaskRequest, opts ...grpc.CallOption) (*UpdateSZCtyunSetVlanTaskResponse, error) {
	out := new(UpdateSZCtyunSetVlanTaskResponse)
	err := c.cc.Invoke(ctx, NetworkService_UpdateSZCtyunSetVlanTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDefaultNet(ctx context.Context, in *AddDefaultNetRequest, opts ...grpc.CallOption) (*AddDefaultNetResponse, error) {
	out := new(AddDefaultNetResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDefaultNet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDynamicNet(ctx context.Context, in *AddDynamicNetRequest, opts ...grpc.CallOption) (*AddDynamicNetResponse, error) {
	out := new(AddDynamicNetResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDynamicNet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDefaultIp(ctx context.Context, in *AddDefaultIpRequest, opts ...grpc.CallOption) (*AddDefaultIpResponse, error) {
	out := new(AddDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DelDefaultIp(ctx context.Context, in *DelDefaultIpRequest, opts ...grpc.CallOption) (*DelDefaultIpResponse, error) {
	out := new(DelDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_DelDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error) {
	out := new(UpdateDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_UpdateDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) OccupyDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error) {
	out := new(UpdateDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_OccupyDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) ResetDefaultIp(ctx context.Context, in *UpdateDefaultIpRequest, opts ...grpc.CallOption) (*UpdateDefaultIpResponse, error) {
	out := new(UpdateDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_ResetDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) QueryDefaultIp(ctx context.Context, in *QueryDefaultIpRequest, opts ...grpc.CallOption) (*QueryDefaultIpResponse, error) {
	out := new(QueryDefaultIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_QueryDefaultIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDynamicIp(ctx context.Context, in *AddDynamicIpRequest, opts ...grpc.CallOption) (*AddDynamicIpResponse, error) {
	out := new(AddDynamicIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDynamicIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DelDynamicIp(ctx context.Context, in *DelDynamicIpRequest, opts ...grpc.CallOption) (*DelDynamicIpResponse, error) {
	out := new(DelDynamicIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_DelDynamicIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateDynamicIp(ctx context.Context, in *UpdateDynamicIpRequest, opts ...grpc.CallOption) (*UpdateDynamicIpResponse, error) {
	out := new(UpdateDynamicIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_UpdateDynamicIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) QueryDynamicIp(ctx context.Context, in *QueryDynamicIpRequest, opts ...grpc.CallOption) (*QueryDynamicIpResponse, error) {
	out := new(QueryDynamicIpResponse)
	err := c.cc.Invoke(ctx, NetworkService_QueryDynamicIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddSwitchInfo(ctx context.Context, in *AddSwitchInfoRequest, opts ...grpc.CallOption) (*AddSwitchInfoResponse, error) {
	out := new(AddSwitchInfoResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddSwitchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DelSwitchInfo(ctx context.Context, in *DelSwitchInfoRequest, opts ...grpc.CallOption) (*DelSwitchInfoResponse, error) {
	out := new(DelSwitchInfoResponse)
	err := c.cc.Invoke(ctx, NetworkService_DelSwitchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) QuerySwitchInfo(ctx context.Context, in *QuerySwitchInfoRequest, opts ...grpc.CallOption) (*QuerySwitchInfoResponse, error) {
	out := new(QuerySwitchInfoResponse)
	err := c.cc.Invoke(ctx, NetworkService_QuerySwitchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateSwitchInfo(ctx context.Context, in *UpdateSwitchInfoRequest, opts ...grpc.CallOption) (*UpdateSwitchInfoResponse, error) {
	out := new(UpdateSwitchInfoResponse)
	err := c.cc.Invoke(ctx, NetworkService_UpdateSwitchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDynamicIpFromCSV(ctx context.Context, in *AddDynamicIpFromCSVRequest, opts ...grpc.CallOption) (*AddDynamicIpFromCSVResponse, error) {
	out := new(AddDynamicIpFromCSVResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDynamicIpFromCSV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddDefaultIpFromCSV(ctx context.Context, in *AddDefaultIpFromCSVRequest, opts ...grpc.CallOption) (*AddDefaultIpFromCSVResponse, error) {
	out := new(AddDefaultIpFromCSVResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddDefaultIpFromCSV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) AddSwitchFromCSV(ctx context.Context, in *AddSwitchInfoFromCSVRequest, opts ...grpc.CallOption) (*AddSwitchFromCSVResponse, error) {
	out := new(AddSwitchFromCSVResponse)
	err := c.cc.Invoke(ctx, NetworkService_AddSwitchFromCSV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetDynamicIpCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error) {
	out := new(CSVTemplateResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetDynamicIpCSVTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetDefaultIpCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error) {
	out := new(CSVTemplateResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetDefaultIpCSVTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetSwitchInfoCSVTemplate(ctx context.Context, in *CSVTemplateRequest, opts ...grpc.CallOption) (*CSVTemplateResponse, error) {
	out := new(CSVTemplateResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetSwitchInfoCSVTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	SwitchSetVlan(context.Context, *SwitchSetVlanRequest) (*SwitchSetVlanResponse, error)
	GetNetInfoByIp(context.Context, *GetNetInfoByIpRequest) (*GetNetInfoByIpResponse, error)
	// switch
	// 部署
	// 添加一批交换机
	// vlan
	AddVlan(context.Context, *AddVlanRequest) (*AddVlanResponse, error)
	DelVlan(context.Context, *DelVlanRequest) (*DelVlanResponse, error)
	UpdateVlan(context.Context, *UpdateVlanRequest) (*UpdateVlanResponse, error)
	QueryVlan(context.Context, *QueryVlanRequest) (*QueryVlanResponse, error)
	QuerySZCtyunSetVlanTask(context.Context, *QuerySZCtyunSetVlanTaskRequest) (*QuerySZCtyunSetVlanTaskResponse, error)
	UpdateSZCtyunSetVlanTask(context.Context, *UpdateSZCtyunSetVlanTaskRequest) (*UpdateSZCtyunSetVlanTaskResponse, error)
	// 添加一个默认网段(自动绑定到实例)
	AddDefaultNet(context.Context, *AddDefaultNetRequest) (*AddDefaultNetResponse, error)
	// 添加一个租户网段
	AddDynamicNet(context.Context, *AddDynamicNetRequest) (*AddDynamicNetResponse, error)
	//
	// 运营
	// 交换机列表：增删改查
	// 实例列表：增删改查
	// 默认网络列表：增删改查
	AddDefaultIp(context.Context, *AddDefaultIpRequest) (*AddDefaultIpResponse, error)
	DelDefaultIp(context.Context, *DelDefaultIpRequest) (*DelDefaultIpResponse, error)
	UpdateDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error)
	OccupyDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error)
	ResetDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error)
	QueryDefaultIp(context.Context, *QueryDefaultIpRequest) (*QueryDefaultIpResponse, error)
	// 租户网络列表：增删改查
	AddDynamicIp(context.Context, *AddDynamicIpRequest) (*AddDynamicIpResponse, error)
	DelDynamicIp(context.Context, *DelDynamicIpRequest) (*DelDynamicIpResponse, error)
	UpdateDynamicIp(context.Context, *UpdateDynamicIpRequest) (*UpdateDynamicIpResponse, error)
	QueryDynamicIp(context.Context, *QueryDynamicIpRequest) (*QueryDynamicIpResponse, error)
	AddSwitchInfo(context.Context, *AddSwitchInfoRequest) (*AddSwitchInfoResponse, error)
	DelSwitchInfo(context.Context, *DelSwitchInfoRequest) (*DelSwitchInfoResponse, error)
	QuerySwitchInfo(context.Context, *QuerySwitchInfoRequest) (*QuerySwitchInfoResponse, error)
	UpdateSwitchInfo(context.Context, *UpdateSwitchInfoRequest) (*UpdateSwitchInfoResponse, error)
	AddDynamicIpFromCSV(context.Context, *AddDynamicIpFromCSVRequest) (*AddDynamicIpFromCSVResponse, error)
	AddDefaultIpFromCSV(context.Context, *AddDefaultIpFromCSVRequest) (*AddDefaultIpFromCSVResponse, error)
	AddSwitchFromCSV(context.Context, *AddSwitchInfoFromCSVRequest) (*AddSwitchFromCSVResponse, error)
	GetDynamicIpCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error)
	GetDefaultIpCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error)
	GetSwitchInfoCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) SwitchSetVlan(context.Context, *SwitchSetVlanRequest) (*SwitchSetVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchSetVlan not implemented")
}
func (UnimplementedNetworkServiceServer) GetNetInfoByIp(context.Context, *GetNetInfoByIpRequest) (*GetNetInfoByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetInfoByIp not implemented")
}
func (UnimplementedNetworkServiceServer) AddVlan(context.Context, *AddVlanRequest) (*AddVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVlan not implemented")
}
func (UnimplementedNetworkServiceServer) DelVlan(context.Context, *DelVlanRequest) (*DelVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVlan not implemented")
}
func (UnimplementedNetworkServiceServer) UpdateVlan(context.Context, *UpdateVlanRequest) (*UpdateVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVlan not implemented")
}
func (UnimplementedNetworkServiceServer) QueryVlan(context.Context, *QueryVlanRequest) (*QueryVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVlan not implemented")
}
func (UnimplementedNetworkServiceServer) QuerySZCtyunSetVlanTask(context.Context, *QuerySZCtyunSetVlanTaskRequest) (*QuerySZCtyunSetVlanTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySZCtyunSetVlanTask not implemented")
}
func (UnimplementedNetworkServiceServer) UpdateSZCtyunSetVlanTask(context.Context, *UpdateSZCtyunSetVlanTaskRequest) (*UpdateSZCtyunSetVlanTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSZCtyunSetVlanTask not implemented")
}
func (UnimplementedNetworkServiceServer) AddDefaultNet(context.Context, *AddDefaultNetRequest) (*AddDefaultNetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultNet not implemented")
}
func (UnimplementedNetworkServiceServer) AddDynamicNet(context.Context, *AddDynamicNetRequest) (*AddDynamicNetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynamicNet not implemented")
}
func (UnimplementedNetworkServiceServer) AddDefaultIp(context.Context, *AddDefaultIpRequest) (*AddDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) DelDefaultIp(context.Context, *DelDefaultIpRequest) (*DelDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) UpdateDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) OccupyDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupyDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) ResetDefaultIp(context.Context, *UpdateDefaultIpRequest) (*UpdateDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) QueryDefaultIp(context.Context, *QueryDefaultIpRequest) (*QueryDefaultIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDefaultIp not implemented")
}
func (UnimplementedNetworkServiceServer) AddDynamicIp(context.Context, *AddDynamicIpRequest) (*AddDynamicIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynamicIp not implemented")
}
func (UnimplementedNetworkServiceServer) DelDynamicIp(context.Context, *DelDynamicIpRequest) (*DelDynamicIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDynamicIp not implemented")
}
func (UnimplementedNetworkServiceServer) UpdateDynamicIp(context.Context, *UpdateDynamicIpRequest) (*UpdateDynamicIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamicIp not implemented")
}
func (UnimplementedNetworkServiceServer) QueryDynamicIp(context.Context, *QueryDynamicIpRequest) (*QueryDynamicIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDynamicIp not implemented")
}
func (UnimplementedNetworkServiceServer) AddSwitchInfo(context.Context, *AddSwitchInfoRequest) (*AddSwitchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwitchInfo not implemented")
}
func (UnimplementedNetworkServiceServer) DelSwitchInfo(context.Context, *DelSwitchInfoRequest) (*DelSwitchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSwitchInfo not implemented")
}
func (UnimplementedNetworkServiceServer) QuerySwitchInfo(context.Context, *QuerySwitchInfoRequest) (*QuerySwitchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySwitchInfo not implemented")
}
func (UnimplementedNetworkServiceServer) UpdateSwitchInfo(context.Context, *UpdateSwitchInfoRequest) (*UpdateSwitchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitchInfo not implemented")
}
func (UnimplementedNetworkServiceServer) AddDynamicIpFromCSV(context.Context, *AddDynamicIpFromCSVRequest) (*AddDynamicIpFromCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynamicIpFromCSV not implemented")
}
func (UnimplementedNetworkServiceServer) AddDefaultIpFromCSV(context.Context, *AddDefaultIpFromCSVRequest) (*AddDefaultIpFromCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultIpFromCSV not implemented")
}
func (UnimplementedNetworkServiceServer) AddSwitchFromCSV(context.Context, *AddSwitchInfoFromCSVRequest) (*AddSwitchFromCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwitchFromCSV not implemented")
}
func (UnimplementedNetworkServiceServer) GetDynamicIpCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicIpCSVTemplate not implemented")
}
func (UnimplementedNetworkServiceServer) GetDefaultIpCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultIpCSVTemplate not implemented")
}
func (UnimplementedNetworkServiceServer) GetSwitchInfoCSVTemplate(context.Context, *CSVTemplateRequest) (*CSVTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchInfoCSVTemplate not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_SwitchSetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchSetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).SwitchSetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_SwitchSetVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).SwitchSetVlan(ctx, req.(*SwitchSetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetNetInfoByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetInfoByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetInfoByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetNetInfoByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetInfoByIp(ctx, req.(*GetNetInfoByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddVlan(ctx, req.(*AddVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DelVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DelVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DelVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DelVlan(ctx, req.(*DelVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_UpdateVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateVlan(ctx, req.(*UpdateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_QueryVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).QueryVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_QueryVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).QueryVlan(ctx, req.(*QueryVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_QuerySZCtyunSetVlanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySZCtyunSetVlanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).QuerySZCtyunSetVlanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_QuerySZCtyunSetVlanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).QuerySZCtyunSetVlanTask(ctx, req.(*QuerySZCtyunSetVlanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateSZCtyunSetVlanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSZCtyunSetVlanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateSZCtyunSetVlanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_UpdateSZCtyunSetVlanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateSZCtyunSetVlanTask(ctx, req.(*UpdateSZCtyunSetVlanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDefaultNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDefaultNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDefaultNet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDefaultNet(ctx, req.(*AddDefaultNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDynamicNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDynamicNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDynamicNet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDynamicNet(ctx, req.(*AddDynamicNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDefaultIp(ctx, req.(*AddDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DelDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DelDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DelDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DelDefaultIp(ctx, req.(*DelDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_UpdateDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateDefaultIp(ctx, req.(*UpdateDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_OccupyDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).OccupyDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_OccupyDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).OccupyDefaultIp(ctx, req.(*UpdateDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_ResetDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).ResetDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_ResetDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).ResetDefaultIp(ctx, req.(*UpdateDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_QueryDefaultIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDefaultIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).QueryDefaultIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_QueryDefaultIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).QueryDefaultIp(ctx, req.(*QueryDefaultIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDynamicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDynamicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDynamicIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDynamicIp(ctx, req.(*AddDynamicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DelDynamicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDynamicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DelDynamicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DelDynamicIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DelDynamicIp(ctx, req.(*DelDynamicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateDynamicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateDynamicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_UpdateDynamicIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateDynamicIp(ctx, req.(*UpdateDynamicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_QueryDynamicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDynamicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).QueryDynamicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_QueryDynamicIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).QueryDynamicIp(ctx, req.(*QueryDynamicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSwitchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddSwitchInfo(ctx, req.(*AddSwitchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DelSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSwitchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DelSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DelSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DelSwitchInfo(ctx, req.(*DelSwitchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_QuerySwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwitchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).QuerySwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_QuerySwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).QuerySwitchInfo(ctx, req.(*QuerySwitchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_UpdateSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateSwitchInfo(ctx, req.(*UpdateSwitchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDynamicIpFromCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicIpFromCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDynamicIpFromCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDynamicIpFromCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDynamicIpFromCSV(ctx, req.(*AddDynamicIpFromCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddDefaultIpFromCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultIpFromCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddDefaultIpFromCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddDefaultIpFromCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddDefaultIpFromCSV(ctx, req.(*AddDefaultIpFromCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_AddSwitchFromCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSwitchInfoFromCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).AddSwitchFromCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_AddSwitchFromCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).AddSwitchFromCSV(ctx, req.(*AddSwitchInfoFromCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetDynamicIpCSVTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSVTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetDynamicIpCSVTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetDynamicIpCSVTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetDynamicIpCSVTemplate(ctx, req.(*CSVTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetDefaultIpCSVTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSVTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetDefaultIpCSVTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetDefaultIpCSVTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetDefaultIpCSVTemplate(ctx, req.(*CSVTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetSwitchInfoCSVTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSVTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetSwitchInfoCSVTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetSwitchInfoCSVTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetSwitchInfoCSVTemplate(ctx, req.(*CSVTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network_service.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SwitchSetVlan",
			Handler:    _NetworkService_SwitchSetVlan_Handler,
		},
		{
			MethodName: "GetNetInfoByIp",
			Handler:    _NetworkService_GetNetInfoByIp_Handler,
		},
		{
			MethodName: "AddVlan",
			Handler:    _NetworkService_AddVlan_Handler,
		},
		{
			MethodName: "DelVlan",
			Handler:    _NetworkService_DelVlan_Handler,
		},
		{
			MethodName: "UpdateVlan",
			Handler:    _NetworkService_UpdateVlan_Handler,
		},
		{
			MethodName: "QueryVlan",
			Handler:    _NetworkService_QueryVlan_Handler,
		},
		{
			MethodName: "QuerySZCtyunSetVlanTask",
			Handler:    _NetworkService_QuerySZCtyunSetVlanTask_Handler,
		},
		{
			MethodName: "UpdateSZCtyunSetVlanTask",
			Handler:    _NetworkService_UpdateSZCtyunSetVlanTask_Handler,
		},
		{
			MethodName: "AddDefaultNet",
			Handler:    _NetworkService_AddDefaultNet_Handler,
		},
		{
			MethodName: "AddDynamicNet",
			Handler:    _NetworkService_AddDynamicNet_Handler,
		},
		{
			MethodName: "AddDefaultIp",
			Handler:    _NetworkService_AddDefaultIp_Handler,
		},
		{
			MethodName: "DelDefaultIp",
			Handler:    _NetworkService_DelDefaultIp_Handler,
		},
		{
			MethodName: "UpdateDefaultIp",
			Handler:    _NetworkService_UpdateDefaultIp_Handler,
		},
		{
			MethodName: "OccupyDefaultIp",
			Handler:    _NetworkService_OccupyDefaultIp_Handler,
		},
		{
			MethodName: "ResetDefaultIp",
			Handler:    _NetworkService_ResetDefaultIp_Handler,
		},
		{
			MethodName: "QueryDefaultIp",
			Handler:    _NetworkService_QueryDefaultIp_Handler,
		},
		{
			MethodName: "AddDynamicIp",
			Handler:    _NetworkService_AddDynamicIp_Handler,
		},
		{
			MethodName: "DelDynamicIp",
			Handler:    _NetworkService_DelDynamicIp_Handler,
		},
		{
			MethodName: "UpdateDynamicIp",
			Handler:    _NetworkService_UpdateDynamicIp_Handler,
		},
		{
			MethodName: "QueryDynamicIp",
			Handler:    _NetworkService_QueryDynamicIp_Handler,
		},
		{
			MethodName: "AddSwitchInfo",
			Handler:    _NetworkService_AddSwitchInfo_Handler,
		},
		{
			MethodName: "DelSwitchInfo",
			Handler:    _NetworkService_DelSwitchInfo_Handler,
		},
		{
			MethodName: "QuerySwitchInfo",
			Handler:    _NetworkService_QuerySwitchInfo_Handler,
		},
		{
			MethodName: "UpdateSwitchInfo",
			Handler:    _NetworkService_UpdateSwitchInfo_Handler,
		},
		{
			MethodName: "AddDynamicIpFromCSV",
			Handler:    _NetworkService_AddDynamicIpFromCSV_Handler,
		},
		{
			MethodName: "AddDefaultIpFromCSV",
			Handler:    _NetworkService_AddDefaultIpFromCSV_Handler,
		},
		{
			MethodName: "AddSwitchFromCSV",
			Handler:    _NetworkService_AddSwitchFromCSV_Handler,
		},
		{
			MethodName: "GetDynamicIpCSVTemplate",
			Handler:    _NetworkService_GetDynamicIpCSVTemplate_Handler,
		},
		{
			MethodName: "GetDefaultIpCSVTemplate",
			Handler:    _NetworkService_GetDefaultIpCSVTemplate_Handler,
		},
		{
			MethodName: "GetSwitchInfoCSVTemplate",
			Handler:    _NetworkService_GetSwitchInfoCSVTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_service/service.proto",
}
