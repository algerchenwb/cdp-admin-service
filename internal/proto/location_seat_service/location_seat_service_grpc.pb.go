// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: location_seat_service.proto

package diskless_cloud_image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationSeatService_AddLocation_FullMethodName     = "/location_seat_service.LocationSeatService/AddLocation"
	LocationSeatService_DeleteLocation_FullMethodName  = "/location_seat_service.LocationSeatService/DeleteLocation"
	LocationSeatService_UpdateLocation_FullMethodName  = "/location_seat_service.LocationSeatService/UpdateLocation"
	LocationSeatService_GetLocation_FullMethodName     = "/location_seat_service.LocationSeatService/GetLocation"
	LocationSeatService_GetLocationList_FullMethodName = "/location_seat_service.LocationSeatService/GetLocationList"
	LocationSeatService_AddSeat_FullMethodName         = "/location_seat_service.LocationSeatService/AddSeat"
	LocationSeatService_DeleteSeat_FullMethodName      = "/location_seat_service.LocationSeatService/DeleteSeat"
	LocationSeatService_UpdateSeat_FullMethodName      = "/location_seat_service.LocationSeatService/UpdateSeat"
	LocationSeatService_GetSeat_FullMethodName         = "/location_seat_service.LocationSeatService/GetSeat"
	LocationSeatService_GetSeatList_FullMethodName     = "/location_seat_service.LocationSeatService/GetSeatList"
)

// LocationSeatServiceClient is the client API for LocationSeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationSeatServiceClient interface {
	// 门店管理
	AddLocation(ctx context.Context, in *AddLocationRequest, opts ...grpc.CallOption) (*AddLocationResponse, error)
	DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error)
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	GetLocationList(ctx context.Context, in *GetLocationListRequest, opts ...grpc.CallOption) (*GetLocationListResponse, error)
	// 座位管理
	AddSeat(ctx context.Context, in *AddSeatRequest, opts ...grpc.CallOption) (*AddSeatResponse, error)
	DeleteSeat(ctx context.Context, in *DeleteSeatRequest, opts ...grpc.CallOption) (*DeleteSeatResponse, error)
	UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*UpdateSeatResponse, error)
	GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error)
	GetSeatList(ctx context.Context, in *GetSeatListRequest, opts ...grpc.CallOption) (*GetSeatListResponse, error)
}

type locationSeatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationSeatServiceClient(cc grpc.ClientConnInterface) LocationSeatServiceClient {
	return &locationSeatServiceClient{cc}
}

func (c *locationSeatServiceClient) AddLocation(ctx context.Context, in *AddLocationRequest, opts ...grpc.CallOption) (*AddLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLocationResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_AddLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocationResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) GetLocationList(ctx context.Context, in *GetLocationListRequest, opts ...grpc.CallOption) (*GetLocationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationListResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_GetLocationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) AddSeat(ctx context.Context, in *AddSeatRequest, opts ...grpc.CallOption) (*AddSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSeatResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_AddSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) DeleteSeat(ctx context.Context, in *DeleteSeatRequest, opts ...grpc.CallOption) (*DeleteSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeatResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_DeleteSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*UpdateSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSeatResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_UpdateSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_GetSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationSeatServiceClient) GetSeatList(ctx context.Context, in *GetSeatListRequest, opts ...grpc.CallOption) (*GetSeatListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatListResponse)
	err := c.cc.Invoke(ctx, LocationSeatService_GetSeatList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationSeatServiceServer is the server API for LocationSeatService service.
// All implementations must embed UnimplementedLocationSeatServiceServer
// for forward compatibility.
type LocationSeatServiceServer interface {
	// 门店管理
	AddLocation(context.Context, *AddLocationRequest) (*AddLocationResponse, error)
	DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error)
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	GetLocationList(context.Context, *GetLocationListRequest) (*GetLocationListResponse, error)
	// 座位管理
	AddSeat(context.Context, *AddSeatRequest) (*AddSeatResponse, error)
	DeleteSeat(context.Context, *DeleteSeatRequest) (*DeleteSeatResponse, error)
	UpdateSeat(context.Context, *UpdateSeatRequest) (*UpdateSeatResponse, error)
	GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error)
	GetSeatList(context.Context, *GetSeatListRequest) (*GetSeatListResponse, error)
	mustEmbedUnimplementedLocationSeatServiceServer()
}

// UnimplementedLocationSeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationSeatServiceServer struct{}

func (UnimplementedLocationSeatServiceServer) AddLocation(context.Context, *AddLocationRequest) (*AddLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLocation not implemented")
}
func (UnimplementedLocationSeatServiceServer) DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedLocationSeatServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedLocationSeatServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedLocationSeatServiceServer) GetLocationList(context.Context, *GetLocationListRequest) (*GetLocationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationList not implemented")
}
func (UnimplementedLocationSeatServiceServer) AddSeat(context.Context, *AddSeatRequest) (*AddSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeat not implemented")
}
func (UnimplementedLocationSeatServiceServer) DeleteSeat(context.Context, *DeleteSeatRequest) (*DeleteSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeat not implemented")
}
func (UnimplementedLocationSeatServiceServer) UpdateSeat(context.Context, *UpdateSeatRequest) (*UpdateSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeat not implemented")
}
func (UnimplementedLocationSeatServiceServer) GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedLocationSeatServiceServer) GetSeatList(context.Context, *GetSeatListRequest) (*GetSeatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatList not implemented")
}
func (UnimplementedLocationSeatServiceServer) mustEmbedUnimplementedLocationSeatServiceServer() {}
func (UnimplementedLocationSeatServiceServer) testEmbeddedByValue()                             {}

// UnsafeLocationSeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationSeatServiceServer will
// result in compilation errors.
type UnsafeLocationSeatServiceServer interface {
	mustEmbedUnimplementedLocationSeatServiceServer()
}

func RegisterLocationSeatServiceServer(s grpc.ServiceRegistrar, srv LocationSeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocationSeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationSeatService_ServiceDesc, srv)
}

func _LocationSeatService_AddLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).AddLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_AddLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).AddLocation(ctx, req.(*AddLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).DeleteLocation(ctx, req.(*DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_GetLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).GetLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_GetLocationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).GetLocationList(ctx, req.(*GetLocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_AddSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).AddSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_AddSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).AddSeat(ctx, req.(*AddSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_DeleteSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).DeleteSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_DeleteSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).DeleteSeat(ctx, req.(*DeleteSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_UpdateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).UpdateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_UpdateSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).UpdateSeat(ctx, req.(*UpdateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).GetSeat(ctx, req.(*GetSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationSeatService_GetSeatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationSeatServiceServer).GetSeatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationSeatService_GetSeatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationSeatServiceServer).GetSeatList(ctx, req.(*GetSeatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationSeatService_ServiceDesc is the grpc.ServiceDesc for LocationSeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationSeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location_seat_service.LocationSeatService",
	HandlerType: (*LocationSeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLocation",
			Handler:    _LocationSeatService_AddLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _LocationSeatService_DeleteLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _LocationSeatService_UpdateLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _LocationSeatService_GetLocation_Handler,
		},
		{
			MethodName: "GetLocationList",
			Handler:    _LocationSeatService_GetLocationList_Handler,
		},
		{
			MethodName: "AddSeat",
			Handler:    _LocationSeatService_AddSeat_Handler,
		},
		{
			MethodName: "DeleteSeat",
			Handler:    _LocationSeatService_DeleteSeat_Handler,
		},
		{
			MethodName: "UpdateSeat",
			Handler:    _LocationSeatService_UpdateSeat_Handler,
		},
		{
			MethodName: "GetSeat",
			Handler:    _LocationSeatService_GetSeat_Handler,
		},
		{
			MethodName: "GetSeatList",
			Handler:    _LocationSeatService_GetSeatList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location_seat_service.proto",
}
