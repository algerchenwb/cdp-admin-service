// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: diskless_cloud_image/diskless_cloud_image.proto

package diskless_cloud_image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DisklessCloudImage_QueryCloudImageList_FullMethodName         = "/diskless_cloud_image.DisklessCloudImage/QueryCloudImageList"
	DisklessCloudImage_GetImageDownloadUrl_FullMethodName         = "/diskless_cloud_image.DisklessCloudImage/GetImageDownloadUrl"
	DisklessCloudImage_UploadAreaImage_FullMethodName             = "/diskless_cloud_image.DisklessCloudImage/UploadAreaImage"
	DisklessCloudImage_DownloadImageToArea_FullMethodName         = "/diskless_cloud_image.DisklessCloudImage/DownloadImageToArea"
	DisklessCloudImage_CreateImageFromAreaInstance_FullMethodName = "/diskless_cloud_image.DisklessCloudImage/CreateImageFromAreaInstance"
	DisklessCloudImage_RegisterCloudImage_FullMethodName          = "/diskless_cloud_image.DisklessCloudImage/RegisterCloudImage"
	DisklessCloudImage_DeleteCloudImage_FullMethodName            = "/diskless_cloud_image.DisklessCloudImage/DeleteCloudImage"
	DisklessCloudImage_UpdateCloudImageInfo_FullMethodName        = "/diskless_cloud_image.DisklessCloudImage/UpdateCloudImageInfo"
	DisklessCloudImage_AddOsVersion_FullMethodName                = "/diskless_cloud_image.DisklessCloudImage/AddOsVersion"
	DisklessCloudImage_DeleteOsVersion_FullMethodName             = "/diskless_cloud_image.DisklessCloudImage/DeleteOsVersion"
	DisklessCloudImage_QueryOsVersionMap_FullMethodName           = "/diskless_cloud_image.DisklessCloudImage/QueryOsVersionMap"
	DisklessCloudImage_UpdateOsVersion_FullMethodName             = "/diskless_cloud_image.DisklessCloudImage/UpdateOsVersion"
)

// DisklessCloudImageClient is the client API for DisklessCloudImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisklessCloudImageClient interface {
	// 查询镜像列表
	QueryCloudImageList(ctx context.Context, in *QueryCloudImageListRequest, opts ...grpc.CallOption) (*QueryCloudImageListResponse, error)
	// 获取镜像下载链接
	GetImageDownloadUrl(ctx context.Context, in *GetImageDownloadUrlRequest, opts ...grpc.CallOption) (*GetImageDownloadUrlResponse, error)
	// 上传机房镜像(获取镜像上传链接，调用机房导出接口)
	UploadAreaImage(ctx context.Context, in *UploadAreaImageRequest, opts ...grpc.CallOption) (*UploadAreaImageResponse, error)
	// 下载镜像到机房(获取镜像下载链接，调用机房导入接口）
	DownloadImageToArea(ctx context.Context, in *DownloadImageToAreaRequest, opts ...grpc.CallOption) (*DownloadImageToAreaResponse, error)
	CreateImageFromAreaInstance(ctx context.Context, in *CreateImageFromAreaInstanceRequest, opts ...grpc.CallOption) (*CreateImageFromAreaInstanceResponse, error)
	// 登记一个oss上的镜像
	RegisterCloudImage(ctx context.Context, in *RegisterCloudImageRequest, opts ...grpc.CallOption) (*RegisterCloudImageResponse, error)
	// 删除指定镜像
	DeleteCloudImage(ctx context.Context, in *DeleteCloudImageRequest, opts ...grpc.CallOption) (*DeleteCloudImageResponse, error)
	// 编辑镜像信息
	UpdateCloudImageInfo(ctx context.Context, in *UpdateCloudImageInfoRequest, opts ...grpc.CallOption) (*UpdateCloudImageInfoResponse, error)
	// os_version
	AddOsVersion(ctx context.Context, in *AddOsVersionRequest, opts ...grpc.CallOption) (*AddOsVersionResponse, error)
	DeleteOsVersion(ctx context.Context, in *DeleteOsVersionRequest, opts ...grpc.CallOption) (*DeleteOsVersionResponse, error)
	QueryOsVersionMap(ctx context.Context, in *QueryOsVersionMapRequest, opts ...grpc.CallOption) (*QueryOsVersionMapResponse, error)
	UpdateOsVersion(ctx context.Context, in *UpdateOsVersionRequest, opts ...grpc.CallOption) (*UpdateOsVersionResponse, error)
}

type disklessCloudImageClient struct {
	cc grpc.ClientConnInterface
}

func NewDisklessCloudImageClient(cc grpc.ClientConnInterface) DisklessCloudImageClient {
	return &disklessCloudImageClient{cc}
}

func (c *disklessCloudImageClient) QueryCloudImageList(ctx context.Context, in *QueryCloudImageListRequest, opts ...grpc.CallOption) (*QueryCloudImageListResponse, error) {
	out := new(QueryCloudImageListResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_QueryCloudImageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) GetImageDownloadUrl(ctx context.Context, in *GetImageDownloadUrlRequest, opts ...grpc.CallOption) (*GetImageDownloadUrlResponse, error) {
	out := new(GetImageDownloadUrlResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_GetImageDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) UploadAreaImage(ctx context.Context, in *UploadAreaImageRequest, opts ...grpc.CallOption) (*UploadAreaImageResponse, error) {
	out := new(UploadAreaImageResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_UploadAreaImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) DownloadImageToArea(ctx context.Context, in *DownloadImageToAreaRequest, opts ...grpc.CallOption) (*DownloadImageToAreaResponse, error) {
	out := new(DownloadImageToAreaResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_DownloadImageToArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) CreateImageFromAreaInstance(ctx context.Context, in *CreateImageFromAreaInstanceRequest, opts ...grpc.CallOption) (*CreateImageFromAreaInstanceResponse, error) {
	out := new(CreateImageFromAreaInstanceResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_CreateImageFromAreaInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) RegisterCloudImage(ctx context.Context, in *RegisterCloudImageRequest, opts ...grpc.CallOption) (*RegisterCloudImageResponse, error) {
	out := new(RegisterCloudImageResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_RegisterCloudImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) DeleteCloudImage(ctx context.Context, in *DeleteCloudImageRequest, opts ...grpc.CallOption) (*DeleteCloudImageResponse, error) {
	out := new(DeleteCloudImageResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_DeleteCloudImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) UpdateCloudImageInfo(ctx context.Context, in *UpdateCloudImageInfoRequest, opts ...grpc.CallOption) (*UpdateCloudImageInfoResponse, error) {
	out := new(UpdateCloudImageInfoResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_UpdateCloudImageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) AddOsVersion(ctx context.Context, in *AddOsVersionRequest, opts ...grpc.CallOption) (*AddOsVersionResponse, error) {
	out := new(AddOsVersionResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_AddOsVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) DeleteOsVersion(ctx context.Context, in *DeleteOsVersionRequest, opts ...grpc.CallOption) (*DeleteOsVersionResponse, error) {
	out := new(DeleteOsVersionResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_DeleteOsVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) QueryOsVersionMap(ctx context.Context, in *QueryOsVersionMapRequest, opts ...grpc.CallOption) (*QueryOsVersionMapResponse, error) {
	out := new(QueryOsVersionMapResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_QueryOsVersionMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disklessCloudImageClient) UpdateOsVersion(ctx context.Context, in *UpdateOsVersionRequest, opts ...grpc.CallOption) (*UpdateOsVersionResponse, error) {
	out := new(UpdateOsVersionResponse)
	err := c.cc.Invoke(ctx, DisklessCloudImage_UpdateOsVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisklessCloudImageServer is the server API for DisklessCloudImage service.
// All implementations must embed UnimplementedDisklessCloudImageServer
// for forward compatibility
type DisklessCloudImageServer interface {
	// 查询镜像列表
	QueryCloudImageList(context.Context, *QueryCloudImageListRequest) (*QueryCloudImageListResponse, error)
	// 获取镜像下载链接
	GetImageDownloadUrl(context.Context, *GetImageDownloadUrlRequest) (*GetImageDownloadUrlResponse, error)
	// 上传机房镜像(获取镜像上传链接，调用机房导出接口)
	UploadAreaImage(context.Context, *UploadAreaImageRequest) (*UploadAreaImageResponse, error)
	// 下载镜像到机房(获取镜像下载链接，调用机房导入接口）
	DownloadImageToArea(context.Context, *DownloadImageToAreaRequest) (*DownloadImageToAreaResponse, error)
	CreateImageFromAreaInstance(context.Context, *CreateImageFromAreaInstanceRequest) (*CreateImageFromAreaInstanceResponse, error)
	// 登记一个oss上的镜像
	RegisterCloudImage(context.Context, *RegisterCloudImageRequest) (*RegisterCloudImageResponse, error)
	// 删除指定镜像
	DeleteCloudImage(context.Context, *DeleteCloudImageRequest) (*DeleteCloudImageResponse, error)
	// 编辑镜像信息
	UpdateCloudImageInfo(context.Context, *UpdateCloudImageInfoRequest) (*UpdateCloudImageInfoResponse, error)
	// os_version
	AddOsVersion(context.Context, *AddOsVersionRequest) (*AddOsVersionResponse, error)
	DeleteOsVersion(context.Context, *DeleteOsVersionRequest) (*DeleteOsVersionResponse, error)
	QueryOsVersionMap(context.Context, *QueryOsVersionMapRequest) (*QueryOsVersionMapResponse, error)
	UpdateOsVersion(context.Context, *UpdateOsVersionRequest) (*UpdateOsVersionResponse, error)
	mustEmbedUnimplementedDisklessCloudImageServer()
}

// UnimplementedDisklessCloudImageServer must be embedded to have forward compatible implementations.
type UnimplementedDisklessCloudImageServer struct {
}

func (UnimplementedDisklessCloudImageServer) QueryCloudImageList(context.Context, *QueryCloudImageListRequest) (*QueryCloudImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCloudImageList not implemented")
}
func (UnimplementedDisklessCloudImageServer) GetImageDownloadUrl(context.Context, *GetImageDownloadUrlRequest) (*GetImageDownloadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDownloadUrl not implemented")
}
func (UnimplementedDisklessCloudImageServer) UploadAreaImage(context.Context, *UploadAreaImageRequest) (*UploadAreaImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAreaImage not implemented")
}
func (UnimplementedDisklessCloudImageServer) DownloadImageToArea(context.Context, *DownloadImageToAreaRequest) (*DownloadImageToAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImageToArea not implemented")
}
func (UnimplementedDisklessCloudImageServer) CreateImageFromAreaInstance(context.Context, *CreateImageFromAreaInstanceRequest) (*CreateImageFromAreaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageFromAreaInstance not implemented")
}
func (UnimplementedDisklessCloudImageServer) RegisterCloudImage(context.Context, *RegisterCloudImageRequest) (*RegisterCloudImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCloudImage not implemented")
}
func (UnimplementedDisklessCloudImageServer) DeleteCloudImage(context.Context, *DeleteCloudImageRequest) (*DeleteCloudImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudImage not implemented")
}
func (UnimplementedDisklessCloudImageServer) UpdateCloudImageInfo(context.Context, *UpdateCloudImageInfoRequest) (*UpdateCloudImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudImageInfo not implemented")
}
func (UnimplementedDisklessCloudImageServer) AddOsVersion(context.Context, *AddOsVersionRequest) (*AddOsVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOsVersion not implemented")
}
func (UnimplementedDisklessCloudImageServer) DeleteOsVersion(context.Context, *DeleteOsVersionRequest) (*DeleteOsVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOsVersion not implemented")
}
func (UnimplementedDisklessCloudImageServer) QueryOsVersionMap(context.Context, *QueryOsVersionMapRequest) (*QueryOsVersionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOsVersionMap not implemented")
}
func (UnimplementedDisklessCloudImageServer) UpdateOsVersion(context.Context, *UpdateOsVersionRequest) (*UpdateOsVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOsVersion not implemented")
}
func (UnimplementedDisklessCloudImageServer) mustEmbedUnimplementedDisklessCloudImageServer() {}

// UnsafeDisklessCloudImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisklessCloudImageServer will
// result in compilation errors.
type UnsafeDisklessCloudImageServer interface {
	mustEmbedUnimplementedDisklessCloudImageServer()
}

func RegisterDisklessCloudImageServer(s grpc.ServiceRegistrar, srv DisklessCloudImageServer) {
	s.RegisterService(&DisklessCloudImage_ServiceDesc, srv)
}

func _DisklessCloudImage_QueryCloudImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCloudImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).QueryCloudImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_QueryCloudImageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).QueryCloudImageList(ctx, req.(*QueryCloudImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_GetImageDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageDownloadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).GetImageDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_GetImageDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).GetImageDownloadUrl(ctx, req.(*GetImageDownloadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_UploadAreaImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAreaImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).UploadAreaImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_UploadAreaImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).UploadAreaImage(ctx, req.(*UploadAreaImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_DownloadImageToArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageToAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).DownloadImageToArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_DownloadImageToArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).DownloadImageToArea(ctx, req.(*DownloadImageToAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_CreateImageFromAreaInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageFromAreaInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).CreateImageFromAreaInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_CreateImageFromAreaInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).CreateImageFromAreaInstance(ctx, req.(*CreateImageFromAreaInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_RegisterCloudImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCloudImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).RegisterCloudImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_RegisterCloudImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).RegisterCloudImage(ctx, req.(*RegisterCloudImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_DeleteCloudImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).DeleteCloudImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_DeleteCloudImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).DeleteCloudImage(ctx, req.(*DeleteCloudImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_UpdateCloudImageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudImageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).UpdateCloudImageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_UpdateCloudImageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).UpdateCloudImageInfo(ctx, req.(*UpdateCloudImageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_AddOsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).AddOsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_AddOsVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).AddOsVersion(ctx, req.(*AddOsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_DeleteOsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).DeleteOsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_DeleteOsVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).DeleteOsVersion(ctx, req.(*DeleteOsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_QueryOsVersionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOsVersionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).QueryOsVersionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_QueryOsVersionMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).QueryOsVersionMap(ctx, req.(*QueryOsVersionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisklessCloudImage_UpdateOsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisklessCloudImageServer).UpdateOsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisklessCloudImage_UpdateOsVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisklessCloudImageServer).UpdateOsVersion(ctx, req.(*UpdateOsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisklessCloudImage_ServiceDesc is the grpc.ServiceDesc for DisklessCloudImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisklessCloudImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diskless_cloud_image.DisklessCloudImage",
	HandlerType: (*DisklessCloudImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCloudImageList",
			Handler:    _DisklessCloudImage_QueryCloudImageList_Handler,
		},
		{
			MethodName: "GetImageDownloadUrl",
			Handler:    _DisklessCloudImage_GetImageDownloadUrl_Handler,
		},
		{
			MethodName: "UploadAreaImage",
			Handler:    _DisklessCloudImage_UploadAreaImage_Handler,
		},
		{
			MethodName: "DownloadImageToArea",
			Handler:    _DisklessCloudImage_DownloadImageToArea_Handler,
		},
		{
			MethodName: "CreateImageFromAreaInstance",
			Handler:    _DisklessCloudImage_CreateImageFromAreaInstance_Handler,
		},
		{
			MethodName: "RegisterCloudImage",
			Handler:    _DisklessCloudImage_RegisterCloudImage_Handler,
		},
		{
			MethodName: "DeleteCloudImage",
			Handler:    _DisklessCloudImage_DeleteCloudImage_Handler,
		},
		{
			MethodName: "UpdateCloudImageInfo",
			Handler:    _DisklessCloudImage_UpdateCloudImageInfo_Handler,
		},
		{
			MethodName: "AddOsVersion",
			Handler:    _DisklessCloudImage_AddOsVersion_Handler,
		},
		{
			MethodName: "DeleteOsVersion",
			Handler:    _DisklessCloudImage_DeleteOsVersion_Handler,
		},
		{
			MethodName: "QueryOsVersionMap",
			Handler:    _DisklessCloudImage_QueryOsVersionMap_Handler,
		},
		{
			MethodName: "UpdateOsVersion",
			Handler:    _DisklessCloudImage_UpdateOsVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diskless_cloud_image/diskless_cloud_image.proto",
}
