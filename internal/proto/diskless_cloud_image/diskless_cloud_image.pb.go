// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.15.8
// source: diskless_cloud_image/diskless_cloud_image.proto

package diskless_cloud_image

import (
	common "gitlab.vrviu.com/diskless_stack/diskless_stack/protocol/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          // 自增ID
	ImageId      string `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"`               // 全局唯一ID(31020)
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                       // 镜像名：云电竞通用镜像win10
	OsVersion    string `protobuf:"bytes,4,opt,name=os_version,proto3" json:"os_version,omitempty"`           // 内置os版本描述：win10LTSC-64
	Size         int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                      // 挂载出来的盘的字节数
	Remark       string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`                   // 备注信息
	ManagerState int32  `protobuf:"varint,7,opt,name=manager_state,proto3" json:"manager_state,omitempty"`    // 1-启动， 2-停用
	State        int32  `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`                    // 状态 0-正常，1-异常不可用，2-上传中，3-未上传，4-已移除
	ImageSrcArea int64  `protobuf:"varint,9,opt,name=image_src_area,proto3" json:"image_src_area,omitempty"`  // 上传任务所在机房
	UploadTaskId int64  `protobuf:"varint,10,opt,name=upload_task_id,proto3" json:"upload_task_id,omitempty"` // 上传任务ID
	CreateTime   string `protobuf:"bytes,11,opt,name=create_time,proto3" json:"create_time,omitempty"`        // 创建时间
	UpdateTime   string `protobuf:"bytes,12,opt,name=update_time,proto3" json:"update_time,omitempty"`        // 用户最后更新时间
	ModifyTime   string `protobuf:"bytes,13,opt,name=modify_time,proto3" json:"modify_time,omitempty"`        // db最后更新时间
}

func (x *CloudImageInfo) Reset() {
	*x = CloudImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudImageInfo) ProtoMessage() {}

func (x *CloudImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudImageInfo.ProtoReflect.Descriptor instead.
func (*CloudImageInfo) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{0}
}

func (x *CloudImageInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CloudImageInfo) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *CloudImageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudImageInfo) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *CloudImageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CloudImageInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CloudImageInfo) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *CloudImageInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CloudImageInfo) GetImageSrcArea() int64 {
	if x != nil {
		return x.ImageSrcArea
	}
	return 0
}

func (x *CloudImageInfo) GetUploadTaskId() int64 {
	if x != nil {
		return x.UploadTaskId
	}
	return 0
}

func (x *CloudImageInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CloudImageInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CloudImageInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type QueryCloudImageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryCloudImageListRequest) Reset() {
	*x = QueryCloudImageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCloudImageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCloudImageListRequest) ProtoMessage() {}

func (x *QueryCloudImageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCloudImageListRequest.ProtoReflect.Descriptor instead.
func (*QueryCloudImageListRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCloudImageListRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryCloudImageListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryCloudImageListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryCloudImageListRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryCloudImageListRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryCloudImageListRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type QueryCloudImageListBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string            `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Total  int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List   []*CloudImageInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCloudImageListBody) Reset() {
	*x = QueryCloudImageListBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCloudImageListBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCloudImageListBody) ProtoMessage() {}

func (x *QueryCloudImageListBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCloudImageListBody.ProtoReflect.Descriptor instead.
func (*QueryCloudImageListBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{2}
}

func (x *QueryCloudImageListBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryCloudImageListBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCloudImageListBody) GetList() []*CloudImageInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryCloudImageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo          `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *QueryCloudImageListBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *QueryCloudImageListResponse) Reset() {
	*x = QueryCloudImageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCloudImageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCloudImageListResponse) ProtoMessage() {}

func (x *QueryCloudImageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCloudImageListResponse.ProtoReflect.Descriptor instead.
func (*QueryCloudImageListResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{3}
}

func (x *QueryCloudImageListResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryCloudImageListResponse) GetBody() *QueryCloudImageListBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type GetImageDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	ImageId string `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"` // 全局唯一ID(31020)
}

func (x *GetImageDownloadUrlRequest) Reset() {
	*x = GetImageDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageDownloadUrlRequest) ProtoMessage() {}

func (x *GetImageDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetImageDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{4}
}

func (x *GetImageDownloadUrlRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetImageDownloadUrlRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type GetImageDownloadUrlBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetImageDownloadUrlBody) Reset() {
	*x = GetImageDownloadUrlBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageDownloadUrlBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageDownloadUrlBody) ProtoMessage() {}

func (x *GetImageDownloadUrlBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageDownloadUrlBody.ProtoReflect.Descriptor instead.
func (*GetImageDownloadUrlBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{5}
}

func (x *GetImageDownloadUrlBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *GetImageDownloadUrlBody) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetImageDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo          `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *GetImageDownloadUrlBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GetImageDownloadUrlResponse) Reset() {
	*x = GetImageDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageDownloadUrlResponse) ProtoMessage() {}

func (x *GetImageDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetImageDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{6}
}

func (x *GetImageDownloadUrlResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *GetImageDownloadUrlResponse) GetBody() *GetImageDownloadUrlBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type UploadAreaImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	ImageId      string `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"`            // 全局唯一ID(31020)
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    // 镜像名：云电竞通用镜像win10
	OsVersion    string `protobuf:"bytes,4,opt,name=os_version,proto3" json:"os_version,omitempty"`        // 内置os版本描述：win10LTSC-64
	Remark       string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                // 备注信息
	ManagerState int32  `protobuf:"varint,6,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1-启动， 2-停用
	AreaId       int64  `protobuf:"varint,7,opt,name=area_id,proto3" json:"area_id,omitempty"`             // 镜像所在机房
}

func (x *UploadAreaImageRequest) Reset() {
	*x = UploadAreaImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAreaImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAreaImageRequest) ProtoMessage() {}

func (x *UploadAreaImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAreaImageRequest.ProtoReflect.Descriptor instead.
func (*UploadAreaImageRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{7}
}

func (x *UploadAreaImageRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UploadAreaImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *UploadAreaImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadAreaImageRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *UploadAreaImageRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UploadAreaImageRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *UploadAreaImageRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type UploadAreaImageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	TaskId int64  `protobuf:"varint,2,opt,name=task_id,proto3" json:"task_id,omitempty"` // 上传任务ID
}

func (x *UploadAreaImageBody) Reset() {
	*x = UploadAreaImageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAreaImageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAreaImageBody) ProtoMessage() {}

func (x *UploadAreaImageBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAreaImageBody.ProtoReflect.Descriptor instead.
func (*UploadAreaImageBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{8}
}

func (x *UploadAreaImageBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UploadAreaImageBody) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type UploadAreaImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo      `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *UploadAreaImageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UploadAreaImageResponse) Reset() {
	*x = UploadAreaImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAreaImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAreaImageResponse) ProtoMessage() {}

func (x *UploadAreaImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAreaImageResponse.ProtoReflect.Descriptor instead.
func (*UploadAreaImageResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{9}
}

func (x *UploadAreaImageResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *UploadAreaImageResponse) GetBody() *UploadAreaImageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type DownloadImageToAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	ImageId      string `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"`            // 全局唯一ID(31020)
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    // 镜像名：云电竞通用镜像win10
	OsVersion    string `protobuf:"bytes,4,opt,name=os_version,proto3" json:"os_version,omitempty"`        // 内置os版本描述：win10LTSC-64
	Remark       string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`                // 备注信息
	ManagerState int32  `protobuf:"varint,7,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1-启动， 2-停用
	AreaId       int64  `protobuf:"varint,8,opt,name=area_id,proto3" json:"area_id,omitempty"`             // 下载镜像的机房
}

func (x *DownloadImageToAreaRequest) Reset() {
	*x = DownloadImageToAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadImageToAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadImageToAreaRequest) ProtoMessage() {}

func (x *DownloadImageToAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadImageToAreaRequest.ProtoReflect.Descriptor instead.
func (*DownloadImageToAreaRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadImageToAreaRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DownloadImageToAreaRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DownloadImageToAreaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DownloadImageToAreaRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *DownloadImageToAreaRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DownloadImageToAreaRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *DownloadImageToAreaRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type DownloadImageToAreaBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	TaskId int64  `protobuf:"varint,2,opt,name=task_id,proto3" json:"task_id,omitempty"` // 下载任务ID
}

func (x *DownloadImageToAreaBody) Reset() {
	*x = DownloadImageToAreaBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadImageToAreaBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadImageToAreaBody) ProtoMessage() {}

func (x *DownloadImageToAreaBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadImageToAreaBody.ProtoReflect.Descriptor instead.
func (*DownloadImageToAreaBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadImageToAreaBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DownloadImageToAreaBody) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type DownloadImageToAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo          `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *DownloadImageToAreaBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DownloadImageToAreaResponse) Reset() {
	*x = DownloadImageToAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadImageToAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadImageToAreaResponse) ProtoMessage() {}

func (x *DownloadImageToAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadImageToAreaResponse.ProtoReflect.Descriptor instead.
func (*DownloadImageToAreaResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{12}
}

func (x *DownloadImageToAreaResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *DownloadImageToAreaResponse) GetBody() *DownloadImageToAreaBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateImageFromAreaInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string  `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	ImageId      string  `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"`            // 全局唯一ID(31020)
	Name         string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    // 镜像名：云电竞通用镜像win10
	OsVersion    string  `protobuf:"bytes,4,opt,name=os_version,proto3" json:"os_version,omitempty"`        // 内置os版本描述：win10LTSC-64
	Remark       string  `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`                // 备注信息
	ManagerState int32   `protobuf:"varint,7,opt,name=manager_state,proto3" json:"manager_state,omitempty"` // 1-启动， 2-停用
	AreaId       int64   `protobuf:"varint,8,opt,name=area_id,proto3" json:"area_id,omitempty"`             // 生成镜像的机房
	VmId         int64   `protobuf:"varint,9,opt,name=vm_id,proto3" json:"vm_id,omitempty"`                 // 生成镜像的实例
	OsVolumeId   float64 `protobuf:"fixed64,10,opt,name=os_volume_id,proto3" json:"os_volume_id,omitempty"` // 生成镜像的卷
}

func (x *CreateImageFromAreaInstanceRequest) Reset() {
	*x = CreateImageFromAreaInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageFromAreaInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageFromAreaInstanceRequest) ProtoMessage() {}

func (x *CreateImageFromAreaInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageFromAreaInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateImageFromAreaInstanceRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{13}
}

func (x *CreateImageFromAreaInstanceRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *CreateImageFromAreaInstanceRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *CreateImageFromAreaInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateImageFromAreaInstanceRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *CreateImageFromAreaInstanceRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateImageFromAreaInstanceRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *CreateImageFromAreaInstanceRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *CreateImageFromAreaInstanceRequest) GetVmId() int64 {
	if x != nil {
		return x.VmId
	}
	return 0
}

func (x *CreateImageFromAreaInstanceRequest) GetOsVolumeId() float64 {
	if x != nil {
		return x.OsVolumeId
	}
	return 0
}

type CreateImageFromAreaInstanceBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	TaskId  int64  `protobuf:"varint,2,opt,name=task_id,proto3" json:"task_id,omitempty"`  // 创建任务ID
	ImageId string `protobuf:"bytes,3,opt,name=image_id,proto3" json:"image_id,omitempty"` // 全局唯一ID(31020)
}

func (x *CreateImageFromAreaInstanceBody) Reset() {
	*x = CreateImageFromAreaInstanceBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageFromAreaInstanceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageFromAreaInstanceBody) ProtoMessage() {}

func (x *CreateImageFromAreaInstanceBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageFromAreaInstanceBody.ProtoReflect.Descriptor instead.
func (*CreateImageFromAreaInstanceBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{14}
}

func (x *CreateImageFromAreaInstanceBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *CreateImageFromAreaInstanceBody) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CreateImageFromAreaInstanceBody) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type CreateImageFromAreaInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo                  `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *CreateImageFromAreaInstanceBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CreateImageFromAreaInstanceResponse) Reset() {
	*x = CreateImageFromAreaInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageFromAreaInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageFromAreaInstanceResponse) ProtoMessage() {}

func (x *CreateImageFromAreaInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageFromAreaInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateImageFromAreaInstanceResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{15}
}

func (x *CreateImageFromAreaInstanceResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *CreateImageFromAreaInstanceResponse) GetBody() *CreateImageFromAreaInstanceBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type RegisterCloudImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	ImageId      string `protobuf:"bytes,2,opt,name=image_id,proto3" json:"image_id,omitempty"`              // 全局唯一ID(31020)
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                      // 镜像名：云电竞通用镜像win10
	OsVersion    string `protobuf:"bytes,4,opt,name=os_version,proto3" json:"os_version,omitempty"`          // 内置os版本描述：win10LTSC-64
	Remark       string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                  // 备注信息
	ManagerState int32  `protobuf:"varint,6,opt,name=manager_state,proto3" json:"manager_state,omitempty"`   // 1-启动， 2-停用
	ImageSrcArea int64  `protobuf:"varint,7,opt,name=image_src_area,proto3" json:"image_src_area,omitempty"` // 上传机房
}

func (x *RegisterCloudImageRequest) Reset() {
	*x = RegisterCloudImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCloudImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCloudImageRequest) ProtoMessage() {}

func (x *RegisterCloudImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCloudImageRequest.ProtoReflect.Descriptor instead.
func (*RegisterCloudImageRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterCloudImageRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *RegisterCloudImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *RegisterCloudImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterCloudImageRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *RegisterCloudImageRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RegisterCloudImageRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *RegisterCloudImageRequest) GetImageSrcArea() int64 {
	if x != nil {
		return x.ImageSrcArea
	}
	return 0
}

type RegisterCloudImageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id        int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                // 自增ID
	UploadUrl string `protobuf:"bytes,3,opt,name=upload_url,proto3" json:"upload_url,omitempty"` // http put上传链接
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`             // 上传说明
}

func (x *RegisterCloudImageBody) Reset() {
	*x = RegisterCloudImageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCloudImageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCloudImageBody) ProtoMessage() {}

func (x *RegisterCloudImageBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCloudImageBody.ProtoReflect.Descriptor instead.
func (*RegisterCloudImageBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterCloudImageBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *RegisterCloudImageBody) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegisterCloudImageBody) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *RegisterCloudImageBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RegisterCloudImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo         `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *RegisterCloudImageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RegisterCloudImageResponse) Reset() {
	*x = RegisterCloudImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCloudImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCloudImageResponse) ProtoMessage() {}

func (x *RegisterCloudImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCloudImageResponse.ProtoReflect.Descriptor instead.
func (*RegisterCloudImageResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterCloudImageResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *RegisterCloudImageResponse) GetBody() *RegisterCloudImageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type DeleteCloudImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id     int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // 自增ID
}

func (x *DeleteCloudImageRequest) Reset() {
	*x = DeleteCloudImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudImageRequest) ProtoMessage() {}

func (x *DeleteCloudImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudImageRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteCloudImageRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DeleteCloudImageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCloudImageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *DeleteCloudImageBody) Reset() {
	*x = DeleteCloudImageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudImageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudImageBody) ProtoMessage() {}

func (x *DeleteCloudImageBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudImageBody.ProtoReflect.Descriptor instead.
func (*DeleteCloudImageBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCloudImageBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type DeleteCloudImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo       `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *DeleteCloudImageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DeleteCloudImageResponse) Reset() {
	*x = DeleteCloudImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudImageResponse) ProtoMessage() {}

func (x *DeleteCloudImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudImageResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudImageResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCloudImageResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *DeleteCloudImageResponse) GetBody() *DeleteCloudImageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type UpdateCloudImageInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                          // 自增ID
	ImageId      string `protobuf:"bytes,3,opt,name=image_id,proto3" json:"image_id,omitempty"`               // 全局唯一ID(31020)
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                       // 镜像名：云电竞通用镜像win10
	OsVersion    string `protobuf:"bytes,5,opt,name=os_version,proto3" json:"os_version,omitempty"`           // 内置os版本描述：win10LTSC-64
	Size         int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                      // 挂载出来的盘的字节数
	Remark       string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`                   // 备注信息
	ManagerState int32  `protobuf:"varint,8,opt,name=manager_state,proto3" json:"manager_state,omitempty"`    // 1-启动， 2-停用
	State        int32  `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`                    // 状态 0-正常，1-异常不可用，2-上传中，3-未上传，4-已移除
	ImageSrcArea int64  `protobuf:"varint,10,opt,name=image_src_area,proto3" json:"image_src_area,omitempty"` // 上传任务所在机房
	UploadTaskId int64  `protobuf:"varint,11,opt,name=upload_task_id,proto3" json:"upload_task_id,omitempty"` // 上传任务ID
}

func (x *UpdateCloudImageInfoRequest) Reset() {
	*x = UpdateCloudImageInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudImageInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudImageInfoRequest) ProtoMessage() {}

func (x *UpdateCloudImageInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudImageInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudImageInfoRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateCloudImageInfoRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateCloudImageInfoRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCloudImageInfoRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *UpdateCloudImageInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCloudImageInfoRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *UpdateCloudImageInfoRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UpdateCloudImageInfoRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateCloudImageInfoRequest) GetManagerState() int32 {
	if x != nil {
		return x.ManagerState
	}
	return 0
}

func (x *UpdateCloudImageInfoRequest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateCloudImageInfoRequest) GetImageSrcArea() int64 {
	if x != nil {
		return x.ImageSrcArea
	}
	return 0
}

func (x *UpdateCloudImageInfoRequest) GetUploadTaskId() int64 {
	if x != nil {
		return x.UploadTaskId
	}
	return 0
}

type UpdateCloudImageInfoBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *UpdateCloudImageInfoBody) Reset() {
	*x = UpdateCloudImageInfoBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudImageInfoBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudImageInfoBody) ProtoMessage() {}

func (x *UpdateCloudImageInfoBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudImageInfoBody.ProtoReflect.Descriptor instead.
func (*UpdateCloudImageInfoBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateCloudImageInfoBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type UpdateCloudImageInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo           `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *UpdateCloudImageInfoBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UpdateCloudImageInfoResponse) Reset() {
	*x = UpdateCloudImageInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudImageInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudImageInfoResponse) ProtoMessage() {}

func (x *UpdateCloudImageInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudImageInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudImageInfoResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateCloudImageInfoResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *UpdateCloudImageInfoResponse) GetBody() *UpdateCloudImageInfoBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type AddOsVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	OsVersion string `protobuf:"bytes,2,opt,name=os_version,proto3" json:"os_version,omitempty"` // 内置os版本描述：win10LTSC-64
}

func (x *AddOsVersionRequest) Reset() {
	*x = AddOsVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOsVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOsVersionRequest) ProtoMessage() {}

func (x *AddOsVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOsVersionRequest.ProtoReflect.Descriptor instead.
func (*AddOsVersionRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{25}
}

func (x *AddOsVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *AddOsVersionRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

type AddOsVersionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *AddOsVersionBody) Reset() {
	*x = AddOsVersionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOsVersionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOsVersionBody) ProtoMessage() {}

func (x *AddOsVersionBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOsVersionBody.ProtoReflect.Descriptor instead.
func (*AddOsVersionBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{26}
}

func (x *AddOsVersionBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type AddOsVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo   `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *AddOsVersionBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AddOsVersionResponse) Reset() {
	*x = AddOsVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOsVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOsVersionResponse) ProtoMessage() {}

func (x *AddOsVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOsVersionResponse.ProtoReflect.Descriptor instead.
func (*AddOsVersionResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{27}
}

func (x *AddOsVersionResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *AddOsVersionResponse) GetBody() *AddOsVersionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type DeleteOsVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id     int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOsVersionRequest) Reset() {
	*x = DeleteOsVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOsVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOsVersionRequest) ProtoMessage() {}

func (x *DeleteOsVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOsVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteOsVersionRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteOsVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *DeleteOsVersionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOsVersionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *DeleteOsVersionBody) Reset() {
	*x = DeleteOsVersionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOsVersionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOsVersionBody) ProtoMessage() {}

func (x *DeleteOsVersionBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOsVersionBody.ProtoReflect.Descriptor instead.
func (*DeleteOsVersionBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteOsVersionBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type DeleteOsVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo      `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *DeleteOsVersionBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DeleteOsVersionResponse) Reset() {
	*x = DeleteOsVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOsVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOsVersionResponse) ProtoMessage() {}

func (x *DeleteOsVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOsVersionResponse.ProtoReflect.Descriptor instead.
func (*DeleteOsVersionResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteOsVersionResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *DeleteOsVersionResponse) GetBody() *DeleteOsVersionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type QueryOsVersionMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId   string   `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Offset   int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CondList []string `protobuf:"bytes,4,rep,name=cond_list,proto3" json:"cond_list,omitempty"`
	Sorts    string   `protobuf:"bytes,5,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Orders   string   `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *QueryOsVersionMapRequest) Reset() {
	*x = QueryOsVersionMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOsVersionMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOsVersionMapRequest) ProtoMessage() {}

func (x *QueryOsVersionMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOsVersionMapRequest.ProtoReflect.Descriptor instead.
func (*QueryOsVersionMapRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{31}
}

func (x *QueryOsVersionMapRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryOsVersionMapRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryOsVersionMapRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryOsVersionMapRequest) GetCondList() []string {
	if x != nil {
		return x.CondList
	}
	return nil
}

func (x *QueryOsVersionMapRequest) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *QueryOsVersionMapRequest) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

type OsVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OsVersion  string `protobuf:"bytes,2,opt,name=os_version,proto3" json:"os_version,omitempty"`   // 内置os版本描述：win10LTSC-64
	CreateTime string `protobuf:"bytes,3,opt,name=create_time,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime string `protobuf:"bytes,4,opt,name=update_time,proto3" json:"update_time,omitempty"` // 用户最后更新时间
	ModifyTime string `protobuf:"bytes,5,opt,name=modify_time,proto3" json:"modify_time,omitempty"` // db最后更新时间
}

func (x *OsVersion) Reset() {
	*x = OsVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsVersion) ProtoMessage() {}

func (x *OsVersion) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsVersion.ProtoReflect.Descriptor instead.
func (*OsVersion) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{32}
}

func (x *OsVersion) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OsVersion) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *OsVersion) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OsVersion) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OsVersion) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type QueryOsVersionMapBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string       `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Total  int32        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List   []*OsVersion `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryOsVersionMapBody) Reset() {
	*x = QueryOsVersionMapBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOsVersionMapBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOsVersionMapBody) ProtoMessage() {}

func (x *QueryOsVersionMapBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOsVersionMapBody.ProtoReflect.Descriptor instead.
func (*QueryOsVersionMapBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{33}
}

func (x *QueryOsVersionMapBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *QueryOsVersionMapBody) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryOsVersionMapBody) GetList() []*OsVersion {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryOsVersionMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo        `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *QueryOsVersionMapBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *QueryOsVersionMapResponse) Reset() {
	*x = QueryOsVersionMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOsVersionMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOsVersionMapResponse) ProtoMessage() {}

func (x *QueryOsVersionMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOsVersionMapResponse.ProtoReflect.Descriptor instead.
func (*QueryOsVersionMapResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{34}
}

func (x *QueryOsVersionMapResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *QueryOsVersionMapResponse) GetBody() *QueryOsVersionMapBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type UpdateOsVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NewOsVersion string `protobuf:"bytes,4,opt,name=new_os_version,proto3" json:"new_os_version,omitempty"` // 内置os版本描述：win10LTSC-64
}

func (x *UpdateOsVersionRequest) Reset() {
	*x = UpdateOsVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOsVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOsVersionRequest) ProtoMessage() {}

func (x *UpdateOsVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOsVersionRequest.ProtoReflect.Descriptor instead.
func (*UpdateOsVersionRequest) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateOsVersionRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *UpdateOsVersionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOsVersionRequest) GetNewOsVersion() string {
	if x != nil {
		return x.NewOsVersion
	}
	return ""
}

type UpdateOsVersionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,proto3" json:"flow_id,omitempty"`
}

func (x *UpdateOsVersionBody) Reset() {
	*x = UpdateOsVersionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOsVersionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOsVersionBody) ProtoMessage() {}

func (x *UpdateOsVersionBody) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOsVersionBody.ProtoReflect.Descriptor instead.
func (*UpdateOsVersionBody) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateOsVersionBody) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type UpdateOsVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *common.RspInfo      `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Body *UpdateOsVersionBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UpdateOsVersionResponse) Reset() {
	*x = UpdateOsVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOsVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOsVersionResponse) ProtoMessage() {}

func (x *UpdateOsVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOsVersionResponse.ProtoReflect.Descriptor instead.
func (*UpdateOsVersionResponse) Descriptor() ([]byte, []int) {
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateOsVersionResponse) GetRet() *common.RspInfo {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *UpdateOsVersionResponse) GetBody() *UpdateOsVersionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_diskless_cloud_image_diskless_cloud_image_proto protoreflect.FileDescriptor

var file_diskless_cloud_image_diskless_cloud_image_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x52, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x45,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xde, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa0, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x73, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x22, 0x76, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x43, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0xcf, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x42,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x22, 0x75, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x42, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x7b, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x09,
	0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x7c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3f, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x6a,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x5f,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0xc4, 0x10, 0x0a, 0x12, 0x44, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0xb1, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31,
	0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x13,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x30, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x12,
	0xd1, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x38, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69,
	0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x2f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a,
	0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x41,
	0x64, 0x64, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0xa9, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0xa1, 0x01, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x73,
	0x6b, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x72, 0x76, 0x69, 0x75, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x64, 0x69, 0x73, 0x6b,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diskless_cloud_image_diskless_cloud_image_proto_rawDescOnce sync.Once
	file_diskless_cloud_image_diskless_cloud_image_proto_rawDescData = file_diskless_cloud_image_diskless_cloud_image_proto_rawDesc
)

func file_diskless_cloud_image_diskless_cloud_image_proto_rawDescGZIP() []byte {
	file_diskless_cloud_image_diskless_cloud_image_proto_rawDescOnce.Do(func() {
		file_diskless_cloud_image_diskless_cloud_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_diskless_cloud_image_diskless_cloud_image_proto_rawDescData)
	})
	return file_diskless_cloud_image_diskless_cloud_image_proto_rawDescData
}

var file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_diskless_cloud_image_diskless_cloud_image_proto_goTypes = []interface{}{
	(*CloudImageInfo)(nil),                      // 0: diskless_cloud_image.CloudImageInfo
	(*QueryCloudImageListRequest)(nil),          // 1: diskless_cloud_image.QueryCloudImageListRequest
	(*QueryCloudImageListBody)(nil),             // 2: diskless_cloud_image.QueryCloudImageListBody
	(*QueryCloudImageListResponse)(nil),         // 3: diskless_cloud_image.QueryCloudImageListResponse
	(*GetImageDownloadUrlRequest)(nil),          // 4: diskless_cloud_image.GetImageDownloadUrlRequest
	(*GetImageDownloadUrlBody)(nil),             // 5: diskless_cloud_image.GetImageDownloadUrlBody
	(*GetImageDownloadUrlResponse)(nil),         // 6: diskless_cloud_image.GetImageDownloadUrlResponse
	(*UploadAreaImageRequest)(nil),              // 7: diskless_cloud_image.UploadAreaImageRequest
	(*UploadAreaImageBody)(nil),                 // 8: diskless_cloud_image.UploadAreaImageBody
	(*UploadAreaImageResponse)(nil),             // 9: diskless_cloud_image.UploadAreaImageResponse
	(*DownloadImageToAreaRequest)(nil),          // 10: diskless_cloud_image.DownloadImageToAreaRequest
	(*DownloadImageToAreaBody)(nil),             // 11: diskless_cloud_image.DownloadImageToAreaBody
	(*DownloadImageToAreaResponse)(nil),         // 12: diskless_cloud_image.DownloadImageToAreaResponse
	(*CreateImageFromAreaInstanceRequest)(nil),  // 13: diskless_cloud_image.CreateImageFromAreaInstanceRequest
	(*CreateImageFromAreaInstanceBody)(nil),     // 14: diskless_cloud_image.CreateImageFromAreaInstanceBody
	(*CreateImageFromAreaInstanceResponse)(nil), // 15: diskless_cloud_image.CreateImageFromAreaInstanceResponse
	(*RegisterCloudImageRequest)(nil),           // 16: diskless_cloud_image.RegisterCloudImageRequest
	(*RegisterCloudImageBody)(nil),              // 17: diskless_cloud_image.RegisterCloudImageBody
	(*RegisterCloudImageResponse)(nil),          // 18: diskless_cloud_image.RegisterCloudImageResponse
	(*DeleteCloudImageRequest)(nil),             // 19: diskless_cloud_image.DeleteCloudImageRequest
	(*DeleteCloudImageBody)(nil),                // 20: diskless_cloud_image.DeleteCloudImageBody
	(*DeleteCloudImageResponse)(nil),            // 21: diskless_cloud_image.DeleteCloudImageResponse
	(*UpdateCloudImageInfoRequest)(nil),         // 22: diskless_cloud_image.UpdateCloudImageInfoRequest
	(*UpdateCloudImageInfoBody)(nil),            // 23: diskless_cloud_image.UpdateCloudImageInfoBody
	(*UpdateCloudImageInfoResponse)(nil),        // 24: diskless_cloud_image.UpdateCloudImageInfoResponse
	(*AddOsVersionRequest)(nil),                 // 25: diskless_cloud_image.AddOsVersionRequest
	(*AddOsVersionBody)(nil),                    // 26: diskless_cloud_image.AddOsVersionBody
	(*AddOsVersionResponse)(nil),                // 27: diskless_cloud_image.AddOsVersionResponse
	(*DeleteOsVersionRequest)(nil),              // 28: diskless_cloud_image.DeleteOsVersionRequest
	(*DeleteOsVersionBody)(nil),                 // 29: diskless_cloud_image.DeleteOsVersionBody
	(*DeleteOsVersionResponse)(nil),             // 30: diskless_cloud_image.DeleteOsVersionResponse
	(*QueryOsVersionMapRequest)(nil),            // 31: diskless_cloud_image.QueryOsVersionMapRequest
	(*OsVersion)(nil),                           // 32: diskless_cloud_image.OsVersion
	(*QueryOsVersionMapBody)(nil),               // 33: diskless_cloud_image.QueryOsVersionMapBody
	(*QueryOsVersionMapResponse)(nil),           // 34: diskless_cloud_image.QueryOsVersionMapResponse
	(*UpdateOsVersionRequest)(nil),              // 35: diskless_cloud_image.UpdateOsVersionRequest
	(*UpdateOsVersionBody)(nil),                 // 36: diskless_cloud_image.UpdateOsVersionBody
	(*UpdateOsVersionResponse)(nil),             // 37: diskless_cloud_image.UpdateOsVersionResponse
	(*common.RspInfo)(nil),                      // 38: common.RspInfo
}
var file_diskless_cloud_image_diskless_cloud_image_proto_depIdxs = []int32{
	0,  // 0: diskless_cloud_image.QueryCloudImageListBody.list:type_name -> diskless_cloud_image.CloudImageInfo
	38, // 1: diskless_cloud_image.QueryCloudImageListResponse.ret:type_name -> common.RspInfo
	2,  // 2: diskless_cloud_image.QueryCloudImageListResponse.body:type_name -> diskless_cloud_image.QueryCloudImageListBody
	38, // 3: diskless_cloud_image.GetImageDownloadUrlResponse.ret:type_name -> common.RspInfo
	5,  // 4: diskless_cloud_image.GetImageDownloadUrlResponse.body:type_name -> diskless_cloud_image.GetImageDownloadUrlBody
	38, // 5: diskless_cloud_image.UploadAreaImageResponse.ret:type_name -> common.RspInfo
	8,  // 6: diskless_cloud_image.UploadAreaImageResponse.body:type_name -> diskless_cloud_image.UploadAreaImageBody
	38, // 7: diskless_cloud_image.DownloadImageToAreaResponse.ret:type_name -> common.RspInfo
	11, // 8: diskless_cloud_image.DownloadImageToAreaResponse.body:type_name -> diskless_cloud_image.DownloadImageToAreaBody
	38, // 9: diskless_cloud_image.CreateImageFromAreaInstanceResponse.ret:type_name -> common.RspInfo
	14, // 10: diskless_cloud_image.CreateImageFromAreaInstanceResponse.body:type_name -> diskless_cloud_image.CreateImageFromAreaInstanceBody
	38, // 11: diskless_cloud_image.RegisterCloudImageResponse.ret:type_name -> common.RspInfo
	17, // 12: diskless_cloud_image.RegisterCloudImageResponse.body:type_name -> diskless_cloud_image.RegisterCloudImageBody
	38, // 13: diskless_cloud_image.DeleteCloudImageResponse.ret:type_name -> common.RspInfo
	20, // 14: diskless_cloud_image.DeleteCloudImageResponse.body:type_name -> diskless_cloud_image.DeleteCloudImageBody
	38, // 15: diskless_cloud_image.UpdateCloudImageInfoResponse.ret:type_name -> common.RspInfo
	23, // 16: diskless_cloud_image.UpdateCloudImageInfoResponse.body:type_name -> diskless_cloud_image.UpdateCloudImageInfoBody
	38, // 17: diskless_cloud_image.AddOsVersionResponse.ret:type_name -> common.RspInfo
	26, // 18: diskless_cloud_image.AddOsVersionResponse.body:type_name -> diskless_cloud_image.AddOsVersionBody
	38, // 19: diskless_cloud_image.DeleteOsVersionResponse.ret:type_name -> common.RspInfo
	29, // 20: diskless_cloud_image.DeleteOsVersionResponse.body:type_name -> diskless_cloud_image.DeleteOsVersionBody
	32, // 21: diskless_cloud_image.QueryOsVersionMapBody.list:type_name -> diskless_cloud_image.OsVersion
	38, // 22: diskless_cloud_image.QueryOsVersionMapResponse.ret:type_name -> common.RspInfo
	33, // 23: diskless_cloud_image.QueryOsVersionMapResponse.body:type_name -> diskless_cloud_image.QueryOsVersionMapBody
	38, // 24: diskless_cloud_image.UpdateOsVersionResponse.ret:type_name -> common.RspInfo
	36, // 25: diskless_cloud_image.UpdateOsVersionResponse.body:type_name -> diskless_cloud_image.UpdateOsVersionBody
	1,  // 26: diskless_cloud_image.DisklessCloudImage.QueryCloudImageList:input_type -> diskless_cloud_image.QueryCloudImageListRequest
	4,  // 27: diskless_cloud_image.DisklessCloudImage.GetImageDownloadUrl:input_type -> diskless_cloud_image.GetImageDownloadUrlRequest
	7,  // 28: diskless_cloud_image.DisklessCloudImage.UploadAreaImage:input_type -> diskless_cloud_image.UploadAreaImageRequest
	10, // 29: diskless_cloud_image.DisklessCloudImage.DownloadImageToArea:input_type -> diskless_cloud_image.DownloadImageToAreaRequest
	13, // 30: diskless_cloud_image.DisklessCloudImage.CreateImageFromAreaInstance:input_type -> diskless_cloud_image.CreateImageFromAreaInstanceRequest
	16, // 31: diskless_cloud_image.DisklessCloudImage.RegisterCloudImage:input_type -> diskless_cloud_image.RegisterCloudImageRequest
	19, // 32: diskless_cloud_image.DisklessCloudImage.DeleteCloudImage:input_type -> diskless_cloud_image.DeleteCloudImageRequest
	22, // 33: diskless_cloud_image.DisklessCloudImage.UpdateCloudImageInfo:input_type -> diskless_cloud_image.UpdateCloudImageInfoRequest
	25, // 34: diskless_cloud_image.DisklessCloudImage.AddOsVersion:input_type -> diskless_cloud_image.AddOsVersionRequest
	28, // 35: diskless_cloud_image.DisklessCloudImage.DeleteOsVersion:input_type -> diskless_cloud_image.DeleteOsVersionRequest
	31, // 36: diskless_cloud_image.DisklessCloudImage.QueryOsVersionMap:input_type -> diskless_cloud_image.QueryOsVersionMapRequest
	35, // 37: diskless_cloud_image.DisklessCloudImage.UpdateOsVersion:input_type -> diskless_cloud_image.UpdateOsVersionRequest
	3,  // 38: diskless_cloud_image.DisklessCloudImage.QueryCloudImageList:output_type -> diskless_cloud_image.QueryCloudImageListResponse
	6,  // 39: diskless_cloud_image.DisklessCloudImage.GetImageDownloadUrl:output_type -> diskless_cloud_image.GetImageDownloadUrlResponse
	9,  // 40: diskless_cloud_image.DisklessCloudImage.UploadAreaImage:output_type -> diskless_cloud_image.UploadAreaImageResponse
	12, // 41: diskless_cloud_image.DisklessCloudImage.DownloadImageToArea:output_type -> diskless_cloud_image.DownloadImageToAreaResponse
	15, // 42: diskless_cloud_image.DisklessCloudImage.CreateImageFromAreaInstance:output_type -> diskless_cloud_image.CreateImageFromAreaInstanceResponse
	18, // 43: diskless_cloud_image.DisklessCloudImage.RegisterCloudImage:output_type -> diskless_cloud_image.RegisterCloudImageResponse
	21, // 44: diskless_cloud_image.DisklessCloudImage.DeleteCloudImage:output_type -> diskless_cloud_image.DeleteCloudImageResponse
	24, // 45: diskless_cloud_image.DisklessCloudImage.UpdateCloudImageInfo:output_type -> diskless_cloud_image.UpdateCloudImageInfoResponse
	27, // 46: diskless_cloud_image.DisklessCloudImage.AddOsVersion:output_type -> diskless_cloud_image.AddOsVersionResponse
	30, // 47: diskless_cloud_image.DisklessCloudImage.DeleteOsVersion:output_type -> diskless_cloud_image.DeleteOsVersionResponse
	34, // 48: diskless_cloud_image.DisklessCloudImage.QueryOsVersionMap:output_type -> diskless_cloud_image.QueryOsVersionMapResponse
	37, // 49: diskless_cloud_image.DisklessCloudImage.UpdateOsVersion:output_type -> diskless_cloud_image.UpdateOsVersionResponse
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_diskless_cloud_image_diskless_cloud_image_proto_init() }
func file_diskless_cloud_image_diskless_cloud_image_proto_init() {
	if File_diskless_cloud_image_diskless_cloud_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCloudImageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCloudImageListBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCloudImageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageDownloadUrlBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAreaImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAreaImageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAreaImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadImageToAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadImageToAreaBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadImageToAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageFromAreaInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageFromAreaInstanceBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageFromAreaInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCloudImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCloudImageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCloudImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudImageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudImageInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudImageInfoBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudImageInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOsVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOsVersionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOsVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOsVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOsVersionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOsVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOsVersionMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOsVersionMapBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOsVersionMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOsVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOsVersionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOsVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diskless_cloud_image_diskless_cloud_image_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diskless_cloud_image_diskless_cloud_image_proto_goTypes,
		DependencyIndexes: file_diskless_cloud_image_diskless_cloud_image_proto_depIdxs,
		MessageInfos:      file_diskless_cloud_image_diskless_cloud_image_proto_msgTypes,
	}.Build()
	File_diskless_cloud_image_diskless_cloud_image_proto = out.File
	file_diskless_cloud_image_diskless_cloud_image_proto_rawDesc = nil
	file_diskless_cloud_image_diskless_cloud_image_proto_goTypes = nil
	file_diskless_cloud_image_diskless_cloud_image_proto_depIdxs = nil
}
