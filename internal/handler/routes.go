// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	biz "cdp-admin-service/internal/handler/biz"
	boot_schema "cdp-admin-service/internal/handler/boot_schema"
	cache "cdp-admin-service/internal/handler/cache"
	cloudbox "cdp-admin-service/internal/handler/cloudbox"
	cloudclient "cdp-admin-service/internal/handler/cloudclient"
	idc "cdp-admin-service/internal/handler/idc"
	instance "cdp-admin-service/internal/handler/instance"
	servermgr "cdp-admin-service/internal/handler/servermgr"
	spec "cdp-admin-service/internal/handler/spec"
	syslog "cdp-admin-service/internal/handler/sys/log"
	sysmenu "cdp-admin-service/internal/handler/sys/menu"
	sysrole "cdp-admin-service/internal/handler/sys/role"
	user "cdp-admin-service/internal/handler/user"
	"cdp-admin-service/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/sync",
					Handler: cache.CacheSyncHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/syncV2",
					Handler: cache.CacheSyncV2Handler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/cache"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: user.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: user.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/permmenu",
					Handler: user.GetUserPermMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: user.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/area_infos",
					Handler: user.GetUserAreaTypesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/regions",
					Handler: user.GetUserRegionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: user.GetUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: user.CreateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: user.UpdateUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/password/update",
					Handler: user.UpdateUserPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/password/reset",
					Handler: user.ResetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/menulist",
					Handler: sysmenu.GetMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/addmenu",
					Handler: sysmenu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatemenu",
					Handler: sysmenu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/deletemenu",
					Handler: sysmenu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/rolemenutree",
					Handler: sysmenu.GetRoleMenuTreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/sys/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/rolelist",
					Handler: sysrole.GetSysRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/addrole",
					Handler: sysrole.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updaterole",
					Handler: sysrole.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/deleterole",
					Handler: sysrole.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/getrolemenuperms",
					Handler: sysrole.GetRoleMenuPermsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updaterolemenuperms",
					Handler: sysrole.UpdateRoleMenuPermsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/loglist",
					Handler: syslog.GetLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/infos",
					Handler: biz.GetBizInfosHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: biz.CreateBizHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update",
					Handler: biz.UpdateBizHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: biz.DeleteBizHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configbizstrategy",
					Handler: biz.ConfigBizStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configbizserverinfo",
					Handler: biz.ConfigBizServerInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configbizvlan",
					Handler: biz.ConfigBizVlanHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/enable",
					Handler: biz.EnableBizHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatebizstrategy",
					Handler: biz.UpdateBizStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/deletebizstrategy",
					Handler: biz.DeleteBizStrategyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/biz"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: idc.IdcHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/idccreate",
					Handler: idc.IdcCreateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/idc"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/instancelist",
					Handler: instance.InstanceListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/addinstance",
					Handler: instance.InstanceAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instanceupdate",
					Handler: instance.InstanceUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategylist",
					Handler: instance.StrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategyadd",
					Handler: instance.StrategyAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategyupdate",
					Handler: instance.StrategyUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategydelete",
					Handler: instance.StrategyDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancestatistic",
					Handler: instance.InstanceStatisticHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancepooladd",
					Handler: instance.InstancePoolAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancepoollist",
					Handler: instance.InstancePoolListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancepoolupdate",
					Handler: instance.InstancePoolUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancepoolrelease",
					Handler: instance.InstancePoolReleaseHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/querystrategyinstance",
					Handler: instance.StrategyQueryInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategyreleaseinstance",
					Handler: instance.StrategyReleaseInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategyreebuildpool",
					Handler: instance.StrategyReBuildPoolHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instancebindpool",
					Handler: instance.InstanceBindPoolHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/strategyinstnoscheduing",
					Handler: instance.StrategyInstNoScheduingHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/instance"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/queryinststragyinfo",
					Handler: instance.QueryInstStragyInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/instance"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/serverinfolist",
					Handler: servermgr.ServerInfoListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverinfoadd",
					Handler: servermgr.ServerInfoAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverinfoupdate",
					Handler: servermgr.ServerInfoUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/servermgr"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: boot_schema.CreateBootSchemaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: boot_schema.UpdateBootSchemaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: boot_schema.DeleteBootSchemaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: boot_schema.ListBootSchemaHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/boot_schema"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/speclist",
					Handler: spec.SpecHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/spec"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxlist",
					Handler: cloudbox.CloudBoxListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxadd",
					Handler: cloudbox.CloudBoxAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxupdate",
					Handler: cloudbox.CloudBoxUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxdelete",
					Handler: cloudbox.CloudBoxDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboximport",
					Handler: cloudbox.CloudBoxImportHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxsetadmin",
					Handler: cloudbox.CloudBoxSetAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxcanceladmin",
					Handler: cloudbox.CloudBoxCancelAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxbatchadd",
					Handler: cloudbox.CloudBoxBatchAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudboxbatchupdate",
					Handler: cloudbox.CloudBoxBatchUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/cloudbox"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware, serverCtx.AuthInterceptorMiddleware, serverCtx.MenuInterceptorMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientlist",
					Handler: cloudclient.CloudClientListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientadd",
					Handler: cloudclient.CloudClientAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientupdate",
					Handler: cloudclient.CloudClientUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientdelete",
					Handler: cloudclient.CloudClientDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientimport",
					Handler: cloudclient.CloudClientImportHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientsetadmin",
					Handler: cloudclient.CloudClientSetAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientcanceladmin",
					Handler: cloudclient.CloudClientCancelAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientbatchadd",
					Handler: cloudclient.CloudClientBatchAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientbindbox",
					Handler: cloudclient.CloudClientBindBoxHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientbatchupdate",
					Handler: cloudclient.CloudClientBatchUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientunbindlist",
					Handler: cloudclient.CloudClientUnbindListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/cloudclient"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogwayHandleMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/cloudclientassignnotice",
					Handler: cloudclient.CloudClientAssignNoticeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/querycloudclientstrategy",
					Handler: cloudclient.QueryCloudClientStrategyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/cdp/admin/cloudclient"),
	)
}
